{"version":3,"sources":["views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/StatBox.tsx","views/Nft/market/components/CollectibleCard/styles.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/hooks/useGetCollectionDistribution.tsx","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx","../node_modules/lodash/sum.js","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/hooks/useGetLowestPrice.ts","../node_modules/lodash/capitalize.js","../node_modules/lodash/_baseSum.js","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx","components/CollapsibleCard/index.tsx","views/Nft/market/Collection/Traits/styles.tsx","views/Nft/market/Collection/Traits/PancakeBunniesTraits.tsx","views/Nft/market/Collection/Traits/utils.tsx","views/Nft/market/Collection/Traits/CollectionTraits.tsx","views/Nft/market/Collection/Traits/index.tsx","components/AddressInputSelect/index.tsx"],"names":["MarketPageHeader","props","background","useTheme","theme","isDark","StatBoxItem","title","stat","fontSize","color","textAlign","height","width","mx","fontWeight","StatBox","styled","Flex","colors","invertedContrast","cardBorder","radii","card","BNBAmountLabel","amount","alignItems","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","CostLabel","cost","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","MetaRow","children","justifyContent","maxWidth","ellipsis","StyledCollectibleCard","Card","mediaQueries","lg","LowestPriceMetaRow","lowestPrice","isFetching","t","useTranslation","AvatarImage","div","attrs","alt","src","borderColor","useGetCollectionDistributionPB","useState","data","state","setState","useEffect","a","prevState","getCollectionDistributionApi","pancakeBunniesAddress","apiResponse","fetchTokens","useGetCollectionDistribution","collectionAddress","SearchBar","history","useHistory","onAddressClick","value","push","nftsBaseUrl","MarketPageTitle","description","gridGap","gridTemplateColumns","as","scale","mb","BaseSubMenu","SubMenuItems","baseSum","require","identity","module","exports","array","length","StyledBannerImage","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","flexDirection","position","pb","BannerImage","bottom","left","getBunnyIdFromNft","nft","bunnyId","attributes","find","attr","traitType","toString","useGetLowestPriceFromBunnyId","setIsFetching","setLowestPrice","getNftsMarketData","otherId","isTradable","response","tokenMarketData","parseFloat","currentAskPrice","fetchLowestPrice","useGetLowestPriceFromNft","isPancakeBunny","toLowerCase","bunnyIdAttr","upperFirst","string","iteratee","result","index","current","BackLink","RouterLink","primary","TopBar","to","LowestPriceStatBoxItem","getLowestPriceInCollection","lowestCollectionPrice","formattedLowestPrice","symbol","Header","collection","useParams","totalSupply","numberTokensListed","totalVolumeBNB","banner","useLocation","pathname","hash","volume","itemsConfig","label","href","large","name","formatNumber","Number","address","Container","items","activeItem","mt","CollapsibleCard","initialOpenState","isOpen","setIsOpen","p","variant","onClick","StyledSortButton","button","secondary","TableWrapper","NftImage","Image","ClickableRow","tr","NftName","thumbnailSrc","mr","LowestPriceCell","PancakeBunniesTraits","tokenApiResponse","setTokenApiResponse","raritySort","setRaritySort","getNftsFromCollectionApi","totalMinted","sum","Object","values","attributesDistribution","sortedBunnieKeys","useMemo","keys","sort","bunnyIdA","bunnyIdB","bunnyCountA","bunnyCountB","sortBunniesByRarityBuilder","type","currentValue","map","count","percentage","image","thumbnail","times","bunnyCnt","CollectionTraits","total","traitValues","reduce","accum","traitValue","rarity","sortType","capitalize","prevRaritySort","orderBy","Traits","dispatch","useAppDispatch","useGetCollection","fetchCollection","py","ResultStatus","SubMenu","input","inputSecondary","default","AddressLink","Text","initialState","resultFound","NOT_VALID","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","isAddress","hasResults","FOUND","NOT_FOUND","validAddressHandler","placeholder","subject","onChange","evt","newValue","target","style","zIndex","paddingRight","top","right","px"],"mappings":"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","file":"static/js/9.bbc2a67e.chunk.js","sourcesContent":["import React from 'react'\r\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\r\n  const { theme } = useTheme()\r\n  const background = theme.isDark\r\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\r\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\r\n  return <PageHeader background={background} {...props} />\r\n}\r\n\r\nexport default MarketPageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\n\r\nexport interface StatBoxItemProps extends BoxProps {\r\n  title: string\r\n  stat: string\r\n}\r\n\r\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\r\n  <Box {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\r\n      {title}\r\n    </Text>\r\n    {stat === null ? (\r\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\r\n    ) : (\r\n      <Text fontWeight=\"600\" textAlign=\"center\">\r\n        {stat}\r\n      </Text>\r\n    )}\r\n  </Box>\r\n)\r\n\r\nconst StatBox = styled(Flex)`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.invertedContrast};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  justify-content: space-around;\r\n  padding: 8px;\r\n  width: 100%;\r\n`\r\n\r\nexport default StatBox\r\n","import React, { ReactElement } from 'react'\r\nimport {\r\n  Card,\r\n  BinanceIcon,\r\n  Box,\r\n  BoxProps,\r\n  CameraIcon,\r\n  Flex,\r\n  FlexProps,\r\n  SellIcon,\r\n  Text,\r\n  WalletFilledIcon,\r\n  Skeleton,\r\n} from '@pancakeswap/uikit'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport styled from 'styled-components'\r\n\r\nexport const Footer: React.FC<BoxProps> = ({ children, ...props }) => (\r\n  <Box borderTop={[null, null, null, '1px solid']} borderColor=\"cardBorder\" pt=\"8px\" {...props}>\r\n    {children}\r\n  </Box>\r\n)\r\n\r\ninterface BNBAmountLabelProps extends FlexProps {\r\n  amount: number\r\n}\r\n\r\nexport const BNBAmountLabel: React.FC<BNBAmountLabelProps> = ({ amount, ...props }) => (\r\n  <Flex alignItems=\"center\" {...props}>\r\n    <BinanceIcon width=\"16px\" mx=\"4px\" />\r\n    <Text fontWeight=\"600\">\r\n      {amount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 4,\r\n      })}\r\n    </Text>\r\n  </Flex>\r\n)\r\n\r\ninterface CostLabelProps extends FlexProps {\r\n  cost: number\r\n  bnbBusdPrice: Price\r\n}\r\n\r\nexport const CostLabel: React.FC<CostLabelProps> = ({ cost, bnbBusdPrice, ...props }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, cost)\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" {...props}>\r\n      {priceInUsd > 0 && (\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">{`($${priceInUsd.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}</Text>\r\n      )}\r\n      <BNBAmountLabel amount={cost} />\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface MetaRowProps extends FlexProps {\r\n  title: string\r\n}\r\n\r\nexport const MetaRow: React.FC<MetaRowProps> = ({ title, children, ...props }) => (\r\n  <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" maxWidth=\"120px\" ellipsis title={title}>\r\n      {title}\r\n    </Text>\r\n    <Box>{children}</Box>\r\n  </Flex>\r\n)\r\n\r\nexport interface NftTagProps extends FlexProps {\r\n  icon?: ReactElement\r\n  color?: string\r\n}\r\n\r\nexport const NftTag: React.FC<NftTagProps> = ({ icon, color = 'text', children, ...props }) => (\r\n  <Flex display=\"inline-flex\" alignItems=\"center\" height=\"24px\" {...props}>\r\n    {icon}\r\n    <Text color={color} fontSize=\"14px\" fontWeight=\"600\">\r\n      {children}\r\n    </Text>\r\n  </Flex>\r\n)\r\n\r\nexport const ProfileNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<CameraIcon mr=\"4px\" width=\"16px\" color=\"textSubtle\" />} color=\"textSubtle\" {...props}>\r\n      {t('Profile')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const WalletNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<WalletFilledIcon mr=\"4px\" width=\"16px\" color=\"secondary\" />} color=\"secondary\" {...props}>\r\n      {t('Wallet')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const SellingNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<SellIcon mr=\"4px\" width=\"16px\" color=\"failure\" />} color=\"failure\" {...props}>\r\n      {t('Selling')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const StyledCollectibleCard = styled(Card)`\r\n  border-radius: 8px;\r\n  max-width: 320px;\r\n  transition: opacity 200ms;\r\n\r\n  & > div {\r\n    border-radius: 8px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    &:hover {\r\n      cursor: pointer;\r\n      opacity: 0.6;\r\n    }\r\n  }\r\n`\r\ninterface LowestPriceMetaRowProps {\r\n  lowestPrice: number\r\n  isFetching: boolean\r\n  bnbBusdPrice: Price\r\n}\r\n\r\nexport const LowestPriceMetaRow = ({ lowestPrice, isFetching, bnbBusdPrice }: LowestPriceMetaRowProps) => {\r\n  const { t } = useTranslation()\r\n\r\n  if (!isFetching && !lowestPrice) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <MetaRow title={t('Lowest price')}>\r\n      {isFetching ? (\r\n        <Skeleton height=\"24px\" width=\"30px\" />\r\n      ) : (\r\n        <CostLabel cost={lowestPrice} bnbBusdPrice={bnbBusdPrice} />\r\n      )}\r\n    </MetaRow>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\n\r\ninterface AvatarImageProps {\r\n  src: string\r\n  borderColor?: string\r\n  alt?: string\r\n}\r\n\r\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<AvatarImageProps>`\r\n  background: url('${({ src }) => src}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default AvatarImage\r\n","import { useEffect, useState } from 'react'\r\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\r\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\ninterface State {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistribution['data']\r\n}\r\n\r\nconst useGetCollectionDistribution = (collectionAddress: string) => {\r\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setState])\r\n\r\n  return state\r\n}\r\n\r\ninterface StatePB {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistributionPB['data']\r\n}\r\n\r\nexport const useGetCollectionDistributionPB = () => {\r\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [setState])\r\n\r\n  return state\r\n}\r\n\r\nexport default useGetCollectionDistribution\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport AddressInputSelect from 'components/AddressInputSelect'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\n\r\nconst SearchBar: React.FC = (props) => {\r\n  const history = useHistory()\r\n\r\n  const handleAddressClick = (value: string) => {\r\n    history.push(`${nftsBaseUrl}/profile/${value}`)\r\n  }\r\n\r\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\r\n}\r\n\r\nexport default SearchBar\r\n","import React, { ReactNode } from 'react'\r\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface MarketPageTitleProps extends GridProps {\r\n  title: string\r\n  description?: ReactNode\r\n}\r\n\r\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\r\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\r\n    <Box>\r\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\r\n        {title}\r\n      </Heading>\r\n      {description}\r\n    </Box>\r\n    <Box>{children}</Box>\r\n  </Grid>\r\n)\r\n\r\nexport default MarketPageTitle\r\n","import { SubMenuItems } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseSubMenu = styled(SubMenuItems)`\r\n  background-color: transparent;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nexport default BaseSubMenu\r\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","import styled from 'styled-components'\r\n\r\ninterface StyledBannerImageProps {\r\n  src: string\r\n  alt?: string\r\n}\r\n\r\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<StyledBannerImageProps>`\r\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 100%;\r\n  border-radius: 32px;\r\n  height: 123px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 192px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    height: 256px;\r\n  }\r\n`\r\n\r\nexport default StyledBannerImage\r\n","import React, { ReactNode } from 'react'\r\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\r\nimport BannerImage from './BannerImage'\r\n\r\ninterface BannerHeaderProps extends FlexProps {\r\n  bannerImage: string\r\n  bannerAlt?: string\r\n  avatar?: ReactNode\r\n}\r\n\r\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\r\n  return (\r\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\r\n      <Box position=\"relative\" pb=\"56px\">\r\n        <BannerImage src={bannerImage} alt={bannerAlt} />\r\n        <Box position=\"absolute\" bottom={0} left={-4}>\r\n          <Flex alignItems=\"flex-end\">\r\n            {avatar}\r\n            {children}\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default BannerHeader\r\n","import { useEffect, useState } from 'react'\r\nimport { getNftsMarketData } from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\nexport interface LowestNftPrice {\r\n  isFetching: boolean\r\n  lowestPrice: number\r\n}\r\n\r\nconst getBunnyIdFromNft = (nft: NftToken): string => {\r\n  const bunnyId = nft.attributes?.find((attr) => attr.traitType === 'bunnyId')?.value\r\n  return bunnyId ? bunnyId.toString() : null\r\n}\r\n\r\nexport const useGetLowestPriceFromBunnyId = (bunnyId: string): LowestNftPrice => {\r\n  const [isFetching, setIsFetching] = useState<boolean>(false)\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      try {\r\n        setIsFetching(true)\r\n        const response = await getNftsMarketData({ otherId: bunnyId, isTradable: true }, 1, 'currentAskPrice', 'asc')\r\n\r\n        if (response.length > 0) {\r\n          const [tokenMarketData] = response\r\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\r\n        }\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    if (bunnyId) {\r\n      fetchLowestPrice()\r\n    }\r\n  }, [bunnyId])\r\n\r\n  return { isFetching, lowestPrice }\r\n}\r\n\r\nexport const useGetLowestPriceFromNft = (nft: NftToken): LowestNftPrice => {\r\n  const [isFetching, setIsFetching] = useState<boolean>(false)\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n  const isPancakeBunny = nft.collectionAddress?.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      const bunnyIdAttr = getBunnyIdFromNft(nft)\r\n      try {\r\n        setIsFetching(true)\r\n        const response = await getNftsMarketData(\r\n          { otherId: bunnyIdAttr, isTradable: true },\r\n          1,\r\n          'currentAskPrice',\r\n          'asc',\r\n        )\r\n\r\n        if (response.length > 0) {\r\n          const [tokenMarketData] = response\r\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\r\n        }\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    if (isPancakeBunny && nft) {\r\n      fetchLowestPrice()\r\n    }\r\n  }, [isPancakeBunny, nft])\r\n\r\n  return { isFetching, lowestPrice }\r\n}\r\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","import React from 'react'\r\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport SearchBar from '../components/SearchBar'\r\n\r\nconst BackLink = styled(RouterLink)`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: inline-flex;\r\n  font-weight: 600;\r\n`\r\n\r\nconst TopBar: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n      <BackLink to={`${nftsBaseUrl}/collections`}>\r\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\r\n        {t('All Collections')}\r\n      </BackLink>\r\n      <Box>\r\n        <SearchBar />\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TopBar\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\r\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\r\n\r\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\r\n  collectionAddress: string\r\n}\r\n\r\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n  const { t } = useTranslation()\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\r\n      setLowestPrice(lowestCollectionPrice)\r\n    }\r\n\r\n    fetchLowestPrice()\r\n  }, [collectionAddress, setLowestPrice])\r\n\r\n  const formattedLowestPrice =\r\n    lowestPrice === null\r\n      ? null\r\n      : lowestPrice.toLocaleString(undefined, {\r\n          minimumFractionDigits: 3,\r\n          maximumFractionDigits: 3,\r\n        })\r\n\r\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\r\n}\r\n\r\nexport default LowestPriceStatBoxItem\r\n","import React from 'react'\r\nimport { useLocation, useParams } from 'react-router'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport MarketPageTitle from '../components/MarketPageTitle'\r\nimport StatBox, { StatBoxItem } from '../components/StatBox'\r\nimport BannerHeader from '../components/BannerHeader'\r\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\r\nimport BaseSubMenu from '../components/BaseSubMenu'\r\nimport { nftsBaseUrl } from '../constants'\r\nimport TopBar from './TopBar'\r\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\r\n\r\ninterface HeaderProps {\r\n  collection: Collection\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\r\n  const { t } = useTranslation()\r\n  const { pathname, hash } = useLocation()\r\n\r\n  const volume = totalVolumeBNB\r\n    ? parseFloat(totalVolumeBNB).toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })\r\n    : '0'\r\n\r\n  const itemsConfig = [\r\n    {\r\n      label: t('Items'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\r\n    },\r\n    {\r\n      label: t('Traits'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <MarketPageHeader>\r\n        <TopBar />\r\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\r\n        <MarketPageTitle\r\n          title={collection.name}\r\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\r\n        >\r\n          <StatBox>\r\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\r\n            <StatBoxItem\r\n              title={t('Items listed')}\r\n              stat={numberTokensListed ? formatNumber(Number(numberTokensListed), 0, 0) : '0'}\r\n            />\r\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\r\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\r\n          </StatBox>\r\n        </MarketPageTitle>\r\n      </MarketPageHeader>\r\n      <Container>\r\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || '#items'}`} mt=\"24px\" mb=\"8px\" />\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react'\r\nimport {\r\n  CardProps,\r\n  CardHeader,\r\n  Card,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n} from '@pancakeswap/uikit'\r\n\r\ninterface CollapsibleCardProps extends CardProps {\r\n  initialOpenState?: boolean\r\n  title: string\r\n}\r\n\r\nconst CollapsibleCard: React.FC<CollapsibleCardProps> = ({ initialOpenState = true, title, children, ...props }) => {\r\n  const [isOpen, setIsOpen] = useState(initialOpenState)\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Heading as=\"h3\">{title}</Heading>\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\r\n            {isOpen ? <ChevronUpIcon width=\"24px\" /> : <ChevronDownIcon width=\"24px\" />}\r\n          </IconButton>\r\n        </Flex>\r\n      </CardHeader>\r\n      {isOpen && children}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CollapsibleCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Image, Text } from '@pancakeswap/uikit'\r\n\r\nexport const StyledSortButton = styled.button`\r\n  border: none;\r\n  cursor: pointer;\r\n  background: none;\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n  font-weight: bold;\r\n`\r\n\r\nexport const TableWrapper = styled.div`\r\n  -webkit-overflow-scrolling: touch;\r\n  min-width: 320px;\r\n  overflow-x: auto;\r\n`\r\n\r\nexport const NftImage = styled(Image)`\r\n  flex: none;\r\n  & > img {\r\n    border-radius: 8px;\r\n  }\r\n`\r\n\r\nexport const ClickableRow = styled.tr`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    td {\r\n      opacity: 0.65;\r\n    }\r\n  }\r\n`\r\n\r\nexport const NftName: React.FC<{ thumbnailSrc: string; name: string }> = ({ thumbnailSrc, name }) => (\r\n  <Flex alignItems=\"center\">\r\n    <NftImage src={thumbnailSrc} width={48} height={48} mr=\"8px\" />\r\n    <Text>{name}</Text>\r\n  </Flex>\r\n)\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { Skeleton, Table, Td, Th, Flex, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\r\nimport { useHistory } from 'react-router'\r\nimport times from 'lodash/times'\r\nimport sum from 'lodash/sum'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\r\nimport { ApiResponseCollectionTokens } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollapsibleCard from 'components/CollapsibleCard'\r\nimport { useGetLowestPriceFromBunnyId } from '../../hooks/useGetLowestPrice'\r\nimport { BNBAmountLabel } from '../../components/CollectibleCard/styles'\r\nimport { sortBunniesByRarityBuilder } from './utils'\r\nimport { nftsBaseUrl } from '../../constants'\r\nimport { SortType } from '../../types'\r\nimport { ClickableRow, NftName, StyledSortButton, TableWrapper } from './styles'\r\n\r\ninterface PancakeBunniesTraitsProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst LowestPriceCell: React.FC<{ bunnyId: string }> = ({ bunnyId }) => {\r\n  const { isFetching, lowestPrice } = useGetLowestPriceFromBunnyId(bunnyId)\r\n\r\n  if (isFetching) {\r\n    return (\r\n      <Flex justifyContent=\"flex-end\" width=\"100px\">\r\n        <Skeleton height=\"24px\" width=\"48px\" />\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  if (!lowestPrice) {\r\n    return null\r\n  }\r\n\r\n  return <BNBAmountLabel justifyContent=\"flex-end\" amount={lowestPrice} width=\"100px\" />\r\n}\r\n\r\nconst PancakeBunniesTraits: React.FC<PancakeBunniesTraitsProps> = ({ collectionAddress }) => {\r\n  const [tokenApiResponse, setTokenApiResponse] = useState<ApiResponseCollectionTokens>(null)\r\n  const [raritySort, setRaritySort] = useState<SortType>('asc')\r\n  const { t } = useTranslation()\r\n  const { push } = useHistory()\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress)\r\n      setTokenApiResponse(apiResponse)\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setTokenApiResponse])\r\n\r\n  const totalMinted = tokenApiResponse ? sum(Object.values(tokenApiResponse.attributesDistribution)) : 0\r\n\r\n  const sortedBunnieKeys = useMemo(() => {\r\n    if (!tokenApiResponse) return []\r\n\r\n    return Object.keys(tokenApiResponse.data).sort(sortBunniesByRarityBuilder({ raritySort, data: tokenApiResponse }))\r\n  }, [raritySort, tokenApiResponse])\r\n\r\n  const toggleRaritySort = () => {\r\n    setRaritySort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {tokenApiResponse ? (\r\n        <CollapsibleCard title={t('Bunny Id')}>\r\n          <TableWrapper>\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <Th textAlign=\"left\">{t('Name')}</Th>\r\n                  <Th>{t('Count')}</Th>\r\n                  <Th>\r\n                    <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\r\n                      <Flex alignItems=\"center\">\r\n                        {t('Rarity')}\r\n                        {raritySort === 'asc' ? <ArrowUpIcon color=\"secondary\" /> : <ArrowDownIcon color=\"secondary\" />}\r\n                      </Flex>\r\n                    </StyledSortButton>\r\n                  </Th>\r\n                  <Th textAlign=\"right\">{t('Lowest')}</Th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {sortedBunnieKeys.map((bunnyId) => {\r\n                  const nft = tokenApiResponse.data[bunnyId]\r\n                  if (!nft) {\r\n                    // Some bunnies don't exist on testnet\r\n                    return null\r\n                  }\r\n                  const count: number = tokenApiResponse.attributesDistribution[bunnyId] ?? 0\r\n                  const percentage = (count / totalMinted) * 100\r\n                  const handleClick = () => {\r\n                    push(`${nftsBaseUrl}/collections/${collectionAddress}/${bunnyId}`)\r\n                  }\r\n\r\n                  return (\r\n                    <ClickableRow key={bunnyId} onClick={handleClick} title={t('Click to view NFT')}>\r\n                      <Td>\r\n                        <NftName thumbnailSrc={nft.image.thumbnail} name={nft.name} />\r\n                      </Td>\r\n                      <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\r\n                      <Td textAlign=\"center\">{`${formatNumber(percentage, 0, 2)}%`}</Td>\r\n                      <Td textAlign=\"right\" width=\"100px\">\r\n                        <LowestPriceCell bunnyId={bunnyId} />\r\n                      </Td>\r\n                    </ClickableRow>\r\n                  )\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </TableWrapper>\r\n        </CollapsibleCard>\r\n      ) : (\r\n        <CollapsibleCard title={t('Loading...')}>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <Th textAlign=\"left\">{t('Name')}</Th>\r\n                <Th>{t('Count')}</Th>\r\n                <Th>{t('Rarity')}</Th>\r\n                <Th>{t('Lowest')}</Th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {times(19).map((bunnyCnt) => (\r\n                <tr key={bunnyCnt}>\r\n                  <Td>\r\n                    <Flex alignItems=\"center\">\r\n                      <Skeleton height=\"48px\" width=\"48px\" mr=\"8px\" />\r\n                      <Skeleton width=\"100px\" />\r\n                    </Flex>\r\n                  </Td>\r\n                  <Td>\r\n                    <Skeleton />\r\n                  </Td>\r\n                  <Td>\r\n                    <Skeleton />\r\n                  </Td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </CollapsibleCard>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PancakeBunniesTraits\r\n","import { ApiResponseCollectionTokens } from 'state/nftMarket/types'\r\n\r\ntype sortBuilder = {\r\n  data: ApiResponseCollectionTokens\r\n  raritySort: string\r\n}\r\n\r\nexport const sortBunniesByRarityBuilder =\r\n  ({ raritySort, data }: sortBuilder) =>\r\n  (bunnyIdA, bunnyIdB) => {\r\n    const bunnyCountA = data.attributesDistribution[bunnyIdA] ?? 0\r\n    const bunnyCountB = data.attributesDistribution[bunnyIdB] ?? 0\r\n\r\n    return raritySort === 'asc' ? bunnyCountA - bunnyCountB : bunnyCountB - bunnyCountA\r\n  }\r\n","import React, { useState } from 'react'\r\nimport times from 'lodash/times'\r\nimport capitalize from 'lodash/capitalize'\r\nimport sum from 'lodash/sum'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { ArrowDownIcon, ArrowUpIcon, Flex, Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport CollapsibleCard from 'components/CollapsibleCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { SortType } from '../../types'\r\nimport { StyledSortButton, TableWrapper } from './styles'\r\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\r\n\r\ninterface CollectionTraitsProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst CollectionTraits: React.FC<CollectionTraitsProps> = ({ collectionAddress }) => {\r\n  const { data, isFetching } = useGetCollectionDistribution(collectionAddress)\r\n  const [raritySort, setRaritySort] = useState<Record<string, SortType>>({})\r\n  const { t } = useTranslation()\r\n\r\n  if (isFetching) {\r\n    return (\r\n      <CollapsibleCard title={t('Loading...')}>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <Th textAlign=\"left\">{t('Name')}</Th>\r\n              <Th width=\"100px\">{t('Count')}</Th>\r\n              <Th width=\"160px\">{t('Rarity')}</Th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {times(19).map((bunnyCnt) => (\r\n              <tr key={bunnyCnt}>\r\n                <Td>\r\n                  <Skeleton width=\"100px\" />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton />\r\n                </Td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </CollapsibleCard>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {data &&\r\n        Object.keys(data).map((traitType, index) => {\r\n          const total = sum(Object.values(data[traitType]))\r\n\r\n          // Parse the distribution values into an array to make it easier to sort\r\n          const traitValues: { value: string; count: number; rarity: number }[] = Object.keys(data[traitType]).reduce(\r\n            (accum, traitValue) => {\r\n              const count = data[traitType][traitValue]\r\n              const rarity = (count / total) * 100\r\n\r\n              return [...accum, { value: traitValue, count, rarity }]\r\n            },\r\n            [],\r\n          )\r\n          const sortType = raritySort[traitType] || 'desc'\r\n\r\n          const toggleRaritySort = () => {\r\n            setRaritySort((prevRaritySort) => {\r\n              if (!prevRaritySort[traitType]) {\r\n                return {\r\n                  ...prevRaritySort,\r\n                  [traitType]: 'asc',\r\n                }\r\n              }\r\n\r\n              return {\r\n                ...prevRaritySort,\r\n                [traitType]: prevRaritySort[traitType] === 'asc' ? 'desc' : 'asc',\r\n              }\r\n            })\r\n          }\r\n\r\n          return (\r\n            <CollapsibleCard key={traitType} title={capitalize(traitType)} initialOpenState={index <= 1} mb=\"32px\">\r\n              <TableWrapper>\r\n                <Table>\r\n                  <thead>\r\n                    <tr>\r\n                      <Th textAlign=\"left\">{t('Name')}</Th>\r\n                      <Th width=\"100px\">{t('Count')}</Th>\r\n                      <Th width=\"160px\">\r\n                        <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\r\n                          <Flex alignItems=\"center\">\r\n                            {t('Rarity')}\r\n                            {raritySort[traitType] === 'asc' ? (\r\n                              <ArrowUpIcon color=\"secondary\" />\r\n                            ) : (\r\n                              <ArrowDownIcon color=\"secondary\" />\r\n                            )}\r\n                          </Flex>\r\n                        </StyledSortButton>\r\n                      </Th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {orderBy(traitValues, 'rarity', sortType).map(({ value, count, rarity }) => {\r\n                      return (\r\n                        <tr key={value}>\r\n                          <Td>{capitalize(value)}</Td>\r\n                          <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\r\n                          <Td textAlign=\"center\">{`${formatNumber(rarity, 0, 2)}%`}</Td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n              </TableWrapper>\r\n            </CollapsibleCard>\r\n          )\r\n        })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CollectionTraits\r\n","import React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport Container from 'components/Layout/Container'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { fetchCollection } from 'state/nftMarket/reducer'\r\nimport Header from '../Header'\r\nimport PancakeBunniesTraits from './PancakeBunniesTraits'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\nimport CollectionTraits from './CollectionTraits'\r\n\r\nconst Traits = () => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const dispatch = useAppDispatch()\r\n  const collection = useGetCollection(collectionAddress)\r\n\r\n  useEffect(() => {\r\n    if (collectionAddress) {\r\n      dispatch(fetchCollection(collectionAddress))\r\n    }\r\n  }, [collectionAddress, dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Header collection={collection} />\r\n      <Container py=\"40px\">\r\n        {collectionAddress === pancakeBunniesAddress ? (\r\n          <PancakeBunniesTraits collectionAddress={collectionAddress} />\r\n        ) : (\r\n          <CollectionTraits collectionAddress={collectionAddress} />\r\n        )}\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Traits\r\n","import React, { ChangeEvent, useState, useEffect } from 'react'\r\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { isAddress } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CircleLoader from 'components/Loader/CircleLoader'\r\n\r\nenum ResultStatus {\r\n  NOT_VALID,\r\n  FOUND,\r\n  NOT_FOUND,\r\n}\r\n\r\ninterface AddressInputSelectProps extends BoxProps {\r\n  onValidAddress?: (value: string) => Promise<boolean>\r\n  onAddressClick: (value: string) => void\r\n}\r\n\r\nconst SubMenu = styled.div<{ isOpen: boolean }>`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\r\n  left: 0;\r\n  padding-bottom: 8px;\r\n  padding-top: 16px;\r\n  position: absolute;\r\n  top: calc(100% - 12px);\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  width: 100%;\r\n  z-index: 15;\r\n\r\n  ${({ isOpen }) =>\r\n    isOpen &&\r\n    `\r\n    height: auto;\r\n    opacity: 1;\r\n    transform: scaleY(1);\r\n  `}\r\n`\r\n\r\nconst AddressLink = styled(Text)`\r\n  cursor: pointer;\r\n  overflow-wrap: break-word;\r\n  font-weight: bold;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n`\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  resultFound: ResultStatus.NOT_VALID,\r\n  value: '',\r\n}\r\n\r\nconst defaultValidAddressHandler = () => Promise.resolve(true)\r\n\r\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\r\n  onValidAddress = defaultValidAddressHandler,\r\n  onAddressClick,\r\n  ...props\r\n}) => {\r\n  const [state, setState] = useState(initialState)\r\n  const { t } = useTranslation()\r\n  const { isFetching, resultFound, value } = state\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value: newValue } = evt.target\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      value: newValue,\r\n    }))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setState(initialState)\r\n    onAddressClick(state.value)\r\n  }\r\n\r\n  // When we have a valid address fetch the data\r\n  useEffect(() => {\r\n    const isValidAddress = isAddress(value) !== false\r\n\r\n    const validAddressHandler = async () => {\r\n      try {\r\n        setState((prevState) => ({ ...prevState, isFetching: true }))\r\n        const hasResults = await onValidAddress(value)\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isFetching: false,\r\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\r\n        }))\r\n      } catch {\r\n        setState((prevState) => ({ ...prevState, isFetching: false }))\r\n      }\r\n    }\r\n\r\n    if (isValidAddress) {\r\n      validAddressHandler()\r\n    } else {\r\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\r\n    }\r\n  }, [value, onValidAddress, setState])\r\n\r\n  return (\r\n    <Box position=\"relative\" {...props}>\r\n      <Input\r\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\r\n        value={state.value}\r\n        onChange={handleChange}\r\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\r\n      />\r\n      {isFetching && (\r\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\r\n          <CircleLoader />\r\n        </Box>\r\n      )}\r\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\r\n        {resultFound === ResultStatus.FOUND ? (\r\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\r\n        ) : (\r\n          <Text px=\"16px\" fontWeight=\"bold\">\r\n            {t('No results found.')}\r\n          </Text>\r\n        )}\r\n      </SubMenu>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default AddressInputSelect\r\n"],"sourceRoot":""}