{"version":3,"sources":["views/Nft/market/hooks/useAllPancakeBunnyNfts.ts","../node_modules/lodash/_baseSum.js","views/Nft/market/components/BuySellModals/BuyModal/types.ts","views/Nft/market/components/BuySellModals/BuyModal/styles.tsx","views/Nft/market/components/BuySellModals/BuyModal/ReviewStage.tsx","views/Nft/market/components/BuySellModals/BuyModal/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/MainPancakeBunnyCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/ExpandableCard.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ManagePancakeBunniesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/PropertiesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/DetailsCard.tsx","views/Nft/market/Collection/IndividualNFTPage/shared/MoreFromThisCollection.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/ForSaleTableRows.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/CountdownCircle.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/UpdateIndicator.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/PancakeBunnyPage/ForSaleTableCard/utils.ts","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/MainNFTCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/ManageNFTsCard.tsx","views/Nft/market/hooks/useNftOwner.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/OwnerCard.tsx","views/Nft/market/Collection/IndividualNFTPage/OneOfAKindNftPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/index.tsx","views/Nft/market/hooks/useGetCollectionDistribution.tsx","../node_modules/lodash/_shuffleSelf.js","../node_modules/lodash/sum.js","../node_modules/lodash/shuffle.js","../node_modules/lodash/_arrayShuffle.js","../node_modules/lodash/_baseShuffle.js"],"names":["useAllPancakeBunnyNfts","collectionAddress","useState","allPancakeBunnyNfts","setAllPancakeBunnyNfts","isPBCollection","pancakeBunniesAddress","useEffect","a","getNftsFromCollectionApi","data","bunnyIds","Object","keys","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","allBunnies","map","bunnyId","tokenId","name","description","collectionName","collection","image","attributes","traitType","value","displayType","meta","currentAskPrice","updatedAt","fetchPancakeBunnies","module","exports","array","iteratee","result","index","length","current","undefined","PaymentCurrency","BuyingStage","StyledModal","styled","Modal","stage","theme","APPROVE_AND_CONFIRM","CONFIRM","colors","textSubtle","BorderedBox","Grid","background","cardBorder","radii","default","BnbAmountCell","bnbAmount","isLoading","isInsufficient","bnbBusdPrice","useBNBBusdPrice","flexDirection","justifySelf","width","height","mb","usdAmount","multiplyPriceByAmount","justifyContent","mr","bold","color","toLocaleString","minimumFractionDigits","maximumFractionDigits","small","textAlign","ReviewStage","nftToBuy","paymentCurrency","setPaymentCurrency","nftPrice","walletBalance","walletFetchStatus","notEnoughBnbForPurchase","continueToNextStage","t","useTranslation","account","useWeb3React","px","pt","src","thumbnail","fontSize","alignItems","p","as","Link","scale","external","variant","href","getBscScanLinkForNft","activeIndex","onItemClick","symbol","BNB","FetchStatus","SUCCESS","ConnectWalletButton","my","pb","onClick","disabled","style","symbol1","symbol2","modalTitles","REVIEW","TX_CONFIRMED","BuyModal","onDismiss","setStage","confirmedTxHash","setConfirmedTxHash","isPaymentCurrentInitialized","setIsPaymentCurrentInitialized","useTheme","callWithGasPrice","useCallWithGasPrice","wbnbContract","useERC20","tokens","wbnb","address","nftMarketContract","useNftMarketContract","toastSuccess","useToast","dispatch","useAppDispatch","nftPriceWei","parseUnits","marketData","parseFloat","useGetBnbBalance","bnbBalance","balance","bnbFetchStatus","fetchStatus","formattedBnbBalance","formatEther","useTokenBalance","wbnbBalance","wbnbFetchStatus","formattedWbnbBalance","getBalanceNumber","lt","ethersToBigNumber","gte","WBNB","useApproveConfirmTransaction","onRequiresApproval","allowance","currentAllowance","gt","onApprove","ethers","constants","MaxUint256","onApproveSuccess","receipt","Toast","txHash","transactionHash","onConfirm","payAmount","Number","isNaN","BigNumber","from","onSuccess","addUserNft","nftLocation","NftLocation","WALLET","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","ApproveAndConfirmStage","ConfirmStage","TransactionConfirmed","MainPancakeBunnyCard","cheapestNft","cheapestNftFromOtherSellers","nothingForSaleBunny","nftToDisplay","onlyOwnNftsOnSale","hasListings","priceInUsd","useModal","onPresentBuyModal","SellModal","nftToSell","onPresentAdjustPriceModal","actionButton","minWidth","mt","flex","to","nftsBaseUrl","maxWidth","NFTMedia","nft","expandAnimation","keyframes","collapseAnimation","ExpandableCardBody","Box","expanded","css","FullWidthCard","Card","ExpandableCard","icon","content","setExpanded","gridTemplateColumns","borderBottom","prev","ScrollableContainer","Divider","div","LocationColors","FORSALE","PROFILE","LocationIcons","SellIcon","WalletFilledIcon","CameraIcon","CollectibleRow","lowestPrice","modalVariant","location","ProfileNftModal","onPresentProfileNftModal","onPresentModal","mx","CollectiblesByLocation","nfts","IconComponent","display","ManagePancakeBunniesCard","useUserNfts","userNftsInitializationState","userNfts","useFetchUserNfts","bunniesInWallet","filter","bunniesForSale","profilePicBunny","loading","UserNftInitializationState","INITIALIZED","useHasNoBunnies","KNOWN_TRAITS_TEXT","SingleProperty","rarity","textTransform","toFixed","PropertiesCard","properties","property","LongTextContainer","Text","DetailsCard","contractAddress","ipfsJson","count","chainId","useActiveWeb3React","ipfsLink","uriToHttp","getBscScanLink","formatNumber","SwiperCircle","isActive","secondary","textDisabled","StyledSwiper","mediaQueries","md","MoreFromThisCollection","currentTokenName","swiperRef","setSwiperRef","setActiveIndex","useMatchBreakpoints","isMobile","isMd","isLg","collectionNfts","useNftsFromCollection","isAddress","fetchNftsFromCollections","page","size","nftsToShow","useMemo","shuffle","isTradable","slidesPerView","maxPageIndex","reduce","nftArray","find","push","slice","spaceBetween","onSwiper","onActiveIndexChange","newActiveIndex","Math","ceil","slidesPerGroup","initialSlide","slidePrev","Array","slideTo","goToSlide","slideNext","OwnersTableRow","Row","ownNft","currentSeller","toLowerCase","pl","ProfileCell","accountAddress","ForSaleTableRow","nftsForSale","countdownAnimation","CountdownContainer","primaryBright","CountdownCircle","secondsRemaining","isUpdating","lineHeight","r","cx","cy","UpdateIndicator","setSecondsRemaining","isFetchingMorePancakeBunnies","useLoadingState","isUpdatingPancakeBunnies","useTooltip","placement","tooltip","tooltipVisible","targetRef","intervalId","setInterval","clearInterval","ref","StyledCard","hasManyPages","ForSaleTableCard","totalForSale","loadMore","isFetchingMoreNfts","priceSort","togglePriceSort","setPage","itemsPerPage","needsExtraPage","maxPage","floor","nftsOnCurrentPage","switchPage","pageNumber","loadMoreButton","ml","num","py","type","ForSaleTableRows","IndividualPancakeBunnyPage","setNothingForSaleBunny","useGetAllBunniesByBunnyId","setPriceSort","previousPriceSort","usePreviousValue","useFetchByBunnyIdAndUpdate","latestPancakeBunniesUpdateAt","fetchMorePancakeBunnies","fastRefresh","useRefresh","isWindowVisible","useIsWindowVisible","bunniesSortedByPrice","orderBy","allBunniesFromOtherSellers","bunny","cheapestBunny","cheapestBunnyFromOtherSellers","useGetCollectionDistributionPB","distributionData","isFetchingDistribution","isFetching","Date","now","PANCAKE_BUNNIES_UPDATE_FREQUENCY","fetchBasicBunnyData","sortedNfts","sort","nftA","nftB","nftPriceA","nftPriceB","sortNFTsByPriceBuilder","PageLoader","propertyRarity","total","sum","values","getBunnyIdRarity","Page","metadataUrl","currentValue","MainNFTCard","isOwnNft","nftIsProfilePic","currentAskPriceAsNumber","onPresentSellModal","EditProfileModal","onEditProfileModal","ownerButtons","CollectibleByLocation","ManageNFTsCard","hasThisNft","useNftOwner","owner","setOwner","isLoadingOwner","setIsLoadingOwner","collectionContract","useErc721CollectionContract","getOwner","ownerOf","tokenOwner","OwnerRow","OwnerCard","padding","IndividualNFTPage","setNft","setIsOwnNft","useGetCollectionDistribution","fetchNftData","getNftApi","metadata","getNftsMarketData","nftOwnedByConnectedUser","userNft","userProfilePicture","rarityMap","nftAttributeValue","attribute","IndividualNFTPageRouter","useParams","state","setState","prevState","getCollectionDistributionApi","apiResponse","fetchTokens","baseRandom","require","lastIndex","rand","baseSum","identity","arrayShuffle","baseShuffle","isArray","copyArray","shuffleSelf"],"mappings":"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","file":"static/js/13.47f48565.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport {\r\n  getAllPancakeBunniesLowestPrice,\r\n  getAllPancakeBunniesRecentUpdatedAt,\r\n  getNftsFromCollectionApi,\r\n} from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\r\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\r\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\r\n\r\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\r\n\r\n  useEffect(() => {\r\n    const fetchPancakeBunnies = async () => {\r\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\r\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\r\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\r\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\r\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      const bunnyIds = Object.keys(data)\r\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\r\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\r\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\r\n        return {\r\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\r\n          tokenId: data[bunnyId].name,\r\n          name: data[bunnyId].name,\r\n          description: data[bunnyId].description,\r\n          collectionAddress: pancakeBunniesAddress,\r\n          collectionName: data[bunnyId].collection.name,\r\n          image: data[bunnyId].image,\r\n          attributes: [\r\n            {\r\n              traitType: 'bunnyId',\r\n              value: bunnyId,\r\n              displayType: null,\r\n            },\r\n          ],\r\n          meta: {\r\n            currentAskPrice: lowestPrices[bunnyId],\r\n            updatedAt: latestUpdates[bunnyId],\r\n          },\r\n        }\r\n      })\r\n      setAllPancakeBunnyNfts(allBunnies)\r\n    }\r\n    if (isPBCollection && !allPancakeBunnyNfts) {\r\n      fetchPancakeBunnies()\r\n    }\r\n  }, [isPBCollection, allPancakeBunnyNfts])\r\n\r\n  return allPancakeBunnyNfts\r\n}\r\n\r\nexport default useAllPancakeBunnyNfts\r\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","import { TokenMarketData, Image } from 'state/nftMarket/types'\r\n\r\nexport enum PaymentCurrency {\r\n  BNB,\r\n  WBNB,\r\n}\r\n\r\nexport enum BuyingStage {\r\n  REVIEW,\r\n  APPROVE_AND_CONFIRM,\r\n  CONFIRM,\r\n  TX_CONFIRMED,\r\n}\r\n\r\nexport interface BuyNFT {\r\n  collection: {\r\n    address: string\r\n    name: string\r\n  }\r\n  token: TokenMarketData\r\n  name: string\r\n  image: Image\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Grid, Flex, Text, BinanceIcon, Skeleton } from '@pancakeswap/uikit'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { BuyingStage } from './types'\r\n\r\nexport const StyledModal = styled(Modal)<{ stage: BuyingStage }>`\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n  & h2:first-of-type {\r\n    ${({ stage, theme }) =>\r\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\r\n        ? `color: ${theme.colors.textSubtle}`\r\n        : null};\r\n  }\r\n  & svg:first-of-type {\r\n    ${({ stage, theme }) =>\r\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\r\n        ? `fill: ${theme.colors.textSubtle}`\r\n        : null};\r\n  }\r\n`\r\n\r\nexport const BorderedBox = styled(Grid)`\r\n  margin: 16px 0;\r\n  padding: 16px;\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-row-gap: 8px;\r\n`\r\n\r\ninterface BnbAmountCellProps {\r\n  bnbAmount: number\r\n  isLoading?: boolean\r\n  isInsufficient?: boolean\r\n}\r\n\r\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount, isLoading, isInsufficient }) => {\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  if (isLoading) {\r\n    return (\r\n      <Flex flexDirection=\"column\" justifySelf=\"flex-end\">\r\n        <Skeleton width=\"86px\" height=\"20px\" mb=\"6px\" />\r\n        <Skeleton width=\"86px\" height=\"20px\" />\r\n      </Flex>\r\n    )\r\n  }\r\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\r\n  return (\r\n    <Flex justifySelf=\"flex-end\" flexDirection=\"column\">\r\n      <Flex justifyContent=\"flex-end\">\r\n        <BinanceIcon height={16} width={16} mr=\"4px\" />\r\n        <Text bold color={isInsufficient ? 'failure' : 'text'}>{`${bnbAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 3,\r\n          maximumFractionDigits: 3,\r\n        })}`}</Text>\r\n      </Flex>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        {`($${usdAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { Flex, Text, Button, ButtonMenu, ButtonMenuItem, Message, Link } from '@pancakeswap/uikit'\r\nimport { FetchStatus } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { Divider, RoundedImage } from '../shared/styles'\r\nimport { BorderedBox, BnbAmountCell } from './styles'\r\nimport { PaymentCurrency } from './types'\r\n\r\ninterface ReviewStageProps {\r\n  nftToBuy: NftToken\r\n  paymentCurrency: PaymentCurrency\r\n  setPaymentCurrency: (index: number) => void\r\n  nftPrice: number\r\n  walletBalance: number\r\n  walletFetchStatus: FetchStatus\r\n  notEnoughBnbForPurchase: boolean\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst ReviewStage: React.FC<ReviewStageProps> = ({\r\n  nftToBuy,\r\n  paymentCurrency,\r\n  setPaymentCurrency,\r\n  nftPrice,\r\n  walletBalance,\r\n  walletFetchStatus,\r\n  notEnoughBnbForPurchase,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  return (\r\n    <>\r\n      <Flex px=\"24px\" pt=\"24px\" flexDirection=\"column\">\r\n        <Flex>\r\n          <RoundedImage src={nftToBuy.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Flex flexDirection=\"column\" justifyContent=\"space-evenly\">\r\n            <Text color=\"textSubtle\" fontSize=\"12px\">\r\n              {nftToBuy.collectionName}\r\n            </Text>\r\n            <Text bold>{nftToBuy.name}</Text>\r\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n              <Text fontSize=\"12px\" color=\"textSubtle\" p=\"0px\" height=\"16px\" mr=\"4px\">\r\n                {t('Token ID:')}\r\n              </Text>\r\n              <Button\r\n                as={Link}\r\n                scale=\"xs\"\r\n                px=\"0px\"\r\n                pt=\"2px\"\r\n                external\r\n                variant=\"text\"\r\n                href={getBscScanLinkForNft(nftToBuy.collectionAddress, nftToBuy.tokenId)}\r\n              >\r\n                {nftToBuy.tokenId}\r\n              </Button>\r\n            </Flex>\r\n          </Flex>\r\n        </Flex>\r\n        <BorderedBox>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Pay with')}\r\n          </Text>\r\n          <ButtonMenu\r\n            activeIndex={paymentCurrency}\r\n            onItemClick={(index) => setPaymentCurrency(index)}\r\n            scale=\"sm\"\r\n            variant=\"subtle\"\r\n          >\r\n            <ButtonMenuItem>BNB</ButtonMenuItem>\r\n            <ButtonMenuItem>WBNB</ButtonMenuItem>\r\n          </ButtonMenu>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Total payment')}\r\n          </Text>\r\n          <BnbAmountCell bnbAmount={nftPrice} />\r\n          <Text small color=\"textSubtle\">\r\n            {t('%symbol% in wallet', { symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB' })}\r\n          </Text>\r\n          {!account ? (\r\n            <Flex justifySelf=\"flex-end\">\r\n              <ConnectWalletButton scale=\"sm\" />\r\n            </Flex>\r\n          ) : (\r\n            <BnbAmountCell\r\n              bnbAmount={walletBalance}\r\n              isLoading={walletFetchStatus !== FetchStatus.SUCCESS}\r\n              isInsufficient={walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase}\r\n            />\r\n          )}\r\n        </BorderedBox>\r\n        {walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase && (\r\n          <Message p=\"8px\" variant=\"danger\">\r\n            <Text>\r\n              {t('Not enough %symbol% to purchase this NFT', {\r\n                symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB',\r\n              })}\r\n            </Text>\r\n          </Message>\r\n        )}\r\n        <Flex alignItems=\"center\">\r\n          <Text my=\"16px\" mr=\"4px\">\r\n            {t('Convert between BNB and WBNB for free')}:\r\n          </Text>\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href=\"/swap?inputCurrency=BNB&outputCurrency=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\"\r\n          >\r\n            {t('Convert')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\">\r\n        <Button\r\n          onClick={continueToNextStage}\r\n          disabled={walletFetchStatus !== FetchStatus.SUCCESS || notEnoughBnbForPurchase}\r\n          mb=\"8px\"\r\n        >\r\n          {t('Checkout')}\r\n        </Button>\r\n        <Button as={Link} external style={{ width: '100%' }} href=\"/swap?outputCurrency=BNB\" variant=\"secondary\">\r\n          {t('Get %symbol1% or %symbol2%', { symbol1: 'BNB', symbol2: 'WBNB' })}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ReviewStage\r\n","import React, { useEffect, useState } from 'react'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { ethersToBigNumber } from 'utils/bigNumber'\r\nimport tokens from 'config/constants/tokens'\r\nimport { parseUnits, formatEther } from 'ethers/lib/utils'\r\nimport { useERC20, useNftMarketContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useAppDispatch } from 'state'\r\nimport { addUserNft } from 'state/nftMarket/reducer'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport { StyledModal } from './styles'\r\nimport ReviewStage from './ReviewStage'\r\nimport ConfirmStage from '../shared/ConfirmStage'\r\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\r\nimport { PaymentCurrency, BuyingStage } from './types'\r\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\r\n\r\nconst modalTitles = {\r\n  [BuyingStage.REVIEW]: 'Review',\r\n  [BuyingStage.APPROVE_AND_CONFIRM]: 'Back',\r\n  [BuyingStage.CONFIRM]: 'Back',\r\n  [BuyingStage.TX_CONFIRMED]: 'Transaction Confirmed',\r\n}\r\n\r\ninterface BuyModalProps extends InjectedModalProps {\r\n  nftToBuy: NftToken\r\n}\r\n\r\nconst BuyModal: React.FC<BuyModalProps> = ({ nftToBuy, onDismiss }) => {\r\n  const [stage, setStage] = useState(BuyingStage.REVIEW)\r\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\r\n  const [paymentCurrency, setPaymentCurrency] = useState<PaymentCurrency>(PaymentCurrency.BNB)\r\n  const [isPaymentCurrentInitialized, setIsPaymentCurrentInitialized] = useState(false)\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const { account } = useWeb3React()\r\n  const wbnbContract = useERC20(tokens.wbnb.address)\r\n  const nftMarketContract = useNftMarketContract()\r\n\r\n  const { toastSuccess } = useToast()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const nftPriceWei = parseUnits(nftToBuy.marketData.currentAskPrice, 'ether')\r\n  const nftPrice = parseFloat(nftToBuy.marketData.currentAskPrice)\r\n\r\n  // BNB - returns ethers.BigNumber\r\n  const { balance: bnbBalance, fetchStatus: bnbFetchStatus } = useGetBnbBalance()\r\n  const formattedBnbBalance = parseFloat(formatEther(bnbBalance))\r\n  // WBNB - returns BigNumber\r\n  const { balance: wbnbBalance, fetchStatus: wbnbFetchStatus } = useTokenBalance(tokens.wbnb.address)\r\n  const formattedWbnbBalance = getBalanceNumber(wbnbBalance)\r\n\r\n  const walletBalance = paymentCurrency === PaymentCurrency.BNB ? formattedBnbBalance : formattedWbnbBalance\r\n  const walletFetchStatus = paymentCurrency === PaymentCurrency.BNB ? bnbFetchStatus : wbnbFetchStatus\r\n\r\n  const notEnoughBnbForPurchase =\r\n    paymentCurrency === PaymentCurrency.BNB\r\n      ? bnbBalance.lt(nftPriceWei)\r\n      : wbnbBalance.lt(ethersToBigNumber(nftPriceWei))\r\n\r\n  useEffect(() => {\r\n    if (bnbBalance.lt(nftPriceWei) && wbnbBalance.gte(ethersToBigNumber(nftPriceWei)) && !isPaymentCurrentInitialized) {\r\n      setPaymentCurrency(PaymentCurrency.WBNB)\r\n      setIsPaymentCurrentInitialized(true)\r\n    }\r\n  }, [bnbBalance, wbnbBalance, nftPriceWei, isPaymentCurrentInitialized])\r\n\r\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\r\n    onRequiresApproval: async () => {\r\n      try {\r\n        const currentAllowance = await wbnbContract.allowance(account, nftMarketContract.address)\r\n        return currentAllowance.gt(0)\r\n      } catch (error) {\r\n        return false\r\n      }\r\n    },\r\n    onApprove: () => {\r\n      return callWithGasPrice(wbnbContract, 'approve', [nftMarketContract.address, ethers.constants.MaxUint256])\r\n    },\r\n    onApproveSuccess: async ({ receipt }) => {\r\n      toastSuccess(\r\n        t('Contract approved - you can now buy NFT with WBNB!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n    onConfirm: () => {\r\n      const payAmount = Number.isNaN(nftPrice)\r\n        ? ethers.BigNumber.from(0)\r\n        : parseUnits(nftToBuy.marketData.currentAskPrice)\r\n      if (paymentCurrency === PaymentCurrency.BNB) {\r\n        return callWithGasPrice(nftMarketContract, 'buyTokenUsingBNB', [nftToBuy.collectionAddress, nftToBuy.tokenId], {\r\n          value: payAmount,\r\n        })\r\n      }\r\n      return callWithGasPrice(nftMarketContract, 'buyTokenUsingWBNB', [\r\n        nftToBuy.collectionAddress,\r\n        nftToBuy.tokenId,\r\n        payAmount,\r\n      ])\r\n    },\r\n    onSuccess: async ({ receipt }) => {\r\n      setConfirmedTxHash(receipt.transactionHash)\r\n      setStage(BuyingStage.TX_CONFIRMED)\r\n      dispatch(\r\n        addUserNft({\r\n          tokenId: nftToBuy.tokenId,\r\n          collectionAddress: nftToBuy.collectionAddress,\r\n          nftLocation: NftLocation.WALLET,\r\n        }),\r\n      )\r\n      toastSuccess(\r\n        t('Your NFT has been sent to your wallet'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n  })\r\n\r\n  const continueToNextStage = () => {\r\n    if (paymentCurrency === PaymentCurrency.WBNB && !isApproved) {\r\n      setStage(BuyingStage.APPROVE_AND_CONFIRM)\r\n    } else {\r\n      setStage(BuyingStage.CONFIRM)\r\n    }\r\n  }\r\n\r\n  const goBack = () => {\r\n    setStage(BuyingStage.REVIEW)\r\n  }\r\n\r\n  const showBackButton = stage === BuyingStage.CONFIRM || stage === BuyingStage.APPROVE_AND_CONFIRM\r\n\r\n  return (\r\n    <StyledModal\r\n      title={t(modalTitles[stage])}\r\n      stage={stage}\r\n      onDismiss={onDismiss}\r\n      onBack={showBackButton ? goBack : null}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stage === BuyingStage.REVIEW && (\r\n        <ReviewStage\r\n          nftToBuy={nftToBuy}\r\n          paymentCurrency={paymentCurrency}\r\n          setPaymentCurrency={setPaymentCurrency}\r\n          nftPrice={nftPrice}\r\n          walletBalance={walletBalance}\r\n          walletFetchStatus={walletFetchStatus}\r\n          notEnoughBnbForPurchase={notEnoughBnbForPurchase}\r\n          continueToNextStage={continueToNextStage}\r\n        />\r\n      )}\r\n      {stage === BuyingStage.APPROVE_AND_CONFIRM && (\r\n        <ApproveAndConfirmStage\r\n          variant=\"buy\"\r\n          handleApprove={handleApprove}\r\n          isApproved={isApproved}\r\n          isApproving={isApproving}\r\n          isConfirming={isConfirming}\r\n          handleConfirm={handleConfirm}\r\n        />\r\n      )}\r\n      {stage === BuyingStage.CONFIRM && <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />}\r\n      {stage === BuyingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default BuyModal\r\n","import React from 'react'\r\nimport { Flex, Box, Card, CardBody, Text, Button, BinanceIcon, Skeleton, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport NFTMedia from 'views/Nft/market/components/NFTMedia'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport { nftsBaseUrl } from '../../../constants'\r\nimport { Container, CollectionLink } from '../shared/styles'\r\n\r\ninterface MainPancakeBunnyCardProps {\r\n  cheapestNft: NftToken\r\n  cheapestNftFromOtherSellers?: NftToken\r\n  nothingForSaleBunny?: NftToken\r\n}\r\n\r\nconst MainPancakeBunnyCard: React.FC<MainPancakeBunnyCardProps> = ({\r\n  cheapestNft,\r\n  cheapestNftFromOtherSellers,\r\n  nothingForSaleBunny,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n\r\n  const nftToDisplay = cheapestNftFromOtherSellers || cheapestNft || nothingForSaleBunny\r\n\r\n  const onlyOwnNftsOnSale = !cheapestNftFromOtherSellers\r\n  const hasListings = cheapestNftFromOtherSellers || cheapestNft\r\n\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nftToDisplay.marketData?.currentAskPrice))\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nftToDisplay} />)\r\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={cheapestNft} />)\r\n\r\n  const actionButton = onlyOwnNftsOnSale ? (\r\n    <Button\r\n      variant=\"danger\"\r\n      minWidth=\"168px\"\r\n      width={['100%', null, 'max-content']}\r\n      mt=\"24px\"\r\n      onClick={onPresentAdjustPriceModal}\r\n    >\r\n      {t('Adjust Sale Price')}\r\n    </Button>\r\n  ) : (\r\n    <Button\r\n      disabled={onlyOwnNftsOnSale}\r\n      minWidth=\"168px\"\r\n      width={['100%', null, 'max-content']}\r\n      mt=\"24px\"\r\n      onClick={onPresentBuyModal}\r\n    >\r\n      {t('Buy')}\r\n    </Button>\r\n  )\r\n  return (\r\n    <Card mb=\"40px\">\r\n      <CardBody>\r\n        <Container flexDirection={['column-reverse', null, 'row']}>\r\n          <Flex flex=\"2\">\r\n            <Box>\r\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nftToDisplay.collectionAddress}`}>\r\n                {nftToDisplay.collectionName}\r\n              </CollectionLink>\r\n              <Text fontSize=\"40px\" bold mt=\"12px\">\r\n                {nftToDisplay.name}\r\n              </Text>\r\n              <Text mt={['16px', '16px', '48px']}>{t(nftToDisplay.description)}</Text>\r\n              {(cheapestNft || cheapestNftFromOtherSellers) && (\r\n                <>\r\n                  <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\r\n                    {t('Lowest price')}\r\n                  </Text>\r\n                  <Flex alignItems=\"center\" mt=\"8px\">\r\n                    <BinanceIcon width={18} height={18} mr=\"4px\" />\r\n                    <Text fontSize=\"24px\" bold mr=\"4px\">\r\n                      {nftToDisplay.marketData.currentAskPrice}\r\n                    </Text>\r\n                    {bnbBusdPrice ? (\r\n                      <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\r\n                        minimumFractionDigits: 2,\r\n                        maximumFractionDigits: 2,\r\n                      })} USD)`}</Text>\r\n                    ) : (\r\n                      <Skeleton width=\"64px\" />\r\n                    )}\r\n                  </Flex>\r\n                </>\r\n              )}\r\n              {hasListings && actionButton}\r\n            </Box>\r\n          </Flex>\r\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\" maxWidth={440}>\r\n            <NFTMedia nft={nftToDisplay} width={440} height={440} />\r\n          </Flex>\r\n        </Container>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default MainPancakeBunnyCard\r\n","import React, { useState } from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { Grid, Text, Card, Box, ChevronUpIcon, ChevronDownIcon, IconButton } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 720px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 710px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst ExpandableCardBody = styled(Box)<{ expanded: boolean }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n`\r\n\r\nconst FullWidthCard = styled(Card)`\r\n  width: 100%;\r\n`\r\n\r\ninterface ExpandableCardProps {\r\n  icon: React.ReactNode\r\n  title: string\r\n  content: React.ReactNode\r\n}\r\n\r\nconst ExpandableCard: React.FC<ExpandableCardProps> = ({ icon, title, content }) => {\r\n  const [expanded, setExpanded] = useState(true)\r\n  const { theme } = useTheme()\r\n  return (\r\n    <FullWidthCard>\r\n      <Grid\r\n        gridTemplateColumns=\"1fr 8fr 1fr\"\r\n        alignItems=\"center\"\r\n        height=\"72px\"\r\n        px=\"24px\"\r\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\r\n      >\r\n        {icon}\r\n        <Text bold>{title}</Text>\r\n        <IconButton\r\n          onClick={() => {\r\n            setExpanded((prev) => !prev)\r\n          }}\r\n          variant=\"text\"\r\n          maxWidth=\"32px\"\r\n        >\r\n          {expanded ? (\r\n            <ChevronUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\r\n          ) : (\r\n            <ChevronDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\r\n          )}\r\n        </IconButton>\r\n      </Grid>\r\n      <ExpandableCardBody expanded={expanded}>{content}</ExpandableCardBody>\r\n    </FullWidthCard>\r\n  )\r\n}\r\n\r\nexport default ExpandableCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Grid,\r\n  Text,\r\n  CogIcon,\r\n  SellIcon,\r\n  WalletFilledIcon,\r\n  CameraIcon,\r\n  BinanceIcon,\r\n  Skeleton,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableCard from '../shared/ExpandableCard'\r\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport ProfileNftModal from '../../../components/ProfileNftModal'\r\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\r\n\r\nconst ScrollableContainer = styled(Box)`\r\n  overflow-y: auto;\r\n  max-height: 224px;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  margin: 16px 20px;\r\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\r\n`\r\n\r\nconst LocationColors = {\r\n  [NftLocation.FORSALE]: 'failure',\r\n  [NftLocation.WALLET]: 'secondary',\r\n  [NftLocation.PROFILE]: 'textSubtle',\r\n}\r\n\r\nconst LocationIcons = {\r\n  [NftLocation.FORSALE]: SellIcon,\r\n  [NftLocation.WALLET]: WalletFilledIcon,\r\n  [NftLocation.PROFILE]: CameraIcon,\r\n}\r\n\r\ninterface CollectibleRowProps {\r\n  nft: NftToken\r\n  lowestPrice: string\r\n}\r\n\r\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft, lowestPrice }) => {\r\n  const { t } = useTranslation()\r\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\r\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\r\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\r\n  return (\r\n    <CollectibleRowContainer\r\n      gridTemplateColumns=\"96px 1fr\"\r\n      px=\"16px\"\r\n      pb=\"8px\"\r\n      my=\"16px\"\r\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\r\n    >\r\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\r\n      <Grid gridTemplateColumns=\"1fr 1fr\">\r\n        <Text bold>{nft.name}</Text>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n          {nft.collectionName}\r\n        </Text>\r\n        {lowestPrice && (\r\n          <>\r\n            <Text small color=\"textSubtle\">\r\n              {t('Lowest price')}\r\n            </Text>\r\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\r\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\r\n              <Text small>{lowestPrice}</Text>\r\n            </Flex>\r\n          </>\r\n        )}\r\n        {nft.location === NftLocation.FORSALE ? (\r\n          <>\r\n            <Text small color=\"textSubtle\">\r\n              {t('Your price')}\r\n            </Text>\r\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\r\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\r\n              <Text small>{nft.marketData.currentAskPrice}</Text>\r\n            </Flex>\r\n          </>\r\n        ) : (\r\n          <Text small color=\"textDisabled\">\r\n            {t('Not on sale')}\r\n          </Text>\r\n        )}\r\n      </Grid>\r\n    </CollectibleRowContainer>\r\n  )\r\n}\r\n\r\ninterface CollectiblesByLocationProps {\r\n  location: NftLocation\r\n  nfts: NftToken[]\r\n  lowestPrice: string\r\n}\r\n\r\nconst CollectiblesByLocation: React.FC<CollectiblesByLocationProps> = ({ location, nfts, lowestPrice }) => {\r\n  const { t } = useTranslation()\r\n  const IconComponent = LocationIcons[location]\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\r\n        <IconComponent color={LocationColors[location]} width=\"24px\" height=\"24px\" />\r\n        <Text display=\"inline\" bold color={LocationColors[location]}>\r\n          {t(location)}\r\n        </Text>\r\n      </Grid>\r\n      <ScrollableContainer>\r\n        {nfts.map((nft) => (\r\n          <CollectibleRow key={nft.tokenId} nft={nft} lowestPrice={lowestPrice} />\r\n        ))}\r\n      </ScrollableContainer>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface ManagePancakeBunniesCardProps {\r\n  bunnyId: string\r\n  lowestPrice?: string\r\n}\r\n\r\nconst ManagePancakeBunniesCard: React.FC<ManagePancakeBunniesCardProps> = ({ bunnyId, lowestPrice }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\r\n  useFetchUserNfts()\r\n\r\n  const bunniesInWallet = userNfts.filter(\r\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.WALLET,\r\n  )\r\n  const bunniesForSale = userNfts.filter(\r\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.FORSALE,\r\n  )\r\n  const profilePicBunny = userNfts.filter(\r\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.PROFILE,\r\n  )\r\n\r\n  const loading = userNftsInitializationState !== UserNftInitializationState.INITIALIZED\r\n  const useHasNoBunnies =\r\n    !loading && bunniesInWallet.length === 0 && bunniesForSale.length === 0 && profilePicBunny.length === 0\r\n\r\n  const content = (\r\n    <Box pt=\"16px\">\r\n      {!account && (\r\n        <Flex mb=\"16px\" justifyContent=\"center\">\r\n          <ConnectWalletButton />\r\n        </Flex>\r\n      )}\r\n      {useHasNoBunnies && (\r\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\r\n          {t('You don’t have any of this item.')}\r\n        </Text>\r\n      )}\r\n      {account && loading && (\r\n        <Box px=\"16px\" pb=\"8px\">\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n        </Box>\r\n      )}\r\n      {bunniesForSale.length > 0 && (\r\n        <CollectiblesByLocation location={NftLocation.FORSALE} nfts={bunniesForSale} lowestPrice={lowestPrice} />\r\n      )}\r\n      {bunniesInWallet.length > 0 && (\r\n        <>\r\n          {bunniesForSale.length > 0 && <Divider />}\r\n          <CollectiblesByLocation location={NftLocation.WALLET} nfts={bunniesInWallet} lowestPrice={lowestPrice} />\r\n        </>\r\n      )}\r\n      {profilePicBunny.length > 0 && (\r\n        <>\r\n          {(bunniesForSale.length > 0 || bunniesInWallet.length > 0) && <Divider />}\r\n          <CollectiblesByLocation location={NftLocation.PROFILE} nfts={profilePicBunny} lowestPrice={lowestPrice} />\r\n        </>\r\n      )}\r\n    </Box>\r\n  )\r\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\r\n}\r\n\r\nexport default ManagePancakeBunniesCard\r\n","import React from 'react'\r\nimport { Box, Flex, Text, NftIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftAttribute } from 'state/nftMarket/types'\r\nimport ExpandableCard from './ExpandableCard'\r\n\r\ninterface PropertiesCardProps {\r\n  properties: NftAttribute[]\r\n  rarity: { [key: string]: number }\r\n}\r\n\r\n// Map of known traits to human-readable text\r\nconst KNOWN_TRAITS_TEXT = {\r\n  bunnyId: 'Bunny ID',\r\n}\r\n\r\nconst SingleProperty: React.FC<{ title: string; value: string | number; rarity: number }> = ({\r\n  title,\r\n  value,\r\n  rarity,\r\n}) => {\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n        {KNOWN_TRAITS_TEXT[title] ?? title}\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text bold textTransform=\"uppercase\" mr=\"4px\">\r\n          {value}\r\n        </Text>\r\n        {rarity && (\r\n          <Text small color=\"textSubtle\">\r\n            ({rarity.toFixed(2)}%)\r\n          </Text>\r\n        )}\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nconst PropertiesCard: React.FC<PropertiesCardProps> = ({ properties, rarity }) => {\r\n  const { t } = useTranslation()\r\n  const content = (\r\n    <Box p=\"24px\">\r\n      {properties.map((property) => (\r\n        <SingleProperty\r\n          key={property.traitType}\r\n          title={property.traitType}\r\n          value={property.value}\r\n          rarity={rarity[property.traitType]}\r\n        />\r\n      ))}\r\n    </Box>\r\n  )\r\n  return <ExpandableCard title={t('Properties')} icon={<NftIcon width=\"24px\" height=\"24px\" />} content={content} />\r\n}\r\n\r\nexport default PropertiesCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, Text, SearchIcon, Link } from '@pancakeswap/uikit'\r\nimport { getBscScanLink } from 'utils'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport uriToHttp from 'utils/uriToHttp'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport ExpandableCard from './ExpandableCard'\r\n\r\ninterface DetailsCardProps {\r\n  contractAddress: string\r\n  ipfsJson: string\r\n  count?: number\r\n  rarity?: number\r\n}\r\n\r\nconst LongTextContainer = styled(Text)`\r\n  max-width: 120px;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\nconst DetailsCard: React.FC<DetailsCardProps> = ({ contractAddress, ipfsJson, count, rarity }) => {\r\n  const { t } = useTranslation()\r\n  const { chainId } = useActiveWeb3React()\r\n  const ipfsLink = ipfsJson ? uriToHttp(ipfsJson)[0] : null\r\n  const content = (\r\n    <Box p=\"24px\">\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n          {t('Contract address')}\r\n        </Text>\r\n        <Link external href={getBscScanLink(contractAddress, 'address', chainId)}>\r\n          <LongTextContainer bold>{contractAddress}</LongTextContainer>\r\n        </Link>\r\n      </Flex>\r\n      {ipfsLink && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n            IPFS JSON\r\n          </Text>\r\n          <Link external href={ipfsLink}>\r\n            <LongTextContainer bold>{ipfsLink}</LongTextContainer>\r\n          </Link>\r\n        </Flex>\r\n      )}\r\n      {count && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\" mr=\"4px\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n            {t('Supply Count')}\r\n          </Text>\r\n          <LongTextContainer bold>{formatNumber(count, 0, 0)}</LongTextContainer>\r\n        </Flex>\r\n      )}\r\n      {rarity && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mr=\"4px\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\r\n            {t('Rarity')}\r\n          </Text>\r\n          <LongTextContainer bold>{`${formatNumber(rarity, 0, 2)}%`}</LongTextContainer>\r\n        </Flex>\r\n      )}\r\n    </Box>\r\n  )\r\n  return <ExpandableCard title={t('Details')} icon={<SearchIcon width=\"24px\" height=\"24px\" />} content={content} />\r\n}\r\n\r\nexport default DetailsCard\r\n","import React, { useState, useEffect, useMemo } from 'react'\r\nimport shuffle from 'lodash/shuffle'\r\nimport styled from 'styled-components'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport SwiperCore from 'swiper'\r\nimport { ArrowBackIcon, ArrowForwardIcon, Box, IconButton, Text, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { isAddress } from 'utils'\r\nimport { useNftsFromCollection } from 'state/nftMarket/hooks'\r\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\r\nimport { useAppDispatch } from 'state'\r\nimport { pancakeBunniesAddress } from '../../../constants'\r\nimport { CollectibleLinkCard } from '../../../components/CollectibleCard'\r\nimport useAllPancakeBunnyNfts from '../../../hooks/useAllPancakeBunnyNfts'\r\n\r\nimport 'swiper/swiper-bundle.css'\r\n\r\nconst INITIAL_SLIDE = 4\r\n\r\nconst SwiperCircle = styled.div<{ isActive }>`\r\n  background-color: ${({ theme, isActive }) => (isActive ? theme.colors.secondary : theme.colors.textDisabled)};\r\n  width: 12px;\r\n  height: 12px;\r\n  margin-right: 8px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n`\r\n\r\nconst StyledSwiper = styled.div`\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    .swiper-wrapper {\r\n      max-height: 390px;\r\n    }\r\n  }\r\n`\r\n\r\ninterface MoreFromThisCollectionProps {\r\n  collectionAddress: string\r\n  currentTokenName?: string\r\n  title?: string\r\n}\r\n\r\nconst MoreFromThisCollection: React.FC<MoreFromThisCollectionProps> = ({\r\n  collectionAddress,\r\n  currentTokenName = '',\r\n  title = 'More from this collection',\r\n}) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const [swiperRef, setSwiperRef] = useState<SwiperCore>(null)\r\n  const [activeIndex, setActiveIndex] = useState(1)\r\n  const { isMobile, isMd, isLg } = useMatchBreakpoints()\r\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(collectionAddress)\r\n  const collectionNfts = useNftsFromCollection(collectionAddress)\r\n\r\n  const isPBCollection = isAddress(collectionAddress) === pancakeBunniesAddress\r\n\r\n  useEffect(() => {\r\n    if (!isPBCollection && !collectionNfts) {\r\n      dispatch(\r\n        fetchNftsFromCollections({\r\n          collectionAddress: isAddress(collectionAddress) || collectionAddress,\r\n          page: 1,\r\n          size: 100,\r\n        }),\r\n      )\r\n    }\r\n  }, [collectionNfts, collectionAddress, dispatch, isPBCollection])\r\n\r\n  let nftsToShow = useMemo(() => {\r\n    return shuffle(\r\n      allPancakeBunnyNfts\r\n        ? allPancakeBunnyNfts.filter((nft) => nft.name !== currentTokenName)\r\n        : collectionNfts?.filter((nft) => nft.name !== currentTokenName && nft.marketData?.isTradable),\r\n    )\r\n  }, [allPancakeBunnyNfts, collectionNfts, currentTokenName])\r\n\r\n  if (!nftsToShow || nftsToShow.length === 0) {\r\n    return null\r\n  }\r\n\r\n  let slidesPerView = 4\r\n  let maxPageIndex = 3\r\n\r\n  if (isMd) {\r\n    slidesPerView = 2\r\n    maxPageIndex = 6\r\n  }\r\n\r\n  if (isLg) {\r\n    slidesPerView = 3\r\n    maxPageIndex = 4\r\n  }\r\n\r\n  if (isPBCollection) {\r\n    // PancakeBunnies should display 1 card per bunny id\r\n    nftsToShow = nftsToShow.reduce((nftArray, current) => {\r\n      const bunnyId = current.attributes[0].value\r\n      if (!nftArray.find((nft) => nft.attributes[0].value === bunnyId)) {\r\n        nftArray.push(current)\r\n      }\r\n      return nftArray\r\n    }, [])\r\n  }\r\n  nftsToShow = nftsToShow.slice(0, 12)\r\n\r\n  const nextSlide = () => {\r\n    if (activeIndex < maxPageIndex - 1) {\r\n      setActiveIndex((index) => index + 1)\r\n      swiperRef.slideNext()\r\n    }\r\n  }\r\n\r\n  const previousSlide = () => {\r\n    if (activeIndex > 0) {\r\n      setActiveIndex((index) => index - 1)\r\n      swiperRef.slidePrev()\r\n    }\r\n  }\r\n\r\n  const goToSlide = (index: number) => {\r\n    setActiveIndex(index / slidesPerView)\r\n    swiperRef.slideTo(index)\r\n  }\r\n\r\n  const updateActiveIndex = ({ activeIndex: newActiveIndex }) => {\r\n    if (newActiveIndex !== undefined) setActiveIndex(Math.ceil(newActiveIndex / slidesPerView))\r\n  }\r\n\r\n  return (\r\n    <Box pt=\"56px\" mb=\"52px\">\r\n      {title && (\r\n        <Text bold mb=\"24px\">\r\n          {t(title)}\r\n        </Text>\r\n      )}\r\n      {isMobile ? (\r\n        <StyledSwiper>\r\n          <Swiper spaceBetween={16} slidesPerView={1.5}>\r\n            {nftsToShow.map((nft) => (\r\n              <SwiperSlide key={nft.tokenId}>\r\n                <CollectibleLinkCard nft={nft} />\r\n              </SwiperSlide>\r\n            ))}\r\n          </Swiper>\r\n        </StyledSwiper>\r\n      ) : (\r\n        <StyledSwiper>\r\n          <Swiper\r\n            onSwiper={setSwiperRef}\r\n            onActiveIndexChange={updateActiveIndex}\r\n            spaceBetween={16}\r\n            slidesPerView={slidesPerView}\r\n            slidesPerGroup={slidesPerView}\r\n            initialSlide={INITIAL_SLIDE}\r\n          >\r\n            {nftsToShow.map((nft) => (\r\n              <SwiperSlide key={nft.tokenId}>\r\n                <CollectibleLinkCard\r\n                  nft={nft}\r\n                  currentAskPrice={isPBCollection ? null : parseFloat(nft.marketData?.currentAskPrice)}\r\n                />\r\n              </SwiperSlide>\r\n            ))}\r\n          </Swiper>\r\n          <Flex mt=\"16px\" alignItems=\"center\" justifyContent=\"center\">\r\n            <IconButton variant=\"text\" onClick={previousSlide}>\r\n              <ArrowBackIcon />\r\n            </IconButton>\r\n            {[...Array(maxPageIndex).keys()].map((index) => (\r\n              <SwiperCircle\r\n                key={index}\r\n                onClick={() => goToSlide(index * slidesPerView)}\r\n                isActive={activeIndex === index}\r\n              />\r\n            ))}\r\n            <IconButton variant=\"text\" onClick={nextSlide}>\r\n              <ArrowForwardIcon />\r\n            </IconButton>\r\n          </Flex>\r\n        </StyledSwiper>\r\n      )}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MoreFromThisCollection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport { Button, Grid, Text, Flex, Box, BinanceIcon, useModal, Skeleton } from '@pancakeswap/uikit'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport BuyModal from 'views/Nft/market/components/BuySellModals/BuyModal'\r\nimport SellModal from 'views/Nft/market/components/BuySellModals/SellModal'\r\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\r\nimport { ButtonContainer } from '../../shared/styles'\r\n\r\nconst OwnersTableRow = styled(Grid)`\r\n  grid-template-columns: 2fr 2fr 1fr;\r\n  grid-row-gap: 16px;\r\n  margin-top: 16px;\r\n  & > div {\r\n    padding-bottom: 16px;\r\n    border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\r\n  }\r\n`\r\n\r\ninterface RowProps {\r\n  t: ContextApi['t']\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  account: string\r\n}\r\n\r\nconst Row: React.FC<RowProps> = ({ t, nft, bnbBusdPrice, account }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData.currentAskPrice))\r\n\r\n  const ownNft = account ? nft.marketData.currentSeller === account.toLowerCase() : false\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\r\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={nft} />)\r\n\r\n  return (\r\n    <>\r\n      <Box pl=\"24px\">\r\n        <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\r\n          <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\r\n          <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\r\n        </Flex>\r\n        {bnbBusdPrice ? (\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\r\n          </Text>\r\n        ) : (\r\n          <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\r\n        )}\r\n      </Box>\r\n      <Box>\r\n        <Flex width=\"max-content\" alignItems=\"center\">\r\n          <ProfileCell accountAddress={nft.marketData.currentSeller} />\r\n        </Flex>\r\n      </Box>\r\n      <ButtonContainer>\r\n        {ownNft ? (\r\n          <Button scale=\"sm\" variant=\"danger\" maxWidth=\"128px\" onClick={onPresentAdjustPriceModal}>\r\n            {t('Edit')}\r\n          </Button>\r\n        ) : (\r\n          <Button scale=\"sm\" variant=\"secondary\" maxWidth=\"128px\" onClick={onPresentBuyModal}>\r\n            {t('Buy')}\r\n          </Button>\r\n        )}\r\n      </ButtonContainer>\r\n    </>\r\n  )\r\n}\r\n\r\ninterface ForSaleTableRowsProps {\r\n  nftsForSale: NftToken[]\r\n}\r\n\r\nconst ForSaleTableRow: React.FC<ForSaleTableRowsProps> = ({ nftsForSale }) => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  return (\r\n    <OwnersTableRow>\r\n      {nftsForSale.map((nft) => (\r\n        <Row key={nft.tokenId} t={t} nft={nft} bnbBusdPrice={bnbBusdPrice} account={account} />\r\n      ))}\r\n    </OwnersTableRow>\r\n  )\r\n}\r\n\r\nexport default ForSaleTableRow\r\n","import { Spinner, Text } from '@pancakeswap/uikit'\r\nimport React from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\nconst countdownAnimation = keyframes`\r\n  from {\r\n    stroke-dashoffset: 0px;\r\n  }\r\n  to {\r\n    stroke-dashoffset: 113px;\r\n  }\r\n`\r\n\r\nconst CountdownContainer = styled.div`\r\n  position: relative;\r\n  margin: auto;\r\n  height: 40px;\r\n  width: 40px;\r\n  text-align: center;\r\n\r\n  & svg {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    width: 40px;\r\n    height: 40px;\r\n    transform: rotateY(-180deg) rotateZ(-90deg);\r\n\r\n    & circle {\r\n      stroke-dasharray: 113px;\r\n      stroke-dashoffset: 0px;\r\n      stroke-linecap: round;\r\n      stroke-width: 2px;\r\n      stroke: ${({ theme }) => theme.colors.primaryBright};\r\n      fill: none;\r\n      animation: ${countdownAnimation} 10s linear infinite forwards;\r\n    }\r\n  }\r\n`\r\n\r\ninterface CountdownCircleProps {\r\n  secondsRemaining: number\r\n  isUpdating: boolean\r\n}\r\n\r\nconst CountdownCircle: React.FC<CountdownCircleProps> = ({ secondsRemaining, isUpdating }) => {\r\n  if (secondsRemaining < 1 || isUpdating) {\r\n    return <Spinner size={42} />\r\n  }\r\n  return (\r\n    <CountdownContainer>\r\n      <Text color=\"textSubtle\" lineHeight=\"40px\" display=\"inline-block\">\r\n        {secondsRemaining}\r\n      </Text>\r\n      <svg>\r\n        <circle r=\"18\" cx=\"20\" cy=\"20\" />\r\n      </svg>\r\n    </CountdownContainer>\r\n  )\r\n}\r\n\r\nexport default CountdownCircle\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, useTooltip } from '@pancakeswap/uikit'\r\nimport { useLoadingState } from 'state/nftMarket/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CountdownCircle from './CountdownCircle'\r\n\r\nconst UpdateIndicator = () => {\r\n  const { t } = useTranslation()\r\n  const [secondsRemaining, setSecondsRemaining] = useState(10)\r\n  const { isUpdatingPancakeBunnies: isFetchingMorePancakeBunnies } = useLoadingState()\r\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(t('Items in the table update every 10 seconds'), {\r\n    placement: 'auto',\r\n  })\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setSecondsRemaining((prev) => prev - 1)\r\n    }, 1000)\r\n\r\n    return () => {\r\n      clearInterval(intervalId)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (!isFetchingMorePancakeBunnies) {\r\n      setSecondsRemaining(10)\r\n    }\r\n  }, [isFetchingMorePancakeBunnies])\r\n\r\n  return (\r\n    <Flex justifyContent=\"center\" ref={targetRef}>\r\n      <CountdownCircle secondsRemaining={secondsRemaining} isUpdating={isFetchingMorePancakeBunnies} />\r\n      {tooltipVisible && tooltip}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default UpdateIndicator\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Flex,\r\n  Card,\r\n  Grid,\r\n  SellIcon,\r\n  Text,\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  useMatchBreakpoints,\r\n  ArrowUpIcon,\r\n  ArrowDownIcon,\r\n  Button,\r\n  Spinner,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport ForSaleTableRows from './ForSaleTableRows'\r\nimport { StyledSortButton, TableHeading } from '../../shared/styles'\r\nimport UpdateIndicator from './UpdateIndicator'\r\nimport { Arrow, PageButtons } from '../../../../components/PaginationButtons'\r\n\r\nconst ITEMS_PER_PAGE_DESKTOP = 10\r\nconst ITEMS_PER_PAGE_MOBILE = 5\r\n\r\nconst StyledCard = styled(Card)<{ hasManyPages: boolean }>`\r\n  width: 100%;\r\n  & > div:first-child {\r\n    ${({ hasManyPages }) => (hasManyPages ? 'min-height: 480px;' : null)}\r\n    display: flex;\r\n    flex-direction: column;\r\n    ${({ theme }) => theme.mediaQueries.md} {\r\n      ${({ hasManyPages }) => (hasManyPages ? 'min-height: 850px;' : null)}\r\n    }\r\n  }\r\n`\r\n\r\ninterface ForSaleTableCardProps {\r\n  nftsForSale: NftToken[]\r\n  bunnyId: string\r\n  totalForSale: number\r\n  priceSort: 'asc' | 'desc'\r\n  isFetchingMoreNfts: boolean\r\n  togglePriceSort: () => void\r\n  loadMore: (orderDirection: 'asc' | 'desc') => void\r\n}\r\n\r\nconst ForSaleTableCard: React.FC<ForSaleTableCardProps> = ({\r\n  nftsForSale,\r\n  bunnyId,\r\n  totalForSale,\r\n  loadMore,\r\n  isFetchingMoreNfts,\r\n  priceSort,\r\n  togglePriceSort,\r\n}) => {\r\n  const [page, setPage] = useState(1)\r\n  const { isMobile } = useMatchBreakpoints()\r\n  const itemsPerPage = isMobile ? ITEMS_PER_PAGE_MOBILE : ITEMS_PER_PAGE_DESKTOP\r\n\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  useEffect(() => {\r\n    // If user clicks on other NFT at the bottom of the page - load new NFT table starting on page 1\r\n    // Same for reversing sorting direction\r\n    setPage(1)\r\n  }, [bunnyId, priceSort])\r\n\r\n  const needsExtraPage = nftsForSale.length % itemsPerPage !== 0\r\n  let maxPage = Math.floor(nftsForSale.length / itemsPerPage)\r\n  if (needsExtraPage) {\r\n    maxPage += 1\r\n  }\r\n\r\n  const nftsOnCurrentPage = nftsForSale.slice((page - 1) * itemsPerPage, page * itemsPerPage)\r\n\r\n  const switchPage = (pageNumber: number) => {\r\n    setPage(pageNumber)\r\n  }\r\n\r\n  const loadMoreHandler = () => {\r\n    loadMore(priceSort)\r\n  }\r\n\r\n  const loadMoreButton = isFetchingMoreNfts ? (\r\n    <Flex width=\"96px\" justifyContent=\"center\">\r\n      <Spinner size={32} />\r\n    </Flex>\r\n  ) : (\r\n    <Button variant=\"primary\" scale=\"xs\" ml=\"12px\" onClick={loadMoreHandler}>\r\n      {t('Load more')}\r\n    </Button>\r\n  )\r\n\r\n  return (\r\n    <StyledCard hasManyPages={maxPage > 1}>\r\n      <Grid\r\n        flex=\"0 1 auto\"\r\n        gridTemplateColumns=\"34px 1fr 48px\"\r\n        alignItems=\"center\"\r\n        height=\"72px\"\r\n        px=\"24px\"\r\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\r\n      >\r\n        <SellIcon width=\"24px\" height=\"24px\" />\r\n        <Text bold>{t('For Sale (%num%)', { num: totalForSale.toLocaleString() })}</Text>\r\n        <UpdateIndicator />\r\n      </Grid>\r\n      {nftsOnCurrentPage.length > 0 ? (\r\n        <>\r\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\r\n            <StyledSortButton type=\"button\" onClick={togglePriceSort}>\r\n              <Flex alignItems=\"center\">\r\n                <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\r\n                  {t('Price')}\r\n                </Text>\r\n                {priceSort === 'asc' ? <ArrowUpIcon color=\"textSubtle\" /> : <ArrowDownIcon color=\"textSubtle\" />}\r\n              </Flex>\r\n            </StyledSortButton>\r\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\r\n              {t('Owner')}\r\n            </Text>\r\n          </TableHeading>\r\n          <Flex flex=\"1 1 auto\" flexDirection=\"column\" justifyContent=\"space-between\" height=\"100%\">\r\n            <ForSaleTableRows nftsForSale={nftsOnCurrentPage} />\r\n            <PageButtons>\r\n              <Arrow\r\n                onClick={() => {\r\n                  switchPage(page === 1 ? page : page - 1)\r\n                }}\r\n              >\r\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\r\n              {page === maxPage ? (\r\n                loadMoreButton\r\n              ) : (\r\n                <Arrow\r\n                  onClick={() => {\r\n                    switchPage(page === maxPage ? page : page + 1)\r\n                  }}\r\n                >\r\n                  <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\r\n                </Arrow>\r\n              )}\r\n            </PageButtons>\r\n          </Flex>\r\n        </>\r\n      ) : (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" height=\"200px\">\r\n          <Text>{t('No items for sale')}</Text>\r\n        </Flex>\r\n      )}\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default ForSaleTableCard\r\n","import React, { useState, useEffect, useMemo } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport sum from 'lodash/sum'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFetchByBunnyIdAndUpdate, useGetAllBunniesByBunnyId } from 'state/nftMarket/hooks'\r\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\nimport { PANCAKE_BUNNIES_UPDATE_FREQUENCY } from 'config'\r\nimport { useGetCollectionDistributionPB } from 'views/Nft/market/hooks/useGetCollectionDistribution'\r\nimport MainPancakeBunnyCard from './MainPancakeBunnyCard'\r\nimport ManagePancakeBunniesCard from './ManagePancakeBunniesCard'\r\nimport PropertiesCard from '../shared/PropertiesCard'\r\nimport DetailsCard from '../shared/DetailsCard'\r\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\r\nimport ForSaleTableCard from './ForSaleTableCard'\r\nimport { pancakeBunniesAddress } from '../../../constants'\r\nimport { sortNFTsByPriceBuilder } from './ForSaleTableCard/utils'\r\nimport { SortType } from '../../../types'\r\nimport { TwoColumnsContainer } from '../shared/styles'\r\n\r\ninterface IndividualPancakeBunnyPageProps {\r\n  bunnyId: string\r\n}\r\n\r\nconst IndividualPancakeBunnyPage: React.FC<IndividualPancakeBunnyPageProps> = ({ bunnyId }) => {\r\n  const { account } = useWeb3React()\r\n  const [nothingForSaleBunny, setNothingForSaleBunny] = useState<NftToken>(null)\r\n  const allBunnies = useGetAllBunniesByBunnyId(bunnyId)\r\n  const [priceSort, setPriceSort] = useState<SortType>('asc')\r\n  const previousPriceSort = usePreviousValue(priceSort)\r\n  const { isUpdatingPancakeBunnies, latestPancakeBunniesUpdateAt, fetchMorePancakeBunnies } =\r\n    useFetchByBunnyIdAndUpdate(bunnyId)\r\n  const { fastRefresh } = useRefresh()\r\n  const isWindowVisible = useIsWindowVisible()\r\n  const bunniesSortedByPrice = orderBy(allBunnies, (nft) => parseFloat(nft.marketData.currentAskPrice))\r\n  const allBunniesFromOtherSellers = account\r\n    ? bunniesSortedByPrice.filter((bunny) => bunny.marketData.currentSeller !== account.toLowerCase())\r\n    : bunniesSortedByPrice\r\n  const cheapestBunny = bunniesSortedByPrice[0]\r\n  const cheapestBunnyFromOtherSellers = allBunniesFromOtherSellers[0]\r\n\r\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistributionPB()\r\n\r\n  useEffect(() => {\r\n    // Fetch first 30 NFTs on page load\r\n    // And then query every FETCH_NEW_NFTS_INTERVAL_MS in case some new (cheaper) NFTs were listed\r\n    const msSinceLastUpdate = Date.now() - latestPancakeBunniesUpdateAt\r\n    // Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\r\n    // (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\r\n    // Since fastRefresh is 10 seconds and FETCH_NEW_NFTS_INTERVAL_MS is 8 seconds it fires every 10 seconds\r\n    // The difference in 2 seconds is just to prevent some edge cases when request takes too long\r\n    if (msSinceLastUpdate > PANCAKE_BUNNIES_UPDATE_FREQUENCY && !isUpdatingPancakeBunnies && isWindowVisible) {\r\n      fetchMorePancakeBunnies(priceSort)\r\n    }\r\n  }, [\r\n    priceSort,\r\n    fetchMorePancakeBunnies,\r\n    isUpdatingPancakeBunnies,\r\n    latestPancakeBunniesUpdateAt,\r\n    fastRefresh,\r\n    isWindowVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    // Fetch most expensive items if user selects other sorting\r\n    if (previousPriceSort && previousPriceSort !== priceSort) {\r\n      fetchMorePancakeBunnies(priceSort)\r\n    }\r\n  }, [fetchMorePancakeBunnies, priceSort, previousPriceSort])\r\n\r\n  useEffect(() => {\r\n    const fetchBasicBunnyData = async () => {\r\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      setNothingForSaleBunny({\r\n        // In this case tokenId doesn't matter, this token can't be bought\r\n        tokenId: data[bunnyId].name,\r\n        name: data[bunnyId].name,\r\n        description: data[bunnyId].description,\r\n        collectionName: data[bunnyId].collection.name,\r\n        collectionAddress: pancakeBunniesAddress,\r\n        image: data[bunnyId].image,\r\n        attributes: [\r\n          {\r\n            traitType: 'bunnyId',\r\n            value: bunnyId,\r\n            displayType: null,\r\n          },\r\n        ],\r\n      })\r\n    }\r\n    // If bunny id has no listings on the market - get basic bunny info\r\n    if (!cheapestBunny) {\r\n      fetchBasicBunnyData()\r\n    }\r\n  }, [cheapestBunny, bunnyId])\r\n\r\n  const sortedNfts = useMemo(() => allBunnies.sort(sortNFTsByPriceBuilder({ priceSort })), [allBunnies, priceSort])\r\n\r\n  if (!cheapestBunny && !nothingForSaleBunny) {\r\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\r\n    // That would require tracking loading states and stuff...\r\n\r\n    // For now this if is used to show loading spinner while we're getting the data\r\n    return <PageLoader />\r\n  }\r\n\r\n  const togglePriceSort = () => {\r\n    setPriceSort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\r\n  }\r\n\r\n  const getBunnyIdCount = () => {\r\n    if (distributionData && !isFetchingDistribution) {\r\n      return distributionData[bunnyId]\r\n    }\r\n    return null\r\n  }\r\n\r\n  const getBunnyIdRarity = () => {\r\n    if (distributionData && !isFetchingDistribution) {\r\n      const total = sum(Object.values(distributionData))\r\n      return (distributionData[bunnyId] / total) * 100\r\n    }\r\n    return null\r\n  }\r\n\r\n  const properties = cheapestBunny?.attributes || nothingForSaleBunny?.attributes\r\n\r\n  const propertyRarity = { bunnyId: getBunnyIdRarity() }\r\n\r\n  return (\r\n    <Page>\r\n      <MainPancakeBunnyCard\r\n        cheapestNft={cheapestBunny}\r\n        cheapestNftFromOtherSellers={cheapestBunnyFromOtherSellers}\r\n        nothingForSaleBunny={nothingForSaleBunny}\r\n      />\r\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\r\n        <Flex flexDirection=\"column\" width=\"100%\">\r\n          <ManagePancakeBunniesCard bunnyId={bunnyId} lowestPrice={cheapestBunny?.marketData?.currentAskPrice} />\r\n          <PropertiesCard properties={properties} rarity={propertyRarity} />\r\n          <DetailsCard\r\n            contractAddress={pancakeBunniesAddress}\r\n            ipfsJson={cheapestBunny?.marketData?.metadataUrl}\r\n            rarity={propertyRarity?.bunnyId}\r\n            count={getBunnyIdCount()}\r\n          />\r\n        </Flex>\r\n        <ForSaleTableCard\r\n          nftsForSale={sortedNfts}\r\n          bunnyId={bunnyId}\r\n          totalForSale={allBunnies.length}\r\n          loadMore={fetchMorePancakeBunnies}\r\n          priceSort={priceSort}\r\n          togglePriceSort={togglePriceSort}\r\n          isFetchingMoreNfts={isUpdatingPancakeBunnies}\r\n        />\r\n      </TwoColumnsContainer>\r\n      <MoreFromThisCollection\r\n        collectionAddress={pancakeBunniesAddress}\r\n        currentTokenName={cheapestBunny?.name || nothingForSaleBunny?.name}\r\n      />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default IndividualPancakeBunnyPage\r\n","type sortBuilder = {\r\n  priceSort: string\r\n}\r\n\r\nexport const sortNFTsByPriceBuilder =\r\n  ({ priceSort }: sortBuilder) =>\r\n  (nftA, nftB) => {\r\n    const nftPriceA = Number(nftA.marketData.currentAskPrice) ?? 0\r\n    const nftPriceB = Number(nftB.marketData.currentAskPrice) ?? 0\r\n\r\n    return priceSort === 'asc' ? nftPriceA - nftPriceB : nftPriceB - nftPriceA\r\n  }\r\n","import { BinanceIcon, Box, Button, Card, CardBody, Flex, Skeleton, Text, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport React from 'react'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport NFTMedia from 'views/Nft/market/components/NFTMedia'\r\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\r\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport { nftsBaseUrl } from '../../../constants'\r\nimport { CollectionLink, Container } from '../shared/styles'\r\n\r\ninterface MainNFTCardProps {\r\n  nft: NftToken\r\n  isOwnNft: boolean\r\n  nftIsProfilePic: boolean\r\n}\r\n\r\nconst MainNFTCard: React.FC<MainNFTCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\r\n  const { t } = useTranslation()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n\r\n  const currentAskPriceAsNumber = nft.marketData?.currentAskPrice ? parseFloat(nft.marketData.currentAskPrice) : 0\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, currentAskPriceAsNumber)\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\r\n  const [onPresentSellModal] = useModal(\r\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\r\n  )\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  const ownerButtons = (\r\n    <Flex flexDirection={['column', 'column', 'row']}>\r\n      <Button\r\n        disabled={nftIsProfilePic}\r\n        minWidth=\"168px\"\r\n        mr=\"16px\"\r\n        width={['100%', null, 'max-content']}\r\n        mt=\"24px\"\r\n        onClick={onPresentSellModal}\r\n      >\r\n        {nft.marketData?.isTradable ? t('Adjust price') : t('List for sale')}\r\n      </Button>\r\n      {!nft.marketData?.isTradable && (\r\n        <Button\r\n          minWidth=\"168px\"\r\n          variant=\"secondary\"\r\n          width={['100%', null, 'max-content']}\r\n          mt=\"24px\"\r\n          onClick={onEditProfileModal}\r\n        >\r\n          {nftIsProfilePic ? t('Change Profile Pic') : t('Set as Profile Pic')}\r\n        </Button>\r\n      )}\r\n    </Flex>\r\n  )\r\n\r\n  return (\r\n    <Card mb=\"40px\">\r\n      <CardBody>\r\n        <Container flexDirection={['column-reverse', null, 'row']}>\r\n          <Flex flex=\"2\">\r\n            <Box>\r\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nft.collectionAddress}`}>\r\n                {nft.collectionName}\r\n              </CollectionLink>\r\n              <Text fontSize=\"40px\" bold mt=\"12px\">\r\n                {nft.name}\r\n              </Text>\r\n              {nft.description && <Text mt={['16px', '16px', '48px']}>{t(nft.description)}</Text>}\r\n              <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\r\n                {t('Price')}\r\n              </Text>\r\n              {currentAskPriceAsNumber > 0 ? (\r\n                <Flex alignItems=\"center\" mt=\"8px\">\r\n                  <BinanceIcon width={18} height={18} mr=\"4px\" />\r\n                  <Text fontSize=\"24px\" bold mr=\"4px\">\r\n                    {nft.marketData.currentAskPrice}\r\n                  </Text>\r\n                  {bnbBusdPrice ? (\r\n                    <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\r\n                      minimumFractionDigits: 2,\r\n                      maximumFractionDigits: 2,\r\n                    })} USD)`}</Text>\r\n                  ) : (\r\n                    <Skeleton width=\"64px\" />\r\n                  )}\r\n                </Flex>\r\n              ) : (\r\n                <Text>{t('Not for sale')}</Text>\r\n              )}\r\n              {nftIsProfilePic && (\r\n                <Text color=\"failure\">\r\n                  {t(\r\n                    'This NFT is your profile picture, you must change it to some other NFT if you want to sell this one.',\r\n                  )}\r\n                </Text>\r\n              )}\r\n              {isOwnNft && ownerButtons}\r\n              {!isOwnNft && (\r\n                <Button\r\n                  minWidth=\"168px\"\r\n                  disabled={!nft.marketData?.isTradable}\r\n                  mr=\"16px\"\r\n                  width={['100%', null, 'max-content']}\r\n                  mt=\"24px\"\r\n                  onClick={onPresentBuyModal}\r\n                >\r\n                  {t('Buy')}\r\n                </Button>\r\n              )}\r\n            </Box>\r\n          </Flex>\r\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\" maxWidth={440}>\r\n            <NFTMedia nft={nft} width={440} height={440} />\r\n          </Flex>\r\n        </Container>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default MainNFTCard\r\n","import React from 'react'\r\nimport {\r\n  Box,\r\n  Flex,\r\n  Grid,\r\n  Text,\r\n  CogIcon,\r\n  SellIcon,\r\n  WalletFilledIcon,\r\n  CameraIcon,\r\n  BinanceIcon,\r\n  Skeleton,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableCard from '../shared/ExpandableCard'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport ProfileNftModal from '../../../components/ProfileNftModal'\r\nimport { SmallRoundedImage, CollectibleRowContainer } from '../shared/styles'\r\n\r\nconst LocationColors = {\r\n  [NftLocation.FORSALE]: 'failure',\r\n  [NftLocation.WALLET]: 'secondary',\r\n  [NftLocation.PROFILE]: 'textSubtle',\r\n}\r\n\r\nconst LocationIcons = {\r\n  [NftLocation.FORSALE]: SellIcon,\r\n  [NftLocation.WALLET]: WalletFilledIcon,\r\n  [NftLocation.PROFILE]: CameraIcon,\r\n}\r\n\r\ninterface CollectibleRowProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft }) => {\r\n  const { t } = useTranslation()\r\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\r\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\r\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\r\n  return (\r\n    <CollectibleRowContainer\r\n      gridTemplateColumns=\"96px 1fr\"\r\n      px=\"16px\"\r\n      pb=\"8px\"\r\n      my=\"16px\"\r\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\r\n    >\r\n      <SmallRoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\r\n      <Grid gridTemplateColumns=\"1fr 1fr\">\r\n        <Text bold>{nft.name}</Text>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n          {nft.collectionName}\r\n        </Text>\r\n        {nft.location === NftLocation.FORSALE ? (\r\n          <>\r\n            <Text small color=\"textSubtle\">\r\n              {t('Your price')}\r\n            </Text>\r\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\r\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\r\n              <Text small>{nft.marketData.currentAskPrice}</Text>\r\n            </Flex>\r\n          </>\r\n        ) : (\r\n          <Text small color=\"textDisabled\">\r\n            {t('Not on sale')}\r\n          </Text>\r\n        )}\r\n      </Grid>\r\n    </CollectibleRowContainer>\r\n  )\r\n}\r\n\r\ninterface CollectibleByLocationProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst CollectibleByLocation: React.FC<CollectibleByLocationProps> = ({ nft }) => {\r\n  const { t } = useTranslation()\r\n  const IconComponent = LocationIcons[nft.location]\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\r\n        <IconComponent color={LocationColors[nft.location]} width=\"24px\" height=\"24px\" />\r\n        <Text display=\"inline\" bold color={LocationColors[nft.location]}>\r\n          {t(nft.location)}\r\n        </Text>\r\n      </Grid>\r\n      <CollectibleRow key={nft.tokenId} nft={nft} />\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface ManageNFTsCardProps {\r\n  nft?: NftToken\r\n  isLoading: boolean\r\n  isOwnNft: boolean\r\n}\r\n\r\nconst ManageNFTsCard: React.FC<ManageNFTsCardProps> = ({ nft, isLoading, isOwnNft }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n\r\n  const hasThisNft = isOwnNft && nft\r\n\r\n  const content = (\r\n    <Box pt=\"16px\">\r\n      {!account && (\r\n        <Flex mb=\"16px\" justifyContent=\"center\">\r\n          <ConnectWalletButton />\r\n        </Flex>\r\n      )}\r\n      {account && isLoading && (\r\n        <Box px=\"16px\" pb=\"8px\">\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n          <Skeleton mb=\"8px\" />\r\n        </Box>\r\n      )}\r\n      {!isLoading && !hasThisNft && (\r\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\r\n          {t('You don’t have this item.')}\r\n        </Text>\r\n      )}\r\n      {!isLoading && hasThisNft && <CollectibleByLocation nft={nft} />}\r\n    </Box>\r\n  )\r\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\r\n}\r\n\r\nexport default ManageNFTsCard\r\n","import { useEffect, useState } from 'react'\r\nimport { useErc721CollectionContract } from 'hooks/useContract'\r\nimport { NftToken } from 'state/nftMarket/types'\r\n\r\nconst NOT_ON_SALE_SELLER = '0x0000000000000000000000000000000000000000'\r\n\r\nconst useNftOwner = (nft: NftToken) => {\r\n  const [owner, setOwner] = useState(null)\r\n  const [isLoadingOwner, setIsLoadingOwner] = useState(true)\r\n  const collectionContract = useErc721CollectionContract(nft.collectionAddress)\r\n  const currentSeller = nft.marketData?.currentSeller\r\n  const { tokenId } = nft\r\n\r\n  useEffect(() => {\r\n    const getOwner = async () => {\r\n      try {\r\n        const tokenOwner = await collectionContract.ownerOf(tokenId)\r\n        setOwner(tokenOwner)\r\n      } catch (error) {\r\n        setOwner(null)\r\n      } finally {\r\n        setIsLoadingOwner(false)\r\n      }\r\n    }\r\n\r\n    if (currentSeller && currentSeller !== NOT_ON_SALE_SELLER) {\r\n      setOwner(currentSeller)\r\n      setIsLoadingOwner(false)\r\n    } else {\r\n      getOwner()\r\n    }\r\n  }, [currentSeller, collectionContract, tokenId])\r\n\r\n  return { owner, isLoadingOwner }\r\n}\r\n\r\nexport default useNftOwner\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Card, Grid, SellIcon, Text, useModal, Box, BinanceIcon, Skeleton, Button } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport useNftOwner from 'views/Nft/market/hooks/useNftOwner'\r\nimport BuyModal from '../../../components/BuySellModals/BuyModal'\r\nimport SellModal from '../../../components/BuySellModals/SellModal'\r\nimport ProfileCell from '../../../components/ProfileCell'\r\nimport { ButtonContainer, TableHeading } from '../shared/styles'\r\n\r\nconst StyledCard = styled(Card)`\r\n  width: 100%;\r\n  & > div:first-child {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\nconst OwnerRow = styled(Grid)`\r\n  grid-template-columns: 2fr 2fr 1fr;\r\n  grid-row-gap: 16px;\r\n  margin-top: 16px;\r\n  margin-bottom: 8px;\r\n  align-items: center;\r\n`\r\n\r\ninterface OwnerCardProps {\r\n  nft: NftToken\r\n  isOwnNft: boolean\r\n  nftIsProfilePic: boolean\r\n}\r\n\r\nconst OwnerCard: React.FC<OwnerCardProps> = ({ nft, isOwnNft, nftIsProfilePic }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n\r\n  const { owner, isLoadingOwner } = useNftOwner(nft)\r\n\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData?.currentAskPrice))\r\n\r\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\r\n  const [onPresentAdjustPriceModal] = useModal(\r\n    <SellModal variant={nft.marketData?.isTradable ? 'edit' : 'sell'} nftToSell={nft} />,\r\n  )\r\n\r\n  return (\r\n    <StyledCard>\r\n      <Grid\r\n        flex=\"0 1 auto\"\r\n        gridTemplateColumns=\"34px 1fr\"\r\n        alignItems=\"center\"\r\n        height=\"72px\"\r\n        px=\"24px\"\r\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\r\n      >\r\n        <SellIcon width=\"24px\" height=\"24px\" />\r\n        <Text bold>{t('Owner')}</Text>\r\n      </Grid>\r\n      {owner && (\r\n        <>\r\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\r\n            <Flex alignItems=\"center\">\r\n              <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\r\n                {t('Price')}\r\n              </Text>\r\n            </Flex>\r\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\r\n              {t('Owner')}\r\n            </Text>\r\n          </TableHeading>\r\n          <OwnerRow>\r\n            <Box pl=\"24px\">\r\n              {nft.marketData?.isTradable ? (\r\n                <>\r\n                  <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\r\n                    <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\r\n                    <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\r\n                  </Flex>\r\n                  {bnbBusdPrice ? (\r\n                    <Text fontSize=\"12px\" color=\"textSubtle\">\r\n                      {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\r\n                    </Text>\r\n                  ) : (\r\n                    <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <Flex alignItems=\"center\" height=\"100%\">\r\n                  <Text>{t('Not for sale')}</Text>\r\n                </Flex>\r\n              )}\r\n            </Box>\r\n            <Box>\r\n              <Flex width=\"max-content\" alignItems=\"center\">\r\n                <ProfileCell accountAddress={owner.toLowerCase()} />\r\n              </Flex>\r\n            </Box>\r\n            <ButtonContainer>\r\n              {isOwnNft ? (\r\n                <Button\r\n                  disabled={nftIsProfilePic}\r\n                  scale=\"sm\"\r\n                  variant=\"secondary\"\r\n                  maxWidth=\"128px\"\r\n                  onClick={onPresentAdjustPriceModal}\r\n                >\r\n                  {nft.marketData?.isTradable ? t('Manage') : t('Sell')}\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  disabled={!nft.marketData?.isTradable}\r\n                  scale=\"sm\"\r\n                  variant=\"secondary\"\r\n                  maxWidth=\"128px\"\r\n                  onClick={onPresentBuyModal}\r\n                >\r\n                  {t('Buy')}\r\n                </Button>\r\n              )}\r\n            </ButtonContainer>\r\n          </OwnerRow>\r\n        </>\r\n      )}\r\n      {isLoadingOwner && <Skeleton />}\r\n      {!isLoadingOwner && !owner && (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" padding=\"24px\">\r\n          <Text>{t('Owner information is not available for this item')}</Text>\r\n        </Flex>\r\n      )}\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default OwnerCard\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport sum from 'lodash/sum'\r\nimport Page from 'components/Layout/Page'\r\nimport { getNftApi, getNftsMarketData } from 'state/nftMarket/helpers'\r\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport MainNFTCard from './MainNFTCard'\r\nimport ManageNFTsCard from './ManageNFTsCard'\r\nimport useFetchUserNfts from '../../../Profile/hooks/useFetchUserNfts'\r\nimport { TwoColumnsContainer } from '../shared/styles'\r\nimport PropertiesCard from '../shared/PropertiesCard'\r\nimport DetailsCard from '../shared/DetailsCard'\r\nimport useGetCollectionDistribution from '../../../hooks/useGetCollectionDistribution'\r\nimport OwnerCard from './OwnerCard'\r\nimport MoreFromThisCollection from '../shared/MoreFromThisCollection'\r\n\r\ninterface IndividualNFTPageProps {\r\n  collectionAddress: string\r\n  tokenId: string\r\n}\r\n\r\nconst IndividualNFTPage: React.FC<IndividualNFTPageProps> = ({ collectionAddress, tokenId }) => {\r\n  const [nft, setNft] = useState<NftToken>(null)\r\n  const [isOwnNft, setIsOwnNft] = useState(false)\r\n\r\n  const { data: distributionData, isFetching: isFetchingDistribution } = useGetCollectionDistribution(collectionAddress)\r\n\r\n  const { account } = useWeb3React()\r\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\r\n  useFetchUserNfts()\r\n\r\n  useEffect(() => {\r\n    const fetchNftData = async () => {\r\n      setIsOwnNft(false)\r\n      const metadata = await getNftApi(collectionAddress, tokenId)\r\n      const [marketData] = await getNftsMarketData({ collection: collectionAddress.toLowerCase(), tokenId }, 1)\r\n      setNft({\r\n        tokenId,\r\n        collectionAddress,\r\n        collectionName: metadata.collection.name,\r\n        name: metadata.name,\r\n        description: metadata.description,\r\n        image: metadata.image,\r\n        attributes: metadata.attributes,\r\n        marketData,\r\n      })\r\n    }\r\n    if (!account) {\r\n      fetchNftData()\r\n    } else if (userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\r\n      const nftOwnedByConnectedUser = userNfts.find(\r\n        (userNft) =>\r\n          userNft.collectionAddress.toLowerCase() === collectionAddress.toLowerCase() && userNft.tokenId === tokenId,\r\n      )\r\n      if (nftOwnedByConnectedUser) {\r\n        // If user is the owner we already have all needed data available\r\n        setNft(nftOwnedByConnectedUser)\r\n        setIsOwnNft(true)\r\n      } else {\r\n        // Get metadata and market data separately if connected user is not the owner\r\n        fetchNftData()\r\n      }\r\n    }\r\n  }, [userNfts, collectionAddress, tokenId, userNftsInitializationState, account])\r\n\r\n  if (!nft) {\r\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\r\n    // That would require tracking loading states and stuff...\r\n\r\n    // For now this if is used to show loading spinner while we're getting the data\r\n    return <PageLoader />\r\n  }\r\n\r\n  const properties = nft.attributes\r\n\r\n  const userProfilePicture = userNfts.find((userNft) => userNft.location === NftLocation.PROFILE)\r\n  const nftIsProfilePic = userProfilePicture\r\n    ? nft.tokenId === userProfilePicture.tokenId && nft.collectionAddress === userProfilePicture.collectionAddress\r\n    : false\r\n\r\n  const getAttributesRarity = () => {\r\n    if (distributionData && !isFetchingDistribution) {\r\n      return Object.keys(distributionData).reduce((rarityMap, traitType) => {\r\n        const total = sum(Object.values(distributionData[traitType]))\r\n        const nftAttributeValue = nft.attributes.find((attribute) => attribute.traitType === traitType)?.value\r\n        const count = distributionData[traitType][nftAttributeValue]\r\n        const rarity = (count / total) * 100\r\n        return {\r\n          ...rarityMap,\r\n          [traitType]: rarity,\r\n        }\r\n      }, {})\r\n    }\r\n    return {}\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <MainNFTCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\r\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\r\n        <Flex flexDirection=\"column\" width=\"100%\">\r\n          <ManageNFTsCard\r\n            nft={nft}\r\n            isOwnNft={isOwnNft}\r\n            isLoading={userNftsInitializationState !== UserNftInitializationState.INITIALIZED}\r\n          />\r\n          <PropertiesCard properties={properties} rarity={getAttributesRarity()} />\r\n          <DetailsCard contractAddress={collectionAddress} ipfsJson={nft?.marketData?.metadataUrl} />\r\n        </Flex>\r\n        <OwnerCard nft={nft} isOwnNft={isOwnNft} nftIsProfilePic={nftIsProfilePic} />\r\n      </TwoColumnsContainer>\r\n      <MoreFromThisCollection collectionAddress={collectionAddress} currentTokenName={nft.name} />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default IndividualNFTPage\r\n","import React from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\nimport IndividualPancakeBunnyPage from './PancakeBunnyPage'\r\nimport IndividualNFTPage from './OneOfAKindNftPage'\r\n\r\nconst IndividualNFTPageRouter = () => {\r\n  // For PancakeBunnies tokenId in url is really bunnyId\r\n  const { collectionAddress, tokenId } = useParams<{ collectionAddress: string; tokenId: string }>()\r\n\r\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n  if (isPBCollection) {\r\n    return <IndividualPancakeBunnyPage bunnyId={tokenId} />\r\n  }\r\n\r\n  return <IndividualNFTPage collectionAddress={collectionAddress} tokenId={tokenId} />\r\n}\r\n\r\nexport default IndividualNFTPageRouter\r\n","import { useEffect, useState } from 'react'\r\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\r\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\ninterface State {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistribution['data']\r\n}\r\n\r\nconst useGetCollectionDistribution = (collectionAddress: string) => {\r\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setState])\r\n\r\n  return state\r\n}\r\n\r\ninterface StatePB {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistributionPB['data']\r\n}\r\n\r\nexport const useGetCollectionDistributionPB = () => {\r\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [setState])\r\n\r\n  return state\r\n}\r\n\r\nexport default useGetCollectionDistribution\r\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n"],"sourceRoot":""}