{"version":3,"sources":["state/info/types.ts","views/Info/utils/infoDataHelpers.ts","state/info/queries/protocol/overview.ts","state/info/queries/helpers.ts","views/Info/components/InfoCharts/ChartCard/index.tsx","state/info/queries/protocol/chart.ts","state/info/queries/protocol/transactions.ts","state/info/queries/pools/topPools.ts","state/info/queries/pools/poolData.ts","views/Info/hooks/useBnbPrices.ts","state/info/queries/tokens/tokenData.ts","state/info/queries/tokens/topTokens.ts","state/info/queries/pools/chartData.ts","state/info/queries/pools/transactions.ts","state/info/queries/tokens/chartData.ts","state/info/queries/tokens/transactions.ts","state/info/queries/tokens/priceData.ts","state/info/queries/tokens/poolsForToken.ts","state/info/hooks.ts","state/info/updaters.ts","state/info/queries/search/index.ts","views/Info/components/CurrencyLogo/LogoLoader.tsx","views/Info/components/CurrencyLogo/index.tsx","views/Info/utils/formatInfoNumbers.ts","views/Info/components/SaveIcon/index.tsx","views/Info/components/InfoSearch/index.tsx","views/Info/components/InfoNav/index.tsx","views/Info/components/ChartLoaders/LineChartLoaderSVG.tsx","views/Info/components/ChartLoaders/BarChartLoaderSVG.tsx","views/Info/components/ChartLoaders/CandleChartLoaderSVG.tsx","views/Info/components/ChartLoaders/index.tsx","views/Info/components/InfoCharts/LineChart/index.tsx","views/Info/components/Percent/index.tsx","views/Info/components/InfoTables/shared.tsx","views/Info/components/InfoTables/TokensTable.tsx","views/Info/components/InfoTables/PoolsTable.tsx","views/Info/components/InfoCharts/BarChart/index.tsx","views/Info/components/InfoTables/TransactionsTable.tsx","views/Info/Overview/index.tsx","views/Info/Pools/index.tsx","views/Info/components/InfoCharts/CandleChart/index.tsx","views/Info/Pools/PoolPage.tsx","views/Info/components/TopTokenMovers/index.tsx","views/Info/Tokens/index.tsx","views/Info/hooks/useCMCLink.ts","views/Info/Tokens/TokenPage.tsx","views/Info/Tokens/redirects.tsx","views/Info/index.tsx","components/TabToggle/index.tsx"],"names":["TransactionType","getAmountChange","valueNow","valueBefore","getPercentChange","getChangeForPeriod","valueOnePeriodAgo","valueTwoPeriodsAgo","currentPeriodAmount","previousPeriodAmount","getLpFeesAndApr","volumeUSD","volumeUSDWeek","liquidityUSD","totalFees24h","TOTAL_FEE","totalFees7d","lpFees24h","LP_HOLDERS_FEE","lpFees7d","lpApr7d","WEEKS_IN_YEAR","Infinity","getOverviewData","block","a","query","gql","request","INFO_CLIENT","data","error","console","formatPancakeFactoryResponse","rawPancakeFactory","totalTransactions","parseFloat","totalVolumeUSD","totalLiquidityUSD","useFetchProtocolData","useState","fetchState","setFetchState","getDeltaTimestamps","t24","t48","useBlocksFromTimestamps","blocks","blockError","block24","block48","useEffect","fetch","number","undefined","error24","data24","error48","data48","anyError","overviewData","pancakeFactories","overviewData24","overviewData48","allDataAvailable","volumeUSDChange","liquidityUSDChange","txCount","txCountChange","protocolData","ChartView","mapMints","mint","type","MINT","hash","id","split","timestamp","sender","to","token0Symbol","pair","token0","symbol","token1Symbol","token1","token0Address","token1Address","amountUSD","amountToken0","amount0","amountToken1","amount1","mapBurns","burn","BURN","mapSwaps","swap","SWAP","from","amount0In","amount0Out","amount1In","amount1Out","mapDayData","tokenDayData","date","dailyVolumeUSD","mapPairDayData","pairDayData","reserveUSD","fetchChartData","getEntityDayDatas","address","chartEntries","skip","allFound","fetchError","length","concat","formattedDayDatas","reduce","accum","dayData","dayOrdinal","parseInt","ONE_DAY_UNIX","toFixed","availableDays","Object","keys","map","firstAvailableDayData","PCS_V2_START","latestLiquidityUSD","endTimestamp","getUnixTime","Date","includes","toString","values","PANCAKE_DAY_DATAS","getOverviewChartData","startTime","pancakeDayDatas","useFetchGlobalChartData","overviewChartData","setOverviewChartData","setError","GLOBAL_TRANSACTIONS","fetchTopTransactions","mints","burns","swaps","sort","b","fetchTopPools","timestamp24hAgo","blacklist","TOKEN_BLACKLIST","pairDayDatas","p","useTopPoolAddresses","topPoolAddresses","setTopPoolAddresses","addresses","POOL_AT_BLOCK","pools","blockString","addressesString","join","fetchPoolData","block24h","block48h","block7d","block14d","poolAddresses","parsePoolData","pairs","poolData","reserve0","reserve1","token0Price","token1Price","usePoolDatas","t24h","t48h","t7d","t14d","formattedPoolData","now","formattedPoolData24h","oneDayAgo","formattedPoolData48h","twoDaysAgo","formattedPoolData7d","oneWeekAgo","formattedPoolData14d","twoWeeksAgo","formatted","current","oneDay","twoDays","week","twoWeeks","volumeUSDChangeWeek","liquidityToken0","liquidityToken1","name","allBlocksAvailable","BNB_PRICES","fetchBnbPrices","blockWeek","bnbPrices","bnbPrice","twoDay","oneWeek","TOKEN_AT_BLOCK","tokens","fetchTokenData","tokenAddresses","parseTokenData","tokenData","derivedBNB","derivedUSD","tradeVolumeUSD","totalLiquidity","useFetchedTokenDatas","prices","setPrices","tWeek","useBnbPrices","parsed","parsed24","parsed48","parsed7d","parsed14d","liquidityUSDOneDayAgo","liquidityToken","priceUSD","priceUSDOneDay","priceUSDWeek","priceUSDChange","priceUSDChangeWeek","exists","fetchTopTokens","tokenDayDatas","t","useTopTokenAddresses","topTokenAddresses","setTopTokenAddresses","getPoolChartData","fetchPoolChartData","POOL_TRANSACTIONS","fetchPoolTransactions","getTokenChartData","fetchTokenChartData","TOKEN_TRANSACTIONS","fetchTokenTransactions","mints0","mintsAs0","mints1","mintsAs1","burns0","burnsAs0","burns1","burnsAs1","swaps0","swapsAs0","swaps1","swapsAs1","getPriceSubqueries","tokenAddress","priceQueryConstructor","subqueries","fetchTokenPriceData","interval","startTimestamp","timestamps","time","push","getBlocksFromTimestamps","multiQuery","tokenPrices","forEach","priceKey","tokenPriceIndex","findIndex","tokenPrice","formattedHistory","i","open","close","high","low","POOLS_FOR_TOKEN","fetchPoolsForToken","asToken0","asToken1","useProtocolData","useSelector","state","info","protocol","overview","dispatch","useDispatch","useCallback","updateProtocolData","useProtocolChartData","chartData","updateProtocolChartData","useProtocolTransactions","transactions","transactionsData","updateProtocolTransactions","useAllPoolData","byAddress","useAddPoolKeys","addPoolKeys","allPoolData","addNewPoolKeys","untrackedAddresses","filter","pool","useAllTokenData","useAddTokenKeys","addTokenKeys","useTokenDatas","allTokenData","addNewTokenKeys","useMemo","token","ProtocolUpdater","setProtocolData","fetchedProtocolData","updateChartData","fetchedChartData","chartError","updateTransactions","PoolUpdater","updatePoolData","useUpdatePoolData","unfetchedPoolAddresses","poolDataError","poolDatas","TokenUpdater","updateTokenDatas","updateTokenData","useUpdateTokenData","unfetchedTokenAddresses","key","tokenDataError","tokenDatas","TOKEN_SEARCH","POOL_SEARCH","getIds","entityArrays","ids","entities","currentTokenArray","entity","Array","Set","useFetchSearchResults","searchString","loading","searchResults","setSearchResults","searchStringTooShort","MINIMUM_SEARCH_CHARACTERS","toUpperCase","charAt","slice","toLowerCase","tokenIds","asAddress","asSymbol","asName","as0","as1","search","tokenDatasFull","poolDatasFull","tokensLoading","poolsLoading","BAD_SRCS","LogoLoader","src","alt","rest","refresh","srcFailedLoading","onError","StyledLogo","styled","size","theme","colors","background","text","CurrencyLogo","checksummedAddress","isAddress","DoubleCurrencyWrapper","div","DoubleCurrencyLogo","address0","address1","formatAmount","amount","options","notation","displayThreshold","tokenPrecision","isInteger","match","precision","format","repeat","amountWithPrecision","numeral","HoverIcon","SaveIcon","fill","useTheme","stroke","warning","color","textDisabled","Container","StyledInput","Input","inputSecondary","Menu","hide","secondary","mediaQueries","sm","md","Blackout","ResponsiveGrid","Break","cardBorder","HoverText","HoverRowLink","OptionButton","enabled","primary","card","tokenIncludesSearchTerm","value","Search","history","useHistory","useMatchBreakpoints","isXs","isSm","useTranslation","inputRef","useRef","menuRef","showMoreRef","showMenu","setShowMenu","setValue","debouncedSearchTerm","useDebounce","tokensShown","setTokensShown","poolsShown","setPoolsShown","handleOutsideClick","e","menuClick","contains","target","inputCLick","showMoreClick","document","addEventListener","querySelector","style","overflow","removeEventListener","useWatchlistTokens","savedTokens","addSavedToken","useWatchlistPools","savedPools","addSavedPool","handleItemClick","watchListTokenData","watchListTokenLoading","watchListPoolData","watchListPoolLoading","showWatchlist","setShowWatchlist","tokensForList","t0","t1","poolForList","poolIncludesSearchTerm","p0","p1","onChange","placeholder","ref","onFocus","mb","onClick","bold","textAlign","fontSize","ml","marginLeft","stopPropagation","isLoading","noTokensFound","noWatchlistTokens","showMessage","noTokensMessage","contentUnderTokenList","whiteSpace","noPoolsFound","noWatchlistPools","noPoolsMessage","contentUnderPoolList","NavWrapper","Flex","gradients","cardHeader","InfoNav","activeIndex","useRouteMatch","scale","variant","as","Link","width","LineChartLoaderSVG","props","height","preserveAspectRatio","viewBox","d","strokeWidth","strokeDasharray","strokeDashoffset","opacity","attributeName","dur","begin","className","result","stdDeviation","in","BarChartLoaderSVG","keyTimes","repeatCount","x","CandleChartLoaderSVG","LoadingText","Box","LoadingIndicator","BarChartLoader","LineChartLoader","CandleChartLoader","HoverUpdater","locale","payload","setHoverValue","setHoverDate","toLocaleString","year","day","month","LineChart","currentLanguage","ResponsiveContainer","AreaChart","margin","top","right","left","bottom","onMouseLeave","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","axisLine","tickLine","tickFormatter","toLocaleDateString","minTickGap","YAxis","tickCount","val","orientation","tick","dx","textSubtle","Tooltip","cursor","contentStyle","display","formatter","tooltipValue","Area","Percent","Number","isNaN","isNegative","Math","abs","ClickableColumnHeader","Text","TableWrapper","radii","PageButtons","Arrow","LinkWrapper","ResponsiveLogo","TableLoader","loadingRow","DataRow","index","alignItems","fontWeight","SORT_FIELD","TokenTable","maxItems","sortField","setSortField","sortDirection","setSortDirection","page","setPage","maxPage","setMaxPage","extraPages","floor","sortedTokens","handleSort","newField","arrow","field","textTransform","Fragment","LoadingRow","PoolTable","ITEMS_PER_INFO_TABLE_PAGE","sortedPools","CustomBar","y","rx","Chart","BarChart","backgroundDisabled","Bar","shape","Wrapper","RadioGroup","transaction","abs0","abs1","outputTokenSymbol","inputTokenSymbol","href","getBscScanLink","truncateHash","formatDistanceToNowStrict","TransactionTable","txFilter","setTxFilter","sortedTransactions","filteredTransactions","tx","handleFilter","newFilter","flexDirection","checked","justifyContent","ChartCardsContainer","Overview","liquidityHover","setLiquidityHover","liquidityDateHover","setLiquidityDateHover","volumeHover","setVolumeHover","volumeDateHover","setVolumeDateHover","currentDate","formattedLiquidityData","fromUnixTime","formattedVolumeData","allTokens","formattedTokens","somePoolsAreLoading","some","Page","mt","PoolsOverview","watchlistPools","px","py","CandleChart","setLabel","chartRef","chartCreated","setChart","handleResize","parentElement","resize","clientWidth","timeScale","fitContent","scrollToPosition","isClient","window","chart","createChart","layout","backgroundColor","textColor","fontFamily","rightPriceScale","scaleMargins","borderVisible","secondsVisible","tickMarkFormatter","unixTime","watermark","visible","grid","horzLines","vertLines","crosshair","horzLine","labelVisible","mode","vertLine","labelBackgroundColor","series","addCandlestickSeries","upColor","success","downColor","failure","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","subscribeCrosshairMove","param","point","hour","minute","timeZone","seriesPrices","get","ChartCard","tokenPriceData","VOLUME","view","setView","hoverValue","hoverDate","formattedTvlData","TabToggle","isActive","LIQUIDITY","PRICE","pt","valueToDisplay","getLatestValueDisplay","small","ContentLayout","TokenButton","LockedTokensContainer","PoolPage","routeAddress","params","showWeeklyData","setShowWeeklyData","useTooltip","tooltip","tooltipVisible","targetRef","scrollTo","updatePoolChartData","poolAddress","usePoolChartData","updatePoolTransactions","usePoolTransactions","addPoolToWatchlist","mr","flex","onItemClick","totalFees","CardWrapper","TopMoverCard","ScrollableRow","DataCard","lineHeight","TopTokenMovers","topPriceIncrease","min","increaseRef","moveLeftRef","scrollInterval","setInterval","scrollLeft","scrollWidth","clearInterval","entry","my","TokensOverview","watchListTokens","useCMCLink","cmcPageUrl","setCMCPageUrl","status","json","then","url","fetchLink","StyledCMCLink","UIKitLink","DEFAULT_TIME_WINDOW","weeks","TokenPage","cmcLink","useTokenData","poolsForToken","addTokenPoolAddresses","usePoolsForToken","updateTokenTransactions","useTokenTransactions","updateTokenChartData","useTokenChartData","priceData","timeWindow","oldestTimestampFetched","oldestFetchedTimestamp","utcCurrentTime","startOfHour","sub","fetchingError","updateTokenPriceData","secondsInterval","useTokenPriceData","ONE_HOUR_SECONDS","adjustedPriceData","getTime","watchlistTokens","addWatchlistToken","rel","RedirectInvalidToken","Info","path","exact","Pools","Tokens","component","Inner","input","button","TabToggleGroup","children"],"mappings":"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","file":"static/js/34.85a28eba.chunk.js","sourcesContent":["export interface Block {\r\n  number: number\r\n  timestamp: string\r\n}\r\n\r\nexport interface ChartEntry {\r\n  date: number\r\n  volumeUSD: number\r\n  liquidityUSD: number\r\n}\r\n\r\n/**\r\n * Formatted type for Candlestick charts\r\n */\r\nexport interface PriceChartEntry {\r\n  time: number\r\n  open: number\r\n  close: number\r\n  high: number\r\n  low: number\r\n}\r\n\r\nexport enum TransactionType {\r\n  SWAP,\r\n  MINT,\r\n  BURN,\r\n}\r\n\r\nexport type Transaction = {\r\n  type: TransactionType\r\n  hash: string\r\n  timestamp: string\r\n  sender: string\r\n  token0Symbol: string\r\n  token1Symbol: string\r\n  token0Address: string\r\n  token1Address: string\r\n  amountUSD: number\r\n  amountToken0: number\r\n  amountToken1: number\r\n}\r\n\r\nexport interface ProtocolData {\r\n  volumeUSD: number\r\n  volumeUSDChange: number // in 24h, as percentage\r\n\r\n  liquidityUSD: number\r\n  liquidityUSDChange: number // in 24h, as percentage\r\n\r\n  txCount: number\r\n  txCountChange: number\r\n}\r\n\r\nexport interface ProtocolState {\r\n  readonly overview?: ProtocolData\r\n\r\n  readonly chartData?: ChartEntry[]\r\n\r\n  readonly transactions?: Transaction[]\r\n}\r\n\r\n// POOLS\r\n\r\nexport interface PoolData {\r\n  address: string\r\n\r\n  token0: {\r\n    name: string\r\n    symbol: string\r\n    address: string\r\n  }\r\n\r\n  token1: {\r\n    name: string\r\n    symbol: string\r\n    address: string\r\n  }\r\n\r\n  volumeUSD: number\r\n  volumeUSDChange: number\r\n  volumeUSDWeek: number\r\n  volumeUSDChangeWeek: number\r\n\r\n  totalFees24h: number\r\n  totalFees7d: number\r\n  lpFees24h: number\r\n  lpFees7d: number\r\n  lpApr7d: number\r\n\r\n  liquidityUSD: number\r\n  liquidityUSDChange: number\r\n\r\n  token0Price: number\r\n  token1Price: number\r\n\r\n  liquidityToken0: number\r\n  liquidityToken1: number\r\n}\r\n\r\nexport interface PoolsState {\r\n  byAddress: {\r\n    [address: string]: {\r\n      data?: PoolData\r\n      chartData?: ChartEntry[]\r\n      transactions?: Transaction[]\r\n    }\r\n  }\r\n}\r\n\r\n// TOKENS\r\n\r\nexport type TokenData = {\r\n  exists: boolean\r\n\r\n  name: string\r\n  symbol: string\r\n  address: string\r\n\r\n  volumeUSD: number\r\n  volumeUSDChange: number\r\n  volumeUSDWeek: number\r\n  txCount: number\r\n\r\n  liquidityToken: number\r\n  liquidityUSD: number\r\n  liquidityUSDChange: number\r\n\r\n  priceUSD: number\r\n  priceUSDChange: number\r\n  priceUSDChangeWeek: number\r\n}\r\n\r\nexport interface TokensState {\r\n  byAddress: {\r\n    [address: string]: {\r\n      data?: TokenData\r\n      poolAddresses?: string[]\r\n      chartData?: ChartEntry[]\r\n      priceData: {\r\n        oldestFetchedTimestamp?: number\r\n        [secondsInterval: number]: PriceChartEntry[] | undefined\r\n      }\r\n      transactions?: Transaction[]\r\n    }\r\n  }\r\n}\r\n\r\n// Info redux state\r\nexport interface InfoState {\r\n  protocol: ProtocolState\r\n  pools: PoolsState\r\n  tokens: TokensState\r\n}\r\n","import { TOTAL_FEE, LP_HOLDERS_FEE, WEEKS_IN_YEAR } from 'config/constants/info'\r\n\r\n/**\r\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\r\n * @param valueNow - more recent value\r\n * @param valueBefore - value to compare with\r\n */\r\nexport const getAmountChange = (valueNow?: number, valueBefore?: number) => {\r\n  if (valueNow && valueBefore) {\r\n    return valueNow - valueBefore\r\n  }\r\n  if (valueNow) {\r\n    return valueNow\r\n  }\r\n  return 0\r\n}\r\n\r\n/**\r\n * Get increase/decrease of value compared to the previous value as a percentage\r\n * @param valueNow - more recent value\r\n * @param valueBefore - value to compare with\r\n */\r\nexport const getPercentChange = (valueNow?: number, valueBefore?: number): number => {\r\n  if (valueNow && valueBefore) {\r\n    return ((valueNow - valueBefore) / valueBefore) * 100\r\n  }\r\n  return 0\r\n}\r\n\r\n/**\r\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\r\n * and percentage change compared to the previous period.\r\n * @param valueNow - current value\r\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\r\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\r\n * @returns amount change for the latest period and percentage change compared to previous period\r\n */\r\nexport const getChangeForPeriod = (\r\n  valueNow?: number,\r\n  valueOnePeriodAgo?: number,\r\n  valueTwoPeriodsAgo?: number,\r\n): [number, number] => {\r\n  const currentPeriodAmount = getAmountChange(valueNow, valueOnePeriodAgo)\r\n  const previousPeriodAmount = getAmountChange(valueOnePeriodAgo, valueTwoPeriodsAgo)\r\n  const percentageChange = getPercentChange(currentPeriodAmount, previousPeriodAmount)\r\n  return [currentPeriodAmount, percentageChange]\r\n}\r\n\r\nexport const getLpFeesAndApr = (volumeUSD: number, volumeUSDWeek: number, liquidityUSD: number) => {\r\n  const totalFees24h = volumeUSD * TOTAL_FEE\r\n  const totalFees7d = volumeUSDWeek * TOTAL_FEE\r\n  const lpFees24h = volumeUSD * LP_HOLDERS_FEE\r\n  const lpFees7d = volumeUSDWeek * LP_HOLDERS_FEE\r\n\r\n  const lpApr7d = liquidityUSD > 0 ? (volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100) / liquidityUSD : 0\r\n  return {\r\n    totalFees24h,\r\n    totalFees7d,\r\n    lpFees24h,\r\n    lpFees7d,\r\n    lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0,\r\n  }\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { getChangeForPeriod, getPercentChange } from 'views/Info/utils/infoDataHelpers'\r\nimport { ProtocolData } from 'state/info/types'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\r\n\r\ninterface PancakeFactory {\r\n  totalTransactions: string\r\n  totalVolumeUSD: string\r\n  totalLiquidityUSD: string\r\n}\r\n\r\ninterface OverviewResponse {\r\n  pancakeFactories: PancakeFactory[]\r\n}\r\n\r\n/**\r\n * Latest Liquidity, Volume and Transaction count\r\n */\r\nconst getOverviewData = async (block?: number): Promise<{ data?: OverviewResponse; error: boolean }> => {\r\n  try {\r\n    const query = gql`query overview {\r\n      pancakeFactories(\r\n        ${block ? `block: { number: ${block}}` : ``} \r\n        first: 1) {\r\n        totalTransactions\r\n        totalVolumeUSD\r\n        totalLiquidityUSD\r\n      }\r\n    }`\r\n    const data = await request<OverviewResponse>(INFO_CLIENT, query)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch info overview', error)\r\n    return { data: null, error: true }\r\n  }\r\n}\r\n\r\nconst formatPancakeFactoryResponse = (rawPancakeFactory?: PancakeFactory) => {\r\n  if (rawPancakeFactory) {\r\n    return {\r\n      totalTransactions: parseFloat(rawPancakeFactory.totalTransactions),\r\n      totalVolumeUSD: parseFloat(rawPancakeFactory.totalVolumeUSD),\r\n      totalLiquidityUSD: parseFloat(rawPancakeFactory.totalLiquidityUSD),\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\ninterface ProtocolFetchState {\r\n  error: boolean\r\n  data?: ProtocolData\r\n}\r\n\r\nconst useFetchProtocolData = (): ProtocolFetchState => {\r\n  const [fetchState, setFetchState] = useState<ProtocolFetchState>({\r\n    error: false,\r\n  })\r\n  const [t24, t48] = getDeltaTimestamps()\r\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48])\r\n  const [block24, block48] = blocks ?? []\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error, data } = await getOverviewData()\r\n      const { error: error24, data: data24 } = await getOverviewData(block24?.number ?? undefined)\r\n      const { error: error48, data: data48 } = await getOverviewData(block48?.number ?? undefined)\r\n      const anyError = error || error24 || error48\r\n      const overviewData = formatPancakeFactoryResponse(data?.pancakeFactories?.[0])\r\n      const overviewData24 = formatPancakeFactoryResponse(data24?.pancakeFactories?.[0])\r\n      const overviewData48 = formatPancakeFactoryResponse(data48?.pancakeFactories?.[0])\r\n      const allDataAvailable = overviewData && overviewData24 && overviewData48\r\n      if (anyError || !allDataAvailable) {\r\n        setFetchState({\r\n          error: true,\r\n        })\r\n      } else {\r\n        const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\r\n          overviewData.totalVolumeUSD,\r\n          overviewData24.totalVolumeUSD,\r\n          overviewData48.totalVolumeUSD,\r\n        )\r\n        const liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD)\r\n        // 24H transactions\r\n        const [txCount, txCountChange] = getChangeForPeriod(\r\n          overviewData.totalTransactions,\r\n          overviewData24.totalTransactions,\r\n          overviewData48.totalTransactions,\r\n        )\r\n        const protocolData: ProtocolData = {\r\n          volumeUSD,\r\n          volumeUSDChange: typeof volumeUSDChange === 'number' ? volumeUSDChange : 0,\r\n          liquidityUSD: overviewData.totalLiquidityUSD,\r\n          liquidityUSDChange,\r\n          txCount,\r\n          txCountChange,\r\n        }\r\n        setFetchState({\r\n          error: false,\r\n          data: protocolData,\r\n        })\r\n      }\r\n    }\r\n    const allBlocksAvailable = block24?.number && block48?.number\r\n    if (allBlocksAvailable && !blockError && !fetchState.data) {\r\n      fetch()\r\n    }\r\n  }, [block24, block48, blockError, fetchState])\r\n\r\n  return fetchState\r\n}\r\n\r\nexport default useFetchProtocolData\r\n","import { ONE_DAY_UNIX, PCS_V2_START } from 'config/constants/info'\r\nimport { getUnixTime } from 'date-fns'\r\nimport { TransactionType } from 'state/info/types'\r\nimport { ChartEntry } from '../types'\r\nimport { MintResponse, SwapResponse, BurnResponse, TokenDayData, PairDayData, PancakeDayData } from './types'\r\n\r\nexport const mapMints = (mint: MintResponse) => {\r\n  return {\r\n    type: TransactionType.MINT,\r\n    hash: mint.id.split('-')[0],\r\n    timestamp: mint.timestamp,\r\n    sender: mint.to,\r\n    token0Symbol: mint.pair.token0.symbol,\r\n    token1Symbol: mint.pair.token1.symbol,\r\n    token0Address: mint.pair.token0.id,\r\n    token1Address: mint.pair.token1.id,\r\n    amountUSD: parseFloat(mint.amountUSD),\r\n    amountToken0: parseFloat(mint.amount0),\r\n    amountToken1: parseFloat(mint.amount1),\r\n  }\r\n}\r\n\r\nexport const mapBurns = (burn: BurnResponse) => {\r\n  return {\r\n    type: TransactionType.BURN,\r\n    hash: burn.id.split('-')[0],\r\n    timestamp: burn.timestamp,\r\n    sender: burn.sender,\r\n    token0Symbol: burn.pair.token0.symbol,\r\n    token1Symbol: burn.pair.token1.symbol,\r\n    token0Address: burn.pair.token0.id,\r\n    token1Address: burn.pair.token1.id,\r\n    amountUSD: parseFloat(burn.amountUSD),\r\n    amountToken0: parseFloat(burn.amount0),\r\n    amountToken1: parseFloat(burn.amount1),\r\n  }\r\n}\r\n\r\nexport const mapSwaps = (swap: SwapResponse) => {\r\n  return {\r\n    type: TransactionType.SWAP,\r\n    hash: swap.id.split('-')[0],\r\n    timestamp: swap.timestamp,\r\n    sender: swap.from,\r\n    token0Symbol: swap.pair.token0.symbol,\r\n    token1Symbol: swap.pair.token1.symbol,\r\n    token0Address: swap.pair.token0.id,\r\n    token1Address: swap.pair.token1.id,\r\n    amountUSD: parseFloat(swap.amountUSD),\r\n    amountToken0: parseFloat(swap.amount0In) - parseFloat(swap.amount0Out),\r\n    amountToken1: parseFloat(swap.amount1In) - parseFloat(swap.amount1Out),\r\n  }\r\n}\r\n\r\nexport const mapDayData = (tokenDayData: TokenDayData | PancakeDayData): ChartEntry => ({\r\n  date: tokenDayData.date,\r\n  volumeUSD: parseFloat(tokenDayData.dailyVolumeUSD),\r\n  liquidityUSD: parseFloat(tokenDayData.totalLiquidityUSD),\r\n})\r\n\r\nexport const mapPairDayData = (pairDayData: PairDayData): ChartEntry => ({\r\n  date: pairDayData.date,\r\n  volumeUSD: parseFloat(pairDayData.dailyVolumeUSD),\r\n  liquidityUSD: parseFloat(pairDayData.reserveUSD),\r\n})\r\n\r\ntype PoolOrTokenFetchFn = (skip: number, address: string) => Promise<{ data?: ChartEntry[]; error: boolean }>\r\ntype OverviewFetchFn = (skip: number) => Promise<{ data?: ChartEntry[]; error: boolean }>\r\n\r\n// Common helper function to retrieve chart data\r\n// Used for both Pool and Token charts\r\nexport const fetchChartData = async (\r\n  getEntityDayDatas: PoolOrTokenFetchFn | OverviewFetchFn,\r\n  address?: string,\r\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  let chartEntries: ChartEntry[] = []\r\n  let error = false\r\n  let skip = 0\r\n  let allFound = false\r\n\r\n  while (!allFound) {\r\n    // eslint-disable-next-line no-await-in-loop\r\n    const { data, error: fetchError } = await getEntityDayDatas(skip, address)\r\n    skip += 1000\r\n    allFound = data.length < 1000\r\n    error = fetchError\r\n    if (data) {\r\n      chartEntries = chartEntries.concat(data)\r\n    }\r\n  }\r\n\r\n  if (error || chartEntries.length === 0) {\r\n    return {\r\n      error: true,\r\n    }\r\n  }\r\n\r\n  const formattedDayDatas = chartEntries.reduce((accum: { [date: number]: ChartEntry }, dayData) => {\r\n    // At this stage we track unix day ordinal for each data point to check for empty days later\r\n    const dayOrdinal = parseInt((dayData.date / ONE_DAY_UNIX).toFixed(0))\r\n    return {\r\n      [dayOrdinal]: dayData,\r\n      ...accum,\r\n    }\r\n  }, {})\r\n\r\n  const availableDays = Object.keys(formattedDayDatas).map((dayOrdinal) => parseInt(dayOrdinal, 10))\r\n\r\n  const firstAvailableDayData = formattedDayDatas[availableDays[0]]\r\n  // fill in empty days ( there will be no day datas if no trades made that day )\r\n  let timestamp = firstAvailableDayData?.date ?? PCS_V2_START\r\n  let latestLiquidityUSD = firstAvailableDayData?.liquidityUSD ?? 0\r\n  const endTimestamp = getUnixTime(new Date())\r\n  while (timestamp < endTimestamp - ONE_DAY_UNIX) {\r\n    timestamp += ONE_DAY_UNIX\r\n    const dayOrdinal = parseInt((timestamp / ONE_DAY_UNIX).toFixed(0), 10)\r\n    if (!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())) {\r\n      formattedDayDatas[dayOrdinal] = {\r\n        date: timestamp,\r\n        volumeUSD: 0,\r\n        liquidityUSD: latestLiquidityUSD,\r\n      }\r\n    } else {\r\n      latestLiquidityUSD = formattedDayDatas[dayOrdinal].liquidityUSD\r\n    }\r\n  }\r\n\r\n  return {\r\n    data: Object.values(formattedDayDatas),\r\n    error: false,\r\n  }\r\n}\r\n","import React, { useMemo, useState } from 'react'\r\nimport { Text, Box, Card, Flex, Skeleton } from '@pancakeswap/uikit'\r\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\r\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\r\nimport CandleChart from 'views/Info/components/InfoCharts/CandleChart'\r\nimport { TabToggleGroup, TabToggle } from 'components/TabToggle'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { ChartEntry, TokenData, PriceChartEntry } from 'state/info/types'\r\nimport { fromUnixTime } from 'date-fns'\r\n\r\nenum ChartView {\r\n  LIQUIDITY,\r\n  VOLUME,\r\n  PRICE,\r\n}\r\n\r\ninterface ChartCardProps {\r\n  variant: 'pool' | 'token'\r\n  chartData: ChartEntry[]\r\n  tokenData?: TokenData\r\n  tokenPriceData?: PriceChartEntry[]\r\n}\r\n\r\nconst ChartCard: React.FC<ChartCardProps> = ({ variant, chartData, tokenData, tokenPriceData }) => {\r\n  const [view, setView] = useState(ChartView.VOLUME)\r\n  const [hoverValue, setHoverValue] = useState<number | undefined>()\r\n  const [hoverDate, setHoverDate] = useState<string | undefined>()\r\n  const {\r\n    t,\r\n    currentLanguage: { locale },\r\n  } = useTranslation()\r\n\r\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\r\n\r\n  const formattedTvlData = useMemo(() => {\r\n    if (chartData) {\r\n      return chartData.map((day) => {\r\n        return {\r\n          time: fromUnixTime(day.date),\r\n          value: day.liquidityUSD,\r\n        }\r\n      })\r\n    }\r\n    return []\r\n  }, [chartData])\r\n  const formattedVolumeData = useMemo(() => {\r\n    if (chartData) {\r\n      return chartData.map((day) => {\r\n        return {\r\n          time: fromUnixTime(day.date),\r\n          value: day.volumeUSD,\r\n        }\r\n      })\r\n    }\r\n    return []\r\n  }, [chartData])\r\n\r\n  const getLatestValueDisplay = () => {\r\n    let valueToDisplay = null\r\n    if (hoverValue) {\r\n      valueToDisplay = formatAmount(hoverValue)\r\n    } else if (view === ChartView.VOLUME && formattedVolumeData.length > 0) {\r\n      valueToDisplay = formatAmount(formattedVolumeData[formattedVolumeData.length - 1]?.value)\r\n    } else if (view === ChartView.LIQUIDITY && formattedTvlData.length > 0) {\r\n      valueToDisplay = formatAmount(formattedTvlData[formattedTvlData.length - 1]?.value)\r\n    } else if (view === ChartView.PRICE && tokenData?.priceUSD) {\r\n      valueToDisplay = formatAmount(tokenData.priceUSD)\r\n    }\r\n\r\n    return valueToDisplay ? (\r\n      <Text fontSize=\"24px\" bold>\r\n        ${valueToDisplay}\r\n      </Text>\r\n    ) : (\r\n      <Skeleton height=\"36px\" width=\"128px\" />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <TabToggleGroup>\r\n        <TabToggle isActive={view === ChartView.VOLUME} onClick={() => setView(ChartView.VOLUME)}>\r\n          <Text>{t('Volume')}</Text>\r\n        </TabToggle>\r\n        <TabToggle isActive={view === ChartView.LIQUIDITY} onClick={() => setView(ChartView.LIQUIDITY)}>\r\n          <Text>{t('Liquidity')}</Text>\r\n        </TabToggle>\r\n        {variant === 'token' && (\r\n          <TabToggle isActive={view === ChartView.PRICE} onClick={() => setView(ChartView.PRICE)}>\r\n            <Text>{t('Price')}</Text>\r\n          </TabToggle>\r\n        )}\r\n      </TabToggleGroup>\r\n\r\n      <Flex flexDirection=\"column\" px=\"24px\" pt=\"24px\">\r\n        {getLatestValueDisplay()}\r\n        <Text small color=\"secondary\">\r\n          {hoverDate || currentDate}\r\n        </Text>\r\n      </Flex>\r\n\r\n      <Box px=\"24px\" height={variant === 'token' ? '250px' : '335px'}>\r\n        {view === ChartView.LIQUIDITY ? (\r\n          <LineChart data={formattedTvlData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\r\n        ) : view === ChartView.VOLUME ? (\r\n          <BarChart data={formattedVolumeData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\r\n        ) : view === ChartView.PRICE ? (\r\n          <CandleChart data={tokenPriceData} setValue={setHoverValue} setLabel={setHoverDate} />\r\n        ) : null}\r\n      </Box>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ChartCard\r\n","/* eslint-disable no-await-in-loop */\r\nimport { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { PCS_V2_START } from 'config/constants/info'\r\nimport { ChartEntry } from 'state/info/types'\r\nimport { PancakeDayDatasResponse } from '../types'\r\nimport { fetchChartData, mapDayData } from '../helpers'\r\n\r\n/**\r\n * Data for displaying Liquidity and Volume charts on Overview page\r\n */\r\nconst PANCAKE_DAY_DATAS = gql`\r\n  query overviewCharts($startTime: Int!, $skip: Int!) {\r\n    pancakeDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\r\n      date\r\n      dailyVolumeUSD\r\n      totalLiquidityUSD\r\n    }\r\n  }\r\n`\r\n\r\nconst getOverviewChartData = async (skip: number): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  try {\r\n    const { pancakeDayDatas } = await request<PancakeDayDatasResponse>(INFO_CLIENT, PANCAKE_DAY_DATAS, {\r\n      startTime: PCS_V2_START,\r\n      skip,\r\n    })\r\n    const data = pancakeDayDatas.map(mapDayData)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch overview chart data', error)\r\n    return { error: true }\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch historic chart data\r\n */\r\nconst useFetchGlobalChartData = (): {\r\n  error: boolean\r\n  data: ChartEntry[] | undefined\r\n} => {\r\n  const [overviewChartData, setOverviewChartData] = useState<ChartEntry[] | undefined>()\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { data } = await fetchChartData(getOverviewChartData)\r\n      if (data) {\r\n        setOverviewChartData(data)\r\n      } else {\r\n        setError(true)\r\n      }\r\n    }\r\n    if (!overviewChartData && !error) {\r\n      fetch()\r\n    }\r\n  }, [overviewChartData, error])\r\n\r\n  return {\r\n    error,\r\n    data: overviewChartData,\r\n  }\r\n}\r\n\r\nexport default useFetchGlobalChartData\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { Transaction } from 'state/info/types'\r\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\r\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\r\n\r\n/**\r\n * Transactions for Transaction table on the Home page\r\n */\r\nconst GLOBAL_TRANSACTIONS = gql`\r\n  query overviewTransactions {\r\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      from\r\n      amount0In\r\n      amount1In\r\n      amount0Out\r\n      amount1Out\r\n      amountUSD\r\n    }\r\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n  }\r\n`\r\ninterface TransactionResults {\r\n  mints: MintResponse[]\r\n  swaps: SwapResponse[]\r\n  burns: BurnResponse[]\r\n}\r\n\r\nconst fetchTopTransactions = async (): Promise<Transaction[] | undefined> => {\r\n  try {\r\n    const data = await request<TransactionResults>(INFO_CLIENT, GLOBAL_TRANSACTIONS)\r\n\r\n    if (!data) {\r\n      return undefined\r\n    }\r\n\r\n    const mints = data.mints.map(mapMints)\r\n    const burns = data.burns.map(mapBurns)\r\n    const swaps = data.swaps.map(mapSwaps)\r\n\r\n    return [...mints, ...burns, ...swaps].sort((a, b) => {\r\n      return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10)\r\n    })\r\n  } catch {\r\n    return undefined\r\n  }\r\n}\r\n\r\nexport default fetchTopTransactions\r\n","import { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\n\r\ninterface TopPoolsResponse {\r\n  pairDayDatas: {\r\n    id: string\r\n  }[]\r\n}\r\n\r\n/**\r\n * Initial pools to display on the home page\r\n */\r\nconst fetchTopPools = async (timestamp24hAgo: number): Promise<string[]> => {\r\n  try {\r\n    const query = gql`\r\n      query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\r\n        pairDayDatas(\r\n          first: 30\r\n          where: { dailyTxns_gt: 300, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\r\n          orderBy: dailyVolumeUSD\r\n          orderDirection: desc\r\n        ) {\r\n          id\r\n        }\r\n      }\r\n    `\r\n    const data = await request<TopPoolsResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\r\n    // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\r\n    return data.pairDayDatas.map((p) => p.id.split('-')[0])\r\n  } catch (error) {\r\n    console.error('Failed to fetch top pools', error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch top addresses by volume\r\n */\r\nconst useTopPoolAddresses = (): string[] => {\r\n  const [topPoolAddresses, setTopPoolAddresses] = useState([])\r\n  const [timestamp24hAgo] = getDeltaTimestamps()\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const addresses = await fetchTopPools(timestamp24hAgo)\r\n      setTopPoolAddresses(addresses)\r\n    }\r\n    if (topPoolAddresses.length === 0) {\r\n      fetch()\r\n    }\r\n  }, [topPoolAddresses, timestamp24hAgo])\r\n\r\n  return topPoolAddresses\r\n}\r\n\r\nexport default useTopPoolAddresses\r\n","/* eslint-disable no-param-reassign */\r\nimport { useEffect, useState } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\r\nimport { PoolData } from 'state/info/types'\r\nimport { getChangeForPeriod, getLpFeesAndApr, getPercentChange } from 'views/Info/utils/infoDataHelpers'\r\n\r\ninterface PoolFields {\r\n  id: string\r\n  reserve0: string\r\n  reserve1: string\r\n  reserveUSD: string\r\n  volumeUSD: string\r\n  token0Price: string\r\n  token1Price: string\r\n  token0: {\r\n    id: string\r\n    symbol: string\r\n    name: string\r\n  }\r\n  token1: {\r\n    id: string\r\n    symbol: string\r\n    name: string\r\n  }\r\n}\r\n\r\ninterface FormattedPoolFields\r\n  extends Omit<PoolFields, 'volumeUSD' | 'reserveUSD' | 'reserve0' | 'reserve1' | 'token0Price' | 'token1Price'> {\r\n  volumeUSD: number\r\n  reserveUSD: number\r\n  reserve0: number\r\n  reserve1: number\r\n  token0Price: number\r\n  token1Price: number\r\n}\r\n\r\ninterface PoolsQueryResponse {\r\n  now: PoolFields[]\r\n  oneDayAgo: PoolFields[]\r\n  twoDaysAgo: PoolFields[]\r\n  oneWeekAgo: PoolFields[]\r\n  twoWeeksAgo: PoolFields[]\r\n}\r\n\r\n/**\r\n * Data for displaying pool tables (on multiple pages, used throughout the site)\r\n * Note: Don't try to refactor it to use variables, server throws error if blocks passed as undefined variable\r\n * only works if its hard-coded into query string\r\n */\r\nconst POOL_AT_BLOCK = (block: number | null, pools: string[]) => {\r\n  const blockString = block ? `block: {number: ${block}}` : ``\r\n  const addressesString = `[\"${pools.join('\",\"')}\"]`\r\n  return `pairs(\r\n    where: { id_in: ${addressesString} }\r\n    ${blockString}\r\n    orderBy: trackedReserveBNB\r\n    orderDirection: desc\r\n  ) {\r\n    id\r\n    reserve0\r\n    reserve1\r\n    reserveUSD\r\n    volumeUSD\r\n    token0Price\r\n    token1Price\r\n    token0 {\r\n      id\r\n      symbol\r\n      name\r\n    }\r\n    token1 {\r\n      id\r\n      symbol\r\n      name\r\n    }\r\n  }`\r\n}\r\n\r\nconst fetchPoolData = async (\r\n  block24h: number,\r\n  block48h: number,\r\n  block7d: number,\r\n  block14d: number,\r\n  poolAddresses: string[],\r\n) => {\r\n  try {\r\n    const query = gql`\r\n      query pools {\r\n        now: ${POOL_AT_BLOCK(null, poolAddresses)}\r\n        oneDayAgo: ${POOL_AT_BLOCK(block24h, poolAddresses)}\r\n        twoDaysAgo: ${POOL_AT_BLOCK(block48h, poolAddresses)}\r\n        oneWeekAgo: ${POOL_AT_BLOCK(block7d, poolAddresses)}\r\n        twoWeeksAgo: ${POOL_AT_BLOCK(block14d, poolAddresses)}\r\n      }\r\n    `\r\n    const data = await request<PoolsQueryResponse>(INFO_CLIENT, query)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch pool data', error)\r\n    return { error: true }\r\n  }\r\n}\r\n\r\n// Transforms pools into \"0xADDRESS: { ...PoolFields }\" format and cast strings to numbers\r\nconst parsePoolData = (pairs?: PoolFields[]) => {\r\n  if (!pairs) {\r\n    return {}\r\n  }\r\n  return pairs.reduce((accum: { [address: string]: FormattedPoolFields }, poolData) => {\r\n    const { volumeUSD, reserveUSD, reserve0, reserve1, token0Price, token1Price } = poolData\r\n    accum[poolData.id] = {\r\n      ...poolData,\r\n      volumeUSD: parseFloat(volumeUSD),\r\n      reserveUSD: parseFloat(reserveUSD),\r\n      reserve0: parseFloat(reserve0),\r\n      reserve1: parseFloat(reserve1),\r\n      token0Price: parseFloat(token0Price),\r\n      token1Price: parseFloat(token1Price),\r\n    }\r\n    return accum\r\n  }, {})\r\n}\r\n\r\ninterface PoolDatas {\r\n  error: boolean\r\n  data?: {\r\n    [address: string]: PoolData\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch top pools by liquidity\r\n */\r\nconst usePoolDatas = (poolAddresses: string[]): PoolDatas => {\r\n  const [fetchState, setFetchState] = useState<PoolDatas>({ error: false })\r\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\r\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\r\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error, data } = await fetchPoolData(\r\n        block24h.number,\r\n        block48h.number,\r\n        block7d.number,\r\n        block14d.number,\r\n        poolAddresses,\r\n      )\r\n      if (error) {\r\n        setFetchState({ error: true })\r\n      } else {\r\n        const formattedPoolData = parsePoolData(data?.now)\r\n        const formattedPoolData24h = parsePoolData(data?.oneDayAgo)\r\n        const formattedPoolData48h = parsePoolData(data?.twoDaysAgo)\r\n        const formattedPoolData7d = parsePoolData(data?.oneWeekAgo)\r\n        const formattedPoolData14d = parsePoolData(data?.twoWeeksAgo)\r\n\r\n        // Calculate data and format\r\n        const formatted = poolAddresses.reduce((accum: { [address: string]: PoolData }, address) => {\r\n          // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\r\n          const current: FormattedPoolFields | undefined = formattedPoolData[address]\r\n          const oneDay: FormattedPoolFields | undefined = formattedPoolData24h[address]\r\n          const twoDays: FormattedPoolFields | undefined = formattedPoolData48h[address]\r\n          const week: FormattedPoolFields | undefined = formattedPoolData7d[address]\r\n          const twoWeeks: FormattedPoolFields | undefined = formattedPoolData14d[address]\r\n\r\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\r\n            current?.volumeUSD,\r\n            oneDay?.volumeUSD,\r\n            twoDays?.volumeUSD,\r\n          )\r\n          const [volumeUSDWeek, volumeUSDChangeWeek] = getChangeForPeriod(\r\n            current?.volumeUSD,\r\n            week?.volumeUSD,\r\n            twoWeeks?.volumeUSD,\r\n          )\r\n\r\n          const liquidityUSD = current ? current.reserveUSD : 0\r\n\r\n          const liquidityUSDChange = getPercentChange(current?.reserveUSD, oneDay?.reserveUSD)\r\n\r\n          const liquidityToken0 = current ? current.reserve0 : 0\r\n          const liquidityToken1 = current ? current.reserve1 : 0\r\n\r\n          const { totalFees24h, totalFees7d, lpFees24h, lpFees7d, lpApr7d } = getLpFeesAndApr(\r\n            volumeUSD,\r\n            volumeUSDWeek,\r\n            liquidityUSD,\r\n          )\r\n\r\n          if (current) {\r\n            accum[address] = {\r\n              address,\r\n              token0: {\r\n                address: current.token0.id,\r\n                name: current.token0.name,\r\n                symbol: current.token0.symbol,\r\n              },\r\n              token1: {\r\n                address: current.token1.id,\r\n                name: current.token1.name,\r\n                symbol: current.token1.symbol,\r\n              },\r\n              token0Price: current.token0Price,\r\n              token1Price: current.token1Price,\r\n              volumeUSD,\r\n              volumeUSDChange,\r\n              volumeUSDWeek,\r\n              volumeUSDChangeWeek,\r\n              totalFees24h,\r\n              totalFees7d,\r\n              lpFees24h,\r\n              lpFees7d,\r\n              lpApr7d,\r\n              liquidityUSD,\r\n              liquidityUSDChange,\r\n              liquidityToken0,\r\n              liquidityToken1,\r\n            }\r\n          }\r\n\r\n          return accum\r\n        }, {})\r\n        setFetchState({ data: formatted, error: false })\r\n      }\r\n    }\r\n\r\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\r\n    if (poolAddresses.length > 0 && allBlocksAvailable && !blockError) {\r\n      fetch()\r\n    }\r\n  }, [poolAddresses, block24h, block48h, block7d, block14d, blockError])\r\n\r\n  return fetchState\r\n}\r\n\r\nexport default usePoolDatas\r\n","import { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\nimport { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\n\r\nexport interface BnbPrices {\r\n  current: number\r\n  oneDay: number\r\n  twoDay: number\r\n  week: number\r\n}\r\n\r\nconst BNB_PRICES = gql`\r\n  query prices($block24: Int!, $block48: Int!, $blockWeek: Int!) {\r\n    current: bundle(id: \"1\") {\r\n      bnbPrice\r\n    }\r\n    oneDay: bundle(id: \"1\", block: { number: $block24 }) {\r\n      bnbPrice\r\n    }\r\n    twoDay: bundle(id: \"1\", block: { number: $block48 }) {\r\n      bnbPrice\r\n    }\r\n    oneWeek: bundle(id: \"1\", block: { number: $blockWeek }) {\r\n      bnbPrice\r\n    }\r\n  }\r\n`\r\n\r\ninterface PricesResponse {\r\n  current: {\r\n    bnbPrice: string\r\n  }\r\n  oneDay: {\r\n    bnbPrice: string\r\n  }\r\n  twoDay: {\r\n    bnbPrice: string\r\n  }\r\n  oneWeek: {\r\n    bnbPrice: string\r\n  }\r\n}\r\n\r\nconst fetchBnbPrices = async (\r\n  block24: number,\r\n  block48: number,\r\n  blockWeek: number,\r\n): Promise<{ bnbPrices: BnbPrices | undefined; error: boolean }> => {\r\n  try {\r\n    const data = await request<PricesResponse>(INFO_CLIENT, BNB_PRICES, {\r\n      block24,\r\n      block48,\r\n      blockWeek,\r\n    })\r\n    return {\r\n      error: false,\r\n      bnbPrices: {\r\n        current: parseFloat(data.current?.bnbPrice ?? '0'),\r\n        oneDay: parseFloat(data.oneDay?.bnbPrice ?? '0'),\r\n        twoDay: parseFloat(data.twoDay?.bnbPrice ?? '0'),\r\n        week: parseFloat(data.oneWeek?.bnbPrice ?? '0'),\r\n      },\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to fetch BNB prices', error)\r\n    return {\r\n      error: true,\r\n      bnbPrices: undefined,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returns BNB prices at current, 24h, 48h, and 7d intervals\r\n */\r\nexport const useBnbPrices = (): BnbPrices | undefined => {\r\n  const [prices, setPrices] = useState<BnbPrices | undefined>()\r\n  const [error, setError] = useState(false)\r\n\r\n  const [t24, t48, tWeek] = getDeltaTimestamps()\r\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48, tWeek])\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const [block24, block48, blockWeek] = blocks\r\n      const { bnbPrices, error: fetchError } = await fetchBnbPrices(block24.number, block48.number, blockWeek.number)\r\n      if (fetchError) {\r\n        setError(true)\r\n      } else {\r\n        setPrices(bnbPrices)\r\n      }\r\n    }\r\n    if (!prices && !error && blocks && !blockError) {\r\n      fetch()\r\n    }\r\n  }, [error, prices, blocks, blockError])\r\n\r\n  return prices\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\r\nimport { getPercentChange, getChangeForPeriod, getAmountChange } from 'views/Info/utils/infoDataHelpers'\r\nimport { TokenData } from 'state/info/types'\r\nimport { useBnbPrices } from 'views/Info/hooks/useBnbPrices'\r\n\r\ninterface TokenFields {\r\n  id: string\r\n  symbol: string\r\n  name: string\r\n  derivedBNB: string // Price in BNB per token\r\n  derivedUSD: string // Price in USD per token\r\n  tradeVolumeUSD: string\r\n  totalTransactions: string\r\n  totalLiquidity: string\r\n}\r\n\r\ninterface FormattedTokenFields\r\n  extends Omit<TokenFields, 'derivedBNB' | 'derivedUSD' | 'tradeVolumeUSD' | 'totalTransactions' | 'totalLiquidity'> {\r\n  derivedBNB: number\r\n  derivedUSD: number\r\n  tradeVolumeUSD: number\r\n  totalTransactions: number\r\n  totalLiquidity: number\r\n}\r\n\r\ninterface TokenQueryResponse {\r\n  now: TokenFields[]\r\n  oneDayAgo: TokenFields[]\r\n  twoDaysAgo: TokenFields[]\r\n  oneWeekAgo: TokenFields[]\r\n  twoWeeksAgo: TokenFields[]\r\n}\r\n\r\n/**\r\n * Main token data to display on Token page\r\n */\r\nconst TOKEN_AT_BLOCK = (block: number | undefined, tokens: string[]) => {\r\n  const addressesString = `[\"${tokens.join('\",\"')}\"]`\r\n  const blockString = block ? `block: {number: ${block}}` : ``\r\n  return `tokens(\r\n      where: {id_in: ${addressesString}}\r\n      ${blockString}\r\n      orderBy: tradeVolumeUSD\r\n      orderDirection: desc\r\n    ) {\r\n      id\r\n      symbol\r\n      name\r\n      derivedBNB\r\n      derivedUSD\r\n      tradeVolumeUSD\r\n      totalTransactions\r\n      totalLiquidity\r\n    }\r\n  `\r\n}\r\n\r\nconst fetchTokenData = async (\r\n  block24h: number,\r\n  block48h: number,\r\n  block7d: number,\r\n  block14d: number,\r\n  tokenAddresses: string[],\r\n) => {\r\n  try {\r\n    const query = gql`\r\n      query tokens {\r\n        now: ${TOKEN_AT_BLOCK(null, tokenAddresses)}\r\n        oneDayAgo: ${TOKEN_AT_BLOCK(block24h, tokenAddresses)}\r\n        twoDaysAgo: ${TOKEN_AT_BLOCK(block48h, tokenAddresses)}\r\n        oneWeekAgo: ${TOKEN_AT_BLOCK(block7d, tokenAddresses)}\r\n        twoWeeksAgo: ${TOKEN_AT_BLOCK(block14d, tokenAddresses)}\r\n      }\r\n    `\r\n    const data = await request<TokenQueryResponse>(INFO_CLIENT, query)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch token data', error)\r\n    return { error: true }\r\n  }\r\n}\r\n\r\n// Transforms tokens into \"0xADDRESS: { ...TokenFields }\" format and cast strings to numbers\r\nconst parseTokenData = (tokens?: TokenFields[]) => {\r\n  if (!tokens) {\r\n    return {}\r\n  }\r\n  return tokens.reduce((accum: { [address: string]: FormattedTokenFields }, tokenData) => {\r\n    const { derivedBNB, derivedUSD, tradeVolumeUSD, totalTransactions, totalLiquidity } = tokenData\r\n    accum[tokenData.id] = {\r\n      ...tokenData,\r\n      derivedBNB: parseFloat(derivedBNB),\r\n      derivedUSD: parseFloat(derivedUSD),\r\n      tradeVolumeUSD: parseFloat(tradeVolumeUSD),\r\n      totalTransactions: parseFloat(totalTransactions),\r\n      totalLiquidity: parseFloat(totalLiquidity),\r\n    }\r\n    return accum\r\n  }, {})\r\n}\r\n\r\ninterface TokenDatas {\r\n  error: boolean\r\n  data?: {\r\n    [address: string]: TokenData\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch top addresses by volume\r\n */\r\nconst useFetchedTokenDatas = (tokenAddresses: string[]): TokenDatas => {\r\n  const [fetchState, setFetchState] = useState<TokenDatas>({ error: false })\r\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\r\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\r\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\r\n  const bnbPrices = useBnbPrices()\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error, data } = await fetchTokenData(\r\n        block24h.number,\r\n        block48h.number,\r\n        block7d.number,\r\n        block14d.number,\r\n        tokenAddresses,\r\n      )\r\n      if (error) {\r\n        setFetchState({ error: true })\r\n      } else {\r\n        const parsed = parseTokenData(data?.now)\r\n        const parsed24 = parseTokenData(data?.oneDayAgo)\r\n        const parsed48 = parseTokenData(data?.twoDaysAgo)\r\n        const parsed7d = parseTokenData(data?.oneWeekAgo)\r\n        const parsed14d = parseTokenData(data?.twoWeeksAgo)\r\n\r\n        // Calculate data and format\r\n        const formatted = tokenAddresses.reduce((accum: { [address: string]: TokenData }, address) => {\r\n          const current: FormattedTokenFields | undefined = parsed[address]\r\n          const oneDay: FormattedTokenFields | undefined = parsed24[address]\r\n          const twoDays: FormattedTokenFields | undefined = parsed48[address]\r\n          const week: FormattedTokenFields | undefined = parsed7d[address]\r\n          const twoWeeks: FormattedTokenFields | undefined = parsed14d[address]\r\n\r\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\r\n            current?.tradeVolumeUSD,\r\n            oneDay?.tradeVolumeUSD,\r\n            twoDays?.tradeVolumeUSD,\r\n          )\r\n          const [volumeUSDWeek] = getChangeForPeriod(\r\n            current?.tradeVolumeUSD,\r\n            week?.tradeVolumeUSD,\r\n            twoWeeks?.tradeVolumeUSD,\r\n          )\r\n          const liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0\r\n          const liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0\r\n          const liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo)\r\n          const liquidityToken = current ? current.totalLiquidity : 0\r\n          // Prices of tokens for now, 24h ago and 7d ago\r\n          const priceUSD = current ? current.derivedBNB * bnbPrices.current : 0\r\n          const priceUSDOneDay = oneDay ? oneDay.derivedBNB * bnbPrices.oneDay : 0\r\n          const priceUSDWeek = week ? week.derivedBNB * bnbPrices.week : 0\r\n          const priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay)\r\n          const priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek)\r\n          const txCount = getAmountChange(current?.totalTransactions, oneDay?.totalTransactions)\r\n\r\n          accum[address] = {\r\n            exists: !!current,\r\n            address,\r\n            name: current ? current.name : '',\r\n            symbol: current ? current.symbol : '',\r\n            volumeUSD,\r\n            volumeUSDChange,\r\n            volumeUSDWeek,\r\n            txCount,\r\n            liquidityUSD,\r\n            liquidityUSDChange,\r\n            liquidityToken,\r\n            priceUSD,\r\n            priceUSDChange,\r\n            priceUSDChangeWeek,\r\n          }\r\n\r\n          return accum\r\n        }, {})\r\n        setFetchState({ data: formatted, error: false })\r\n      }\r\n    }\r\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\r\n    if (tokenAddresses.length > 0 && allBlocksAvailable && !blockError && bnbPrices) {\r\n      fetch()\r\n    }\r\n  }, [tokenAddresses, block24h, block48h, block7d, block14d, blockError, bnbPrices])\r\n\r\n  return fetchState\r\n}\r\n\r\nexport default useFetchedTokenDatas\r\n","import { useEffect, useState } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\r\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\r\n\r\ninterface TopTokensResponse {\r\n  tokenDayDatas: {\r\n    id: string\r\n  }[]\r\n}\r\n\r\n/**\r\n * Tokens to display on Home page\r\n * The actual data is later requested in tokenData.ts\r\n * Note: dailyTxns_gt: 300 is there to prevent fetching incorrectly priced tokens with high dailyVolumeUSD\r\n */\r\nconst fetchTopTokens = async (timestamp24hAgo: number): Promise<string[]> => {\r\n  try {\r\n    const query = gql`\r\n      query topTokens($blacklist: [String!], $timestamp24hAgo: Int) {\r\n        tokenDayDatas(\r\n          first: 30\r\n          where: { dailyTxns_gt: 300, id_not_in: $blacklist, date_gt: $timestamp24hAgo }\r\n          orderBy: dailyVolumeUSD\r\n          orderDirection: desc\r\n        ) {\r\n          id\r\n        }\r\n      }\r\n    `\r\n    const data = await request<TopTokensResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\r\n    // tokenDayDatas id has compound id \"0xTOKENADDRESS-NUMBERS\", extracting token address with .split('-')\r\n    return data.tokenDayDatas.map((t) => t.id.split('-')[0])\r\n  } catch (error) {\r\n    console.error('Failed to fetch top tokens', error)\r\n    return []\r\n  }\r\n}\r\n\r\n/**\r\n * Fetch top addresses by volume\r\n */\r\nconst useTopTokenAddresses = (): string[] => {\r\n  const [topTokenAddresses, setTopTokenAddresses] = useState([])\r\n  const [timestamp24hAgo] = getDeltaTimestamps()\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const addresses = await fetchTopTokens(timestamp24hAgo)\r\n      setTopTokenAddresses(addresses)\r\n    }\r\n    if (topTokenAddresses.length === 0) {\r\n      fetch()\r\n    }\r\n  }, [topTokenAddresses, timestamp24hAgo])\r\n\r\n  return topTokenAddresses\r\n}\r\n\r\nexport default useTopTokenAddresses\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { ChartEntry } from 'state/info/types'\r\nimport { PCS_V2_START } from 'config/constants/info'\r\nimport { PairDayDatasResponse } from '../types'\r\nimport { mapPairDayData, fetchChartData } from '../helpers'\r\n\r\nconst getPoolChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  try {\r\n    const query = gql`\r\n      query pairDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\r\n        pairDayDatas(\r\n          first: 1000\r\n          skip: $skip\r\n          where: { pairAddress: $address, date_gt: $startTime }\r\n          orderBy: date\r\n          orderDirection: asc\r\n        ) {\r\n          date\r\n          dailyVolumeUSD\r\n          reserveUSD\r\n        }\r\n      }\r\n    `\r\n    const { pairDayDatas } = await request<PairDayDatasResponse>(INFO_CLIENT, query, {\r\n      startTime: PCS_V2_START,\r\n      skip,\r\n      address,\r\n    })\r\n    const data = pairDayDatas.map(mapPairDayData)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch pool chart data', error)\r\n    return { error: true }\r\n  }\r\n}\r\n\r\nconst fetchPoolChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  return fetchChartData(getPoolChartData, address)\r\n}\r\n\r\nexport default fetchPoolChartData\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { Transaction } from 'state/info/types'\r\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\r\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\r\n/**\r\n * Transactions of the given pool, used on Pool page\r\n */\r\nconst POOL_TRANSACTIONS = gql`\r\n  query poolTransactions($address: Bytes!) {\r\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      from\r\n      amount0In\r\n      amount1In\r\n      amount0Out\r\n      amount1Out\r\n      amountUSD\r\n    }\r\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n  }\r\n`\r\n\r\ninterface TransactionResults {\r\n  mints: MintResponse[]\r\n  swaps: SwapResponse[]\r\n  burns: BurnResponse[]\r\n}\r\n\r\nconst fetchPoolTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\r\n  try {\r\n    const data = await request<TransactionResults>(INFO_CLIENT, POOL_TRANSACTIONS, {\r\n      address,\r\n    })\r\n    const mints = data.mints.map(mapMints)\r\n    const burns = data.burns.map(mapBurns)\r\n    const swaps = data.swaps.map(mapSwaps)\r\n    return { data: [...mints, ...burns, ...swaps], error: false }\r\n  } catch (error) {\r\n    console.error(`Failed to fetch transactions for pool ${address}`, error)\r\n    return {\r\n      error: true,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchPoolTransactions\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { ChartEntry } from 'state/info/types'\r\nimport { PCS_V2_START } from 'config/constants/info'\r\nimport { TokenDayDatasResponse } from '../types'\r\nimport { mapDayData, fetchChartData } from '../helpers'\r\n\r\nconst getTokenChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  try {\r\n    const query = gql`\r\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\r\n        tokenDayDatas(\r\n          first: 1000\r\n          skip: $skip\r\n          where: { token: $address, date_gt: $startTime }\r\n          orderBy: date\r\n          orderDirection: asc\r\n        ) {\r\n          date\r\n          dailyVolumeUSD\r\n          totalLiquidityUSD\r\n        }\r\n      }\r\n    `\r\n    const { tokenDayDatas } = await request<TokenDayDatasResponse>(INFO_CLIENT, query, {\r\n      startTime: PCS_V2_START,\r\n      skip,\r\n      address,\r\n    })\r\n    const data = tokenDayDatas.map(mapDayData)\r\n    return { data, error: false }\r\n  } catch (error) {\r\n    console.error('Failed to fetch token chart data', error)\r\n    return { error: true }\r\n  }\r\n}\r\n\r\nconst fetchTokenChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\r\n  return fetchChartData(getTokenChartData, address)\r\n}\r\n\r\nexport default fetchTokenChartData\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { Transaction } from 'state/info/types'\r\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\r\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\r\n\r\n/**\r\n * Data to display transaction table on Token page\r\n */\r\nconst TOKEN_TRANSACTIONS = gql`\r\n  query tokenTransactions($address: Bytes!) {\r\n    mintsAs0: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    mintsAs1: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    swapsAs0: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      from\r\n      amount0In\r\n      amount1In\r\n      amount0Out\r\n      amount1Out\r\n      amountUSD\r\n    }\r\n    swapsAs1: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      from\r\n      amount0In\r\n      amount1In\r\n      amount0Out\r\n      amount1Out\r\n      amountUSD\r\n    }\r\n    burnsAs0: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    burnsAs1: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\r\n      id\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n  }\r\n`\r\n\r\ninterface TransactionResults {\r\n  mintsAs0: MintResponse[]\r\n  mintsAs1: MintResponse[]\r\n  swapsAs0: SwapResponse[]\r\n  swapsAs1: SwapResponse[]\r\n  burnsAs0: BurnResponse[]\r\n  burnsAs1: BurnResponse[]\r\n}\r\n\r\nconst fetchTokenTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\r\n  try {\r\n    const data = await request<TransactionResults>(INFO_CLIENT, TOKEN_TRANSACTIONS, {\r\n      address,\r\n    })\r\n    const mints0 = data.mintsAs0.map(mapMints)\r\n    const mints1 = data.mintsAs1.map(mapMints)\r\n\r\n    const burns0 = data.burnsAs0.map(mapBurns)\r\n    const burns1 = data.burnsAs1.map(mapBurns)\r\n\r\n    const swaps0 = data.swapsAs0.map(mapSwaps)\r\n    const swaps1 = data.swapsAs1.map(mapSwaps)\r\n\r\n    return { data: [...mints0, ...mints1, ...burns0, ...burns1, ...swaps0, ...swaps1], error: false }\r\n  } catch (error) {\r\n    console.error(`Failed to fetch transactions for token ${address}`, error)\r\n    return {\r\n      error: true,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchTokenTransactions\r\n","import { getUnixTime } from 'date-fns'\r\nimport { gql } from 'graphql-request'\r\nimport { getBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\r\nimport { multiQuery } from 'views/Info/utils/infoQueryHelpers'\r\nimport { PriceChartEntry } from 'state/info/types'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\n\r\nconst getPriceSubqueries = (tokenAddress: string, blocks: any) =>\r\n  blocks.map(\r\n    (block: any) => `\r\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \r\n        derivedBNB\r\n      }\r\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \r\n        bnbPrice\r\n      }\r\n    `,\r\n  )\r\n\r\n/**\r\n * Price data for token and bnb based on block number\r\n */\r\nconst priceQueryConstructor = (subqueries: string[]) => {\r\n  return gql`\r\n    query tokenPriceData {\r\n      ${subqueries}\r\n    }\r\n  `\r\n}\r\n\r\nconst fetchTokenPriceData = async (\r\n  address: string,\r\n  interval: number,\r\n  startTimestamp: number,\r\n): Promise<{\r\n  data?: PriceChartEntry[]\r\n  error: boolean\r\n}> => {\r\n  // Construct timestamps to query against\r\n  const endTimestamp = getUnixTime(new Date())\r\n  const timestamps = []\r\n  let time = startTimestamp\r\n  while (time <= endTimestamp) {\r\n    timestamps.push(time)\r\n    time += interval\r\n  }\r\n  try {\r\n    const blocks = await getBlocksFromTimestamps(timestamps, 'asc', 500)\r\n    if (!blocks || blocks.length === 0) {\r\n      console.error('Error fetching blocks for timestamps', timestamps)\r\n      return {\r\n        error: false,\r\n      }\r\n    }\r\n\r\n    const prices: any | undefined = await multiQuery(\r\n      priceQueryConstructor,\r\n      getPriceSubqueries(address, blocks),\r\n      INFO_CLIENT,\r\n      200,\r\n    )\r\n\r\n    if (!prices) {\r\n      console.error('Price data failed to load')\r\n      return {\r\n        error: false,\r\n      }\r\n    }\r\n\r\n    // format token BNB price results\r\n    const tokenPrices: {\r\n      timestamp: string\r\n      derivedBNB: number\r\n      priceUSD: number\r\n    }[] = []\r\n\r\n    // Get Token prices in BNB\r\n    Object.keys(prices).forEach((priceKey) => {\r\n      const timestamp = priceKey.split('t')[1]\r\n      // if its BNB price e.g. `b123` split('t')[1] will be undefined and skip BNB price entry\r\n      if (timestamp) {\r\n        tokenPrices.push({\r\n          timestamp,\r\n          derivedBNB: prices[priceKey]?.derivedBNB ? parseFloat(prices[priceKey].derivedBNB) : 0,\r\n          priceUSD: 0,\r\n        })\r\n      }\r\n    })\r\n\r\n    // Go through BNB USD prices and calculate Token price based on it\r\n    Object.keys(prices).forEach((priceKey) => {\r\n      const timestamp = priceKey.split('b')[1]\r\n      // if its Token price e.g. `t123` split('b')[1] will be undefined and skip Token price entry\r\n      if (timestamp) {\r\n        const tokenPriceIndex = tokenPrices.findIndex((tokenPrice) => tokenPrice.timestamp === timestamp)\r\n        if (tokenPriceIndex >= 0) {\r\n          const { derivedBNB } = tokenPrices[tokenPriceIndex]\r\n          tokenPrices[tokenPriceIndex].priceUSD = parseFloat(prices[priceKey]?.bnbPrice ?? 0) * derivedBNB\r\n        }\r\n      }\r\n    })\r\n\r\n    // graphql-request does not guarantee same ordering of batched requests subqueries, hence sorting by timestamp from oldest to newest\r\n    tokenPrices.sort((a, b) => parseInt(a.timestamp, 10) - parseInt(b.timestamp, 10))\r\n\r\n    const formattedHistory = []\r\n\r\n    // for each timestamp, construct the open and close price\r\n    for (let i = 0; i < tokenPrices.length - 1; i++) {\r\n      formattedHistory.push({\r\n        time: parseFloat(tokenPrices[i].timestamp),\r\n        open: tokenPrices[i].priceUSD,\r\n        close: tokenPrices[i + 1].priceUSD,\r\n        high: tokenPrices[i + 1].priceUSD,\r\n        low: tokenPrices[i].priceUSD,\r\n      })\r\n    }\r\n\r\n    return { data: formattedHistory, error: false }\r\n  } catch (error) {\r\n    console.error(`Failed to fetch price data for token ${address}`, error)\r\n    return {\r\n      error: true,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchTokenPriceData\r\n","import { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\r\n\r\n/**\r\n * Data for showing Pools table on the Token page\r\n */\r\nconst POOLS_FOR_TOKEN = gql`\r\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\r\n    asToken0: pairs(\r\n      first: 15\r\n      orderBy: trackedReserveBNB\r\n      orderDirection: desc\r\n      where: { totalTransactions_gt: 100, token0: $address, token1_not_in: $blacklist }\r\n    ) {\r\n      id\r\n    }\r\n    asToken1: pairs(\r\n      first: 15\r\n      orderBy: trackedReserveBNB\r\n      orderDirection: desc\r\n      where: { totalTransactions_gt: 100, token1: $address, token0_not_in: $blacklist }\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\ninterface PoolsForTokenResponse {\r\n  asToken0: {\r\n    id: string\r\n  }[]\r\n  asToken1: {\r\n    id: string\r\n  }[]\r\n}\r\n\r\nconst fetchPoolsForToken = async (\r\n  address: string,\r\n): Promise<{\r\n  error: boolean\r\n  addresses?: string[]\r\n}> => {\r\n  try {\r\n    const data = await request<PoolsForTokenResponse>(INFO_CLIENT, POOLS_FOR_TOKEN, {\r\n      address,\r\n      blacklist: TOKEN_BLACKLIST,\r\n    })\r\n    return {\r\n      error: false,\r\n      addresses: data.asToken0.concat(data.asToken1).map((p) => p.id),\r\n    }\r\n  } catch (error) {\r\n    console.error(`Failed to fetch pools for token ${address}`, error)\r\n    return {\r\n      error: true,\r\n    }\r\n  }\r\n}\r\n\r\nexport default fetchPoolsForToken\r\n","import { useCallback, useEffect, useState, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getUnixTime, startOfHour, Duration, sub } from 'date-fns'\r\nimport { AppState, AppDispatch } from 'state'\r\nimport { isAddress } from 'utils'\r\nimport { Transaction } from 'state/info/types'\r\nimport fetchPoolChartData from 'state/info/queries/pools/chartData'\r\nimport fetchPoolTransactions from 'state/info/queries/pools/transactions'\r\nimport fetchTokenChartData from 'state/info/queries/tokens/chartData'\r\nimport fetchTokenTransactions from 'state/info/queries/tokens/transactions'\r\nimport fetchTokenPriceData from 'state/info/queries/tokens/priceData'\r\nimport fetchPoolsForToken from 'state/info/queries/tokens/poolsForToken'\r\nimport {\r\n  updateProtocolData,\r\n  updateProtocolChartData,\r\n  updateProtocolTransactions,\r\n  updatePoolData,\r\n  addPoolKeys,\r\n  updatePoolChartData,\r\n  updatePoolTransactions,\r\n  updateTokenData,\r\n  addTokenKeys,\r\n  addTokenPoolAddresses,\r\n  updateTokenChartData,\r\n  updateTokenPriceData,\r\n  updateTokenTransactions,\r\n} from './actions'\r\nimport { ProtocolData, PoolData, TokenData, ChartEntry, PriceChartEntry } from './types'\r\n\r\n// Protocol hooks\r\n\r\nexport const useProtocolData = (): [ProtocolData | undefined, (protocolData: ProtocolData) => void] => {\r\n  const protocolData: ProtocolData | undefined = useSelector((state: AppState) => state.info.protocol.overview)\r\n\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const setProtocolData: (protocolData: ProtocolData) => void = useCallback(\r\n    (data: ProtocolData) => dispatch(updateProtocolData({ protocolData: data })),\r\n    [dispatch],\r\n  )\r\n\r\n  return [protocolData, setProtocolData]\r\n}\r\n\r\nexport const useProtocolChartData = (): [ChartEntry[] | undefined, (chartData: ChartEntry[]) => void] => {\r\n  const chartData: ChartEntry[] | undefined = useSelector((state: AppState) => state.info.protocol.chartData)\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const setChartData: (chartData: ChartEntry[]) => void = useCallback(\r\n    (data: ChartEntry[]) => dispatch(updateProtocolChartData({ chartData: data })),\r\n    [dispatch],\r\n  )\r\n  return [chartData, setChartData]\r\n}\r\n\r\nexport const useProtocolTransactions = (): [Transaction[] | undefined, (transactions: Transaction[]) => void] => {\r\n  const transactions: Transaction[] | undefined = useSelector((state: AppState) => state.info.protocol.transactions)\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const setTransactions: (transactions: Transaction[]) => void = useCallback(\r\n    (transactionsData: Transaction[]) => dispatch(updateProtocolTransactions({ transactions: transactionsData })),\r\n    [dispatch],\r\n  )\r\n  return [transactions, setTransactions]\r\n}\r\n\r\n// Pools hooks\r\n\r\nexport const useAllPoolData = (): {\r\n  [address: string]: { data?: PoolData }\r\n} => {\r\n  return useSelector((state: AppState) => state.info.pools.byAddress)\r\n}\r\n\r\nexport const useUpdatePoolData = (): ((pools: PoolData[]) => void) => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback((pools: PoolData[]) => dispatch(updatePoolData({ pools })), [dispatch])\r\n}\r\n\r\nexport const useAddPoolKeys = (): ((addresses: string[]) => void) => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback((poolAddresses: string[]) => dispatch(addPoolKeys({ poolAddresses })), [dispatch])\r\n}\r\n\r\nexport const usePoolDatas = (poolAddresses: string[]): PoolData[] => {\r\n  const allPoolData = useAllPoolData()\r\n  const addNewPoolKeys = useAddPoolKeys()\r\n\r\n  const untrackedAddresses = poolAddresses.reduce((accum: string[], address) => {\r\n    if (!Object.keys(allPoolData).includes(address)) {\r\n      accum.push(address)\r\n    }\r\n    return accum\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (untrackedAddresses) {\r\n      addNewPoolKeys(untrackedAddresses)\r\n    }\r\n  }, [addNewPoolKeys, untrackedAddresses])\r\n\r\n  const poolsWithData = poolAddresses\r\n    .map((address) => {\r\n      return allPoolData[address]?.data\r\n    })\r\n    .filter((pool) => pool)\r\n\r\n  return poolsWithData\r\n}\r\n\r\nexport const usePoolChartData = (address: string): ChartEntry[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\r\n  const chartData = pool?.chartData\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error: fetchError, data } = await fetchPoolChartData(address)\r\n      if (!fetchError && data) {\r\n        dispatch(updatePoolChartData({ poolAddress: address, chartData: data }))\r\n      }\r\n      if (fetchError) {\r\n        setError(fetchError)\r\n      }\r\n    }\r\n    if (!chartData && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, chartData])\r\n\r\n  return chartData\r\n}\r\n\r\nexport const usePoolTransactions = (address: string): Transaction[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const pool = useSelector((state: AppState) => state.info.pools.byAddress[address])\r\n  const transactions = pool?.transactions\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error: fetchError, data } = await fetchPoolTransactions(address)\r\n      if (fetchError) {\r\n        setError(true)\r\n      } else {\r\n        dispatch(updatePoolTransactions({ poolAddress: address, transactions: data }))\r\n      }\r\n    }\r\n    if (!transactions && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, transactions])\r\n\r\n  return transactions\r\n}\r\n\r\n// Tokens hooks\r\n\r\nexport const useAllTokenData = (): {\r\n  [address: string]: { data?: TokenData }\r\n} => {\r\n  return useSelector((state: AppState) => state.info.tokens.byAddress)\r\n}\r\n\r\nexport const useUpdateTokenData = (): ((tokens: TokenData[]) => void) => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback(\r\n    (tokens: TokenData[]) => {\r\n      dispatch(updateTokenData({ tokens }))\r\n    },\r\n    [dispatch],\r\n  )\r\n}\r\n\r\nexport const useAddTokenKeys = (): ((addresses: string[]) => void) => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  return useCallback((tokenAddresses: string[]) => dispatch(addTokenKeys({ tokenAddresses })), [dispatch])\r\n}\r\n\r\nexport const useTokenDatas = (addresses?: string[]): TokenData[] | undefined => {\r\n  const allTokenData = useAllTokenData()\r\n  const addNewTokenKeys = useAddTokenKeys()\r\n\r\n  // if token not tracked yet track it\r\n  addresses?.forEach((a) => {\r\n    if (!allTokenData[a]) {\r\n      addNewTokenKeys([a])\r\n    }\r\n  })\r\n\r\n  const tokensWithData = useMemo(() => {\r\n    if (!addresses) {\r\n      return undefined\r\n    }\r\n    return addresses\r\n      .map((a) => {\r\n        return allTokenData[a]?.data\r\n      })\r\n      .filter((token) => token)\r\n  }, [addresses, allTokenData])\r\n\r\n  return tokensWithData\r\n}\r\n\r\nexport const useTokenData = (address: string | undefined): TokenData | undefined => {\r\n  const allTokenData = useAllTokenData()\r\n  const addNewTokenKeys = useAddTokenKeys()\r\n\r\n  if (!address || !isAddress(address)) {\r\n    return undefined\r\n  }\r\n\r\n  // if token not tracked yet track it\r\n  if (!allTokenData[address]) {\r\n    addNewTokenKeys([address])\r\n  }\r\n\r\n  return allTokenData[address]?.data\r\n}\r\n\r\nexport const usePoolsForToken = (address: string): string[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\r\n  const poolsForToken = token.poolAddresses\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error: fetchError, addresses } = await fetchPoolsForToken(address)\r\n      if (!fetchError && addresses) {\r\n        dispatch(addTokenPoolAddresses({ tokenAddress: address, poolAddresses: addresses }))\r\n      }\r\n      if (fetchError) {\r\n        setError(fetchError)\r\n      }\r\n    }\r\n    if (!poolsForToken && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, poolsForToken])\r\n\r\n  return poolsForToken\r\n}\r\n\r\nexport const useTokenChartData = (address: string): ChartEntry[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\r\n  const { chartData } = token\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error: fetchError, data } = await fetchTokenChartData(address)\r\n      if (!fetchError && data) {\r\n        dispatch(updateTokenChartData({ tokenAddress: address, chartData: data }))\r\n      }\r\n      if (fetchError) {\r\n        setError(fetchError)\r\n      }\r\n    }\r\n    if (!chartData && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, chartData])\r\n\r\n  return chartData\r\n}\r\n\r\nexport const useTokenPriceData = (\r\n  address: string,\r\n  interval: number,\r\n  timeWindow: Duration,\r\n): PriceChartEntry[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\r\n  const priceData = token?.priceData[interval]\r\n  const [error, setError] = useState(false)\r\n\r\n  // construct timestamps and check if we need to fetch more data\r\n  const oldestTimestampFetched = token?.priceData.oldestFetchedTimestamp\r\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\r\n  const startTimestamp = getUnixTime(startOfHour(sub(utcCurrentTime, timeWindow)))\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { data, error: fetchingError } = await fetchTokenPriceData(address, interval, startTimestamp)\r\n      if (data) {\r\n        dispatch(\r\n          updateTokenPriceData({\r\n            tokenAddress: address,\r\n            secondsInterval: interval,\r\n            priceData: data,\r\n            oldestFetchedTimestamp: startTimestamp,\r\n          }),\r\n        )\r\n      }\r\n      if (fetchingError) {\r\n        setError(true)\r\n      }\r\n    }\r\n    if (!priceData && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, interval, oldestTimestampFetched, priceData, startTimestamp, timeWindow])\r\n\r\n  return priceData\r\n}\r\n\r\nexport const useTokenTransactions = (address: string): Transaction[] | undefined => {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const token = useSelector((state: AppState) => state.info.tokens.byAddress[address])\r\n  const { transactions } = token\r\n  const [error, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { error: fetchError, data } = await fetchTokenTransactions(address)\r\n      if (fetchError) {\r\n        setError(true)\r\n      } else if (data) {\r\n        dispatch(updateTokenTransactions({ tokenAddress: address, transactions: data }))\r\n      }\r\n    }\r\n    if (!transactions && !error) {\r\n      fetch()\r\n    }\r\n  }, [address, dispatch, error, transactions])\r\n\r\n  return transactions\r\n}\r\n","import React, { useEffect, useMemo } from 'react'\r\nimport useFetchProtocolData from 'state/info/queries/protocol/overview'\r\nimport useFetchGlobalChartData from 'state/info/queries/protocol/chart'\r\nimport fetchTopTransactions from 'state/info/queries/protocol/transactions'\r\nimport useTopPoolAddresses from 'state/info/queries/pools/topPools'\r\nimport usePoolDatas from 'state/info/queries/pools/poolData'\r\nimport useFetchedTokenDatas from 'state/info/queries/tokens/tokenData'\r\nimport useTopTokenAddresses from 'state/info/queries/tokens/topTokens'\r\nimport {\r\n  useProtocolData,\r\n  useProtocolChartData,\r\n  useProtocolTransactions,\r\n  useUpdatePoolData,\r\n  useAllPoolData,\r\n  useAddPoolKeys,\r\n  useAllTokenData,\r\n  useUpdateTokenData,\r\n  useAddTokenKeys,\r\n} from './hooks'\r\n\r\nexport const ProtocolUpdater: React.FC = () => {\r\n  const [protocolData, setProtocolData] = useProtocolData()\r\n  const { data: fetchedProtocolData, error } = useFetchProtocolData()\r\n\r\n  const [chartData, updateChartData] = useProtocolChartData()\r\n  const { data: fetchedChartData, error: chartError } = useFetchGlobalChartData()\r\n\r\n  const [transactions, updateTransactions] = useProtocolTransactions()\r\n\r\n  // update overview data if available and not set\r\n  useEffect(() => {\r\n    if (protocolData === undefined && fetchedProtocolData && !error) {\r\n      setProtocolData(fetchedProtocolData)\r\n    }\r\n  }, [error, fetchedProtocolData, protocolData, setProtocolData])\r\n\r\n  // update global chart data if available and not set\r\n  useEffect(() => {\r\n    if (chartData === undefined && fetchedChartData && !chartError) {\r\n      updateChartData(fetchedChartData)\r\n    }\r\n  }, [chartData, chartError, fetchedChartData, updateChartData])\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const data = await fetchTopTransactions()\r\n      if (data) {\r\n        updateTransactions(data)\r\n      }\r\n    }\r\n    if (!transactions) {\r\n      fetch()\r\n    }\r\n  }, [transactions, updateTransactions])\r\n\r\n  return null\r\n}\r\n\r\nexport const PoolUpdater: React.FC = () => {\r\n  const updatePoolData = useUpdatePoolData()\r\n  const addPoolKeys = useAddPoolKeys()\r\n\r\n  const allPoolData = useAllPoolData()\r\n  const addresses = useTopPoolAddresses()\r\n\r\n  // add top pools on first load\r\n  useEffect(() => {\r\n    if (addresses.length > 0) {\r\n      addPoolKeys(addresses)\r\n    }\r\n  }, [addPoolKeys, addresses])\r\n\r\n  // detect for which addresses we havent loaded pool data yet\r\n  const unfetchedPoolAddresses = useMemo(() => {\r\n    return Object.keys(allPoolData).reduce((accum: string[], address) => {\r\n      const poolData = allPoolData[address]\r\n      if (!poolData.data) {\r\n        accum.push(address)\r\n      }\r\n      return accum\r\n    }, [])\r\n  }, [allPoolData])\r\n\r\n  // fetch data for unfetched pools and update them\r\n  const { error: poolDataError, data: poolDatas } = usePoolDatas(unfetchedPoolAddresses)\r\n  useEffect(() => {\r\n    if (poolDatas && !poolDataError) {\r\n      updatePoolData(Object.values(poolDatas))\r\n    }\r\n  }, [poolDataError, poolDatas, updatePoolData])\r\n\r\n  return null\r\n}\r\n\r\nexport const TokenUpdater = (): null => {\r\n  const updateTokenDatas = useUpdateTokenData()\r\n  const addTokenKeys = useAddTokenKeys()\r\n\r\n  const allTokenData = useAllTokenData()\r\n  const addresses = useTopTokenAddresses()\r\n\r\n  // add top tokens on first load\r\n  useEffect(() => {\r\n    if (addresses.length > 0) {\r\n      addTokenKeys(addresses)\r\n    }\r\n  }, [addTokenKeys, addresses])\r\n\r\n  // detect for which addresses we havent loaded token data yet\r\n  const unfetchedTokenAddresses = useMemo(() => {\r\n    return Object.keys(allTokenData).reduce((accum: string[], key) => {\r\n      const tokenData = allTokenData[key]\r\n      if (!tokenData.data) {\r\n        accum.push(key)\r\n      }\r\n      return accum\r\n    }, [])\r\n  }, [allTokenData])\r\n\r\n  // fetch data for unfetched tokens and update them\r\n  const { error: tokenDataError, data: tokenDatas } = useFetchedTokenDatas(unfetchedTokenAddresses)\r\n  useEffect(() => {\r\n    if (tokenDatas && !tokenDataError) {\r\n      updateTokenDatas(Object.values(tokenDatas))\r\n    }\r\n  }, [tokenDataError, tokenDatas, updateTokenDatas])\r\n\r\n  return null\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { request, gql } from 'graphql-request'\r\nimport { INFO_CLIENT } from 'config/constants/endpoints'\r\nimport { useTokenDatas, usePoolDatas } from 'state/info/hooks'\r\nimport { TokenData, PoolData } from 'state/info/types'\r\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\r\n\r\nconst TOKEN_SEARCH = gql`\r\n  query tokens($symbol: String, $name: String, $id: String) {\r\n    asSymbol: tokens(first: 10, where: { symbol_contains: $symbol }, orderBy: tradeVolumeUSD, orderDirection: desc) {\r\n      id\r\n    }\r\n    asName: tokens(first: 10, where: { name_contains: $name }, orderBy: tradeVolumeUSD, orderDirection: desc) {\r\n      id\r\n    }\r\n    asAddress: tokens(first: 1, where: { id: $id }, orderBy: tradeVolumeUSD, orderDirection: desc) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst POOL_SEARCH = gql`\r\n  query pools($tokens: [Bytes]!, $id: String) {\r\n    as0: pairs(first: 10, where: { token0_in: $tokens }) {\r\n      id\r\n    }\r\n    as1: pairs(first: 10, where: { token1_in: $tokens }) {\r\n      id\r\n    }\r\n    asAddress: pairs(first: 1, where: { id: $id }) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\ninterface SingleQueryResponse {\r\n  id: string[]\r\n}\r\n\r\ninterface TokenSearchResponse {\r\n  asSymbol: SingleQueryResponse[]\r\n  asName: SingleQueryResponse[]\r\n  asAddress: SingleQueryResponse[]\r\n}\r\ninterface PoolSearchResponse {\r\n  as0: SingleQueryResponse[]\r\n  as1: SingleQueryResponse[]\r\n  asAddress: SingleQueryResponse[]\r\n}\r\n\r\nconst getIds = (entityArrays: SingleQueryResponse[][]) => {\r\n  const ids = entityArrays\r\n    .reduce((entities, currentTokenArray) => [...entities, ...currentTokenArray], [])\r\n    .map((entity) => entity.id)\r\n  return Array.from(new Set(ids))\r\n}\r\n\r\nconst useFetchSearchResults = (\r\n  searchString: string,\r\n): {\r\n  tokens: TokenData[]\r\n  pools: PoolData[]\r\n  tokensLoading: boolean\r\n  poolsLoading: boolean\r\n  error: boolean\r\n} => {\r\n  const [searchResults, setSearchResults] = useState({\r\n    tokens: [], // Token ids found by search query\r\n    pools: [], // Pool ids found by search query\r\n    loading: false, // Search query is in progress\r\n    error: false, // GraphQL returned error\r\n  })\r\n\r\n  const searchStringTooShort = searchString.length < MINIMUM_SEARCH_CHARACTERS\r\n\r\n  // New value received, reset state\r\n  useEffect(() => {\r\n    setSearchResults({\r\n      tokens: [],\r\n      pools: [],\r\n      loading: !searchStringTooShort,\r\n      error: false,\r\n    })\r\n  }, [searchString, searchStringTooShort])\r\n\r\n  useEffect(() => {\r\n    const search = async () => {\r\n      try {\r\n        const tokens = await request<TokenSearchResponse>(INFO_CLIENT, TOKEN_SEARCH, {\r\n          symbol: searchString.toUpperCase(),\r\n          // Most well known tokens have first letter capitalized\r\n          name: searchString.charAt(0).toUpperCase() + searchString.slice(1),\r\n          id: searchString.toLowerCase(),\r\n        })\r\n        const tokenIds = getIds([tokens.asAddress, tokens.asSymbol, tokens.asName])\r\n        const pools = await request<PoolSearchResponse>(INFO_CLIENT, POOL_SEARCH, {\r\n          tokens: tokenIds,\r\n          id: searchString.toLowerCase(),\r\n        })\r\n        setSearchResults({\r\n          tokens: tokenIds,\r\n          pools: getIds([pools.asAddress, pools.as0, pools.as1]),\r\n          loading: false,\r\n          error: false,\r\n        })\r\n      } catch (error) {\r\n        console.error(`Search failed for ${searchString}`, error)\r\n        setSearchResults({\r\n          tokens: [],\r\n          pools: [],\r\n          loading: false,\r\n          error: true,\r\n        })\r\n      }\r\n    }\r\n    if (!searchStringTooShort) {\r\n      search()\r\n    }\r\n  }, [searchString, searchStringTooShort])\r\n\r\n  // Save ids to Redux\r\n  // Token and Pool updater will then go fetch full data for these addresses\r\n  // These hooks in turn will return data of tokens that have been fetched\r\n  const tokenDatasFull = useTokenDatas(searchResults.tokens)\r\n  const poolDatasFull = usePoolDatas(searchResults.pools)\r\n\r\n  // If above hooks returned not all tokens/pools it means\r\n  // that some requests for full data are in progress\r\n  const tokensLoading = tokenDatasFull.length !== searchResults.tokens.length || searchResults.loading\r\n  const poolsLoading = poolDatasFull.length !== searchResults.pools.length || searchResults.loading\r\n\r\n  return {\r\n    tokens: tokenDatasFull,\r\n    pools: poolDatasFull,\r\n    tokensLoading,\r\n    poolsLoading,\r\n    error: searchResults.error,\r\n  }\r\n}\r\n\r\nexport default useFetchSearchResults\r\n","import React, { useState } from 'react'\r\nimport { HelpIcon } from '@pancakeswap/uikit'\r\n\r\nconst BAD_SRCS: string[] = []\r\n\r\nexport interface LogoLoaderProps {\r\n  alt: string\r\n  src: string\r\n}\r\n\r\n/**\r\n * Renders an image by sequentially trying a list of URIs, and then eventually a fallback to HelpIcon\r\n */\r\nconst LogoLoader: React.FC<LogoLoaderProps> = ({ src, alt, ...rest }) => {\r\n  const [, refresh] = useState(0)\r\n\r\n  const srcFailedLoading = BAD_SRCS.includes(src)\r\n\r\n  if (src && !srcFailedLoading) {\r\n    return (\r\n      <img\r\n        {...rest}\r\n        alt={alt}\r\n        src={src}\r\n        onError={() => {\r\n          if (src) BAD_SRCS.push(src)\r\n          refresh((i) => i + 1)\r\n        }}\r\n      />\r\n    )\r\n  }\r\n\r\n  return <HelpIcon {...rest} />\r\n}\r\n\r\nexport default LogoLoader\r\n","import React, { useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { isAddress } from 'utils'\r\nimport LogoLoader from './LogoLoader'\r\n\r\nconst StyledLogo = styled(LogoLoader)<{ size: string }>`\r\n  width: ${({ size }) => size};\r\n  height: ${({ size }) => size};\r\n  border-radius: ${({ size }) => size};\r\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const CurrencyLogo: React.FC<{\r\n  address?: string\r\n  size?: string\r\n}> = ({ address, size = '24px', ...rest }) => {\r\n  const src = useMemo(() => {\r\n    const checksummedAddress = isAddress(address)\r\n    if (checksummedAddress) {\r\n      return `https://assets.trustwalletapp.com/blockchains/smartchain/assets/${checksummedAddress}/logo.png`\r\n    }\r\n    return null\r\n  }, [address])\r\n\r\n  return <StyledLogo size={size} src={src} alt=\"token logo\" {...rest} />\r\n}\r\n\r\nconst DoubleCurrencyWrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  width: 32px;\r\n`\r\n\r\ninterface DoubleCurrencyLogoProps {\r\n  address0?: string\r\n  address1?: string\r\n  size?: number\r\n}\r\n\r\nexport const DoubleCurrencyLogo: React.FC<DoubleCurrencyLogoProps> = ({ address0, address1, size = 16 }) => {\r\n  return (\r\n    <DoubleCurrencyWrapper>\r\n      {address0 && <CurrencyLogo address={address0} size={`${size.toString()}px`} />}\r\n      {address1 && <CurrencyLogo address={address1} size={`${size.toString()}px`} />}\r\n    </DoubleCurrencyWrapper>\r\n  )\r\n}\r\n","import numeral from 'numeral'\r\n\r\n// Returns first 2 digits after first non-zero decimal\r\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\r\n// Intended to be used for tokens whose value is less than $1\r\n// https://stackoverflow.com/a/23887837\r\nexport const getFirstThreeNonZeroDecimals = (value: number) => {\r\n  return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0]\r\n}\r\n\r\nexport type formatAmountNotation = 'compact' | 'standard'\r\n\r\n/**\r\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\r\n * @param amount - amount to be formatted\r\n * @param notation - whether to show 1M or 1,000,000\r\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\r\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\r\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\r\n * @returns formatted string ready to be displayed\r\n */\r\nexport const formatAmount = (\r\n  amount: number | undefined,\r\n  options?: {\r\n    notation?: formatAmountNotation\r\n    displayThreshold?: number\r\n    tokenPrecision?: boolean\r\n    isInteger?: boolean\r\n  },\r\n) => {\r\n  const { notation = 'compact', displayThreshold, tokenPrecision, isInteger } = options || { notation: 'compact' }\r\n  if (amount === 0) {\r\n    if (isInteger) {\r\n      return '0'\r\n    }\r\n    return '0.00'\r\n  }\r\n  if (!amount) return '-'\r\n  if (displayThreshold && amount < displayThreshold) {\r\n    return `<${displayThreshold}`\r\n  }\r\n  if (amount < 1 && !tokenPrecision) {\r\n    return getFirstThreeNonZeroDecimals(amount)\r\n  }\r\n\r\n  let precision = 2\r\n  if (tokenPrecision) {\r\n    precision = amount < 1 ? 3 : 2\r\n  }\r\n\r\n  let format = `0.${'0'.repeat(precision)}a`\r\n\r\n  if (notation === 'standard') {\r\n    format = `0,0.${'0'.repeat(precision)}`\r\n  }\r\n\r\n  if (isInteger && amount < 1000) {\r\n    format = '0'\r\n  }\r\n\r\n  const amountWithPrecision = parseFloat(amount.toFixed(precision))\r\n\r\n  // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\r\n  return numeral(amountWithPrecision).format(format).toUpperCase()\r\n}\r\n","import React, { HTMLAttributes } from 'react'\r\nimport styled from 'styled-components'\r\nimport { StarFillIcon, StarLineIcon } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst HoverIcon = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst SaveIcon: React.FC<{ fill: boolean } & HTMLAttributes<HTMLDivElement>> = ({ fill = false, ...rest }) => {\r\n  const { theme } = useTheme()\r\n  return (\r\n    <HoverIcon {...rest}>\r\n      {fill ? (\r\n        <StarFillIcon stroke={theme.colors.warning} color={theme.colors.warning} />\r\n      ) : (\r\n        <StarLineIcon stroke={theme.colors.textDisabled} />\r\n      )}\r\n    </HoverIcon>\r\n  )\r\n}\r\n\r\nexport default SaveIcon\r\n","import React, { useRef, useState, useEffect, useMemo } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Input, Flex, Skeleton, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport useFetchSearchResults from 'state/info/queries/search'\r\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { useWatchlistTokens, useWatchlistPools } from 'state/user/hooks'\r\nimport SaveIcon from 'views/Info/components/SaveIcon'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { usePoolDatas, useTokenDatas } from 'state/info/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDebounce from 'hooks/useDebounce'\r\nimport { MINIMUM_SEARCH_CHARACTERS } from 'config/constants/info'\r\nimport { PoolData } from 'state/info/types'\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  z-index: 30;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  z-index: 9999;\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n`\r\n\r\nconst Menu = styled.div<{ hide: boolean }>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  z-index: 9999;\r\n  width: 100%;\r\n  top: 50px;\r\n  max-height: 400px;\r\n  overflow: auto;\r\n  right: 0;\r\n  padding: 1.5rem;\r\n  padding-bottom: 2.5rem;\r\n  position: absolute;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.04), 0px 4px 8px rgba(0, 0, 0, 0.04), 0px 16px 24px rgba(0, 0, 0, 0.04),\r\n    0px 24px 32px rgba(0, 0, 0, 0.04);\r\n  display: ${({ hide }) => hide && 'none'};\r\n  border: 1px solid ${({ theme }) => theme.colors.secondary};\r\n  margin-top: 4px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 0;\r\n    width: 500px;\r\n    max-height: 600px;\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-top: 0;\r\n    width: 800px;\r\n    max-height: 600px;\r\n  }\r\n`\r\n\r\nconst Blackout = styled.div`\r\n  position: absolute;\r\n  min-height: 100vh;\r\n  width: 100vw;\r\n  z-index: 10;\r\n  background-color: black;\r\n  opacity: 0.7;\r\n  left: 0;\r\n  top: 0;\r\n`\r\n\r\nconst ResponsiveGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 1em;\r\n  grid-template-columns: 1fr;\r\n  margin: 8px 0;\r\n  align-items: center;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: 1.5fr repeat(3, 1fr);\r\n  }\r\n`\r\n\r\nconst Break = styled.div`\r\n  height: 1px;\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  width: 100%;\r\n  margin: 16px 0;\r\n`\r\n\r\nconst HoverText = styled.div<{ hide: boolean }>`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n  display: ${({ hide }) => (hide ? 'none' : 'block')};\r\n  margin-top: 16px;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst HoverRowLink = styled.div`\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst OptionButton = styled.div<{ enabled: boolean }>`\r\n  width: fit-content;\r\n  padding: 4px 8px;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  margin-right: 10px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: ${({ theme, enabled }) => (enabled ? theme.colors.primary : 'transparent')};\r\n  color: ${({ theme, enabled }) => (enabled ? theme.card.background : theme.colors.secondary)};\r\n  :hover {\r\n    opacity: 0.6;\r\n    cursor: pointer;\r\n  }\r\n`\r\ntype BasicTokenData = {\r\n  address: string\r\n  symbol: string\r\n  name: string\r\n}\r\nconst tokenIncludesSearchTerm = (token: BasicTokenData, value: string) => {\r\n  return (\r\n    token.address.toLowerCase().includes(value.toLowerCase()) ||\r\n    token.symbol.toLowerCase().includes(value.toLowerCase()) ||\r\n    token.name.toLowerCase().includes(value.toLowerCase())\r\n  )\r\n}\r\n\r\nconst poolIncludesSearchTerm = (pool: PoolData, value: string) => {\r\n  return (\r\n    pool.address.toLowerCase().includes(value.toLowerCase()) ||\r\n    tokenIncludesSearchTerm(pool.token0, value) ||\r\n    tokenIncludesSearchTerm(pool.token1, value)\r\n  )\r\n}\r\n\r\nconst Search = () => {\r\n  const history = useHistory()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { t } = useTranslation()\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n  const menuRef = useRef<HTMLDivElement>(null)\r\n  const showMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [showMenu, setShowMenu] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const debouncedSearchTerm = useDebounce(value, 600)\r\n\r\n  const { tokens, pools, tokensLoading, poolsLoading, error } = useFetchSearchResults(debouncedSearchTerm)\r\n\r\n  const [tokensShown, setTokensShown] = useState(3)\r\n  const [poolsShown, setPoolsShown] = useState(3)\r\n\r\n  useEffect(() => {\r\n    setTokensShown(3)\r\n    setPoolsShown(3)\r\n  }, [debouncedSearchTerm])\r\n\r\n  const handleOutsideClick = (e: any) => {\r\n    const menuClick = menuRef.current && menuRef.current.contains(e.target)\r\n    const inputCLick = inputRef.current && inputRef.current.contains(e.target)\r\n    const showMoreClick = showMoreRef.current && showMoreRef.current.contains(e.target)\r\n\r\n    if (!menuClick && !inputCLick && !showMoreClick) {\r\n      setPoolsShown(3)\r\n      setTokensShown(3)\r\n      setShowMenu(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (showMenu) {\r\n      document.addEventListener('click', handleOutsideClick)\r\n      document.querySelector('body').style.overflow = 'hidden'\r\n    } else {\r\n      document.removeEventListener('click', handleOutsideClick)\r\n      document.querySelector('body').style.overflow = 'visible'\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('click', handleOutsideClick)\r\n    }\r\n  }, [showMenu])\r\n\r\n  // watchlist\r\n  const [savedTokens, addSavedToken] = useWatchlistTokens()\r\n  const [savedPools, addSavedPool] = useWatchlistPools()\r\n\r\n  const handleItemClick = (to: string) => {\r\n    setShowMenu(false)\r\n    setPoolsShown(3)\r\n    setTokensShown(3)\r\n    history.push(to)\r\n  }\r\n\r\n  // get date for watchlist\r\n  const watchListTokenData = useTokenDatas(savedTokens)\r\n  const watchListTokenLoading = watchListTokenData.length !== savedTokens.length\r\n  const watchListPoolData = usePoolDatas(savedPools)\r\n  const watchListPoolLoading = watchListPoolData.length !== savedPools.length\r\n\r\n  // filter on view\r\n  const [showWatchlist, setShowWatchlist] = useState(false)\r\n  const tokensForList = useMemo(() => {\r\n    if (showWatchlist) {\r\n      return watchListTokenData.filter((token) => tokenIncludesSearchTerm(token, value))\r\n    }\r\n    return tokens.sort((t0, t1) => (t0.volumeUSD > t1.volumeUSD ? -1 : 1))\r\n  }, [showWatchlist, tokens, watchListTokenData, value])\r\n\r\n  const poolForList = useMemo(() => {\r\n    if (showWatchlist) {\r\n      return watchListPoolData.filter((pool) => poolIncludesSearchTerm(pool, value))\r\n    }\r\n    return pools.sort((p0, p1) => (p0.volumeUSD > p1.volumeUSD ? -1 : 1))\r\n  }, [pools, showWatchlist, watchListPoolData, value])\r\n\r\n  const contentUnderTokenList = () => {\r\n    const isLoading = showWatchlist ? watchListTokenLoading : tokensLoading\r\n    const noTokensFound =\r\n      tokensForList.length === 0 && !isLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\r\n    const noWatchlistTokens = tokensForList.length === 0 && !isLoading\r\n    const showMessage = showWatchlist ? noWatchlistTokens : noTokensFound\r\n    const noTokensMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\r\n    return (\r\n      <>\r\n        {isLoading && <Skeleton />}\r\n        {showMessage && <Text>{noTokensMessage}</Text>}\r\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\r\n          <Text>{t('Search pools or tokens')}</Text>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const contentUnderPoolList = () => {\r\n    const isLoading = showWatchlist ? watchListPoolLoading : poolsLoading\r\n    const noPoolsFound =\r\n      poolForList.length === 0 && !poolsLoading && debouncedSearchTerm.length >= MINIMUM_SEARCH_CHARACTERS\r\n    const noWatchlistPools = poolForList.length === 0 && !isLoading\r\n    const showMessage = showWatchlist ? noWatchlistPools : noPoolsFound\r\n    const noPoolsMessage = showWatchlist ? t('Saved tokens will appear here') : t('No results')\r\n    return (\r\n      <>\r\n        {isLoading && <Skeleton />}\r\n        {showMessage && <Text>{noPoolsMessage}</Text>}\r\n        {!showWatchlist && debouncedSearchTerm.length < MINIMUM_SEARCH_CHARACTERS && (\r\n          <Text>{t('Search pools or tokens')}</Text>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {showMenu ? <Blackout /> : null}\r\n      <Container>\r\n        <StyledInput\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={(e) => {\r\n            setValue(e.target.value)\r\n          }}\r\n          placeholder={t('Search pools or tokens')}\r\n          ref={inputRef}\r\n          onFocus={() => {\r\n            setShowMenu(true)\r\n          }}\r\n        />\r\n        <Menu hide={!showMenu} ref={menuRef}>\r\n          <Flex mb=\"16px\">\r\n            <OptionButton enabled={!showWatchlist} onClick={() => setShowWatchlist(false)}>\r\n              {t('Search')}\r\n            </OptionButton>\r\n            <OptionButton enabled={showWatchlist} onClick={() => setShowWatchlist(true)}>\r\n              {t('Watchlist')}\r\n            </OptionButton>\r\n          </Flex>\r\n          {error && <Text color=\"failure\">{t('Error occurred, please try again')}</Text>}\r\n\r\n          <ResponsiveGrid>\r\n            <Text bold color=\"secondary\">\r\n              {t('Tokens')}\r\n            </Text>\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Price')}\r\n              </Text>\r\n            )}\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Volume 24H')}\r\n              </Text>\r\n            )}\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Liquidity')}\r\n              </Text>\r\n            )}\r\n          </ResponsiveGrid>\r\n          {tokensForList.slice(0, tokensShown).map((token, i) => {\r\n            return (\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              <HoverRowLink onClick={() => handleItemClick(`/info/token/${token.address}`)} key={i}>\r\n                <ResponsiveGrid>\r\n                  <Flex>\r\n                    <CurrencyLogo address={token.address} />\r\n                    <Text ml=\"10px\">\r\n                      <Text>{`${token.name} (${token.symbol})`}</Text>\r\n                    </Text>\r\n                    <SaveIcon\r\n                      id=\"watchlist-icon\"\r\n                      style={{ marginLeft: '8px' }}\r\n                      fill={savedTokens.includes(token.address)}\r\n                      onClick={(e) => {\r\n                        e.stopPropagation()\r\n                        addSavedToken(token.address)\r\n                      }}\r\n                    />\r\n                  </Flex>\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.priceUSD)}</Text>}\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.volumeUSD)}</Text>}\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(token.liquidityUSD)}</Text>}\r\n                </ResponsiveGrid>\r\n              </HoverRowLink>\r\n            )\r\n          })}\r\n          {contentUnderTokenList()}\r\n          <HoverText\r\n            onClick={() => {\r\n              setTokensShown(tokensShown + 5)\r\n            }}\r\n            hide={tokensForList.length <= tokensShown}\r\n            ref={showMoreRef}\r\n          >\r\n            {t('See more...')}\r\n          </HoverText>\r\n\r\n          <Break />\r\n          <ResponsiveGrid>\r\n            <Text bold color=\"secondary\" mb=\"8px\">\r\n              {t('Pools')}\r\n            </Text>\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Volume 24H')}\r\n              </Text>\r\n            )}\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Volume 7D')}\r\n              </Text>\r\n            )}\r\n            {!isXs && !isSm && (\r\n              <Text textAlign=\"end\" fontSize=\"12px\">\r\n                {t('Liquidity')}\r\n              </Text>\r\n            )}\r\n          </ResponsiveGrid>\r\n          {poolForList.slice(0, poolsShown).map((p, i) => {\r\n            return (\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              <HoverRowLink onClick={() => handleItemClick(`/info/pool/${p.address}`)} key={i}>\r\n                <ResponsiveGrid>\r\n                  <Flex>\r\n                    <DoubleCurrencyLogo address0={p.token0.address} address1={p.token1.address} />\r\n                    <Text ml=\"10px\" style={{ whiteSpace: 'nowrap' }}>\r\n                      <Text>{`${p.token0.symbol} / ${p.token1.symbol}`}</Text>\r\n                    </Text>\r\n                    <SaveIcon\r\n                      id=\"watchlist-icon\"\r\n                      style={{ marginLeft: '10px' }}\r\n                      fill={savedPools.includes(p.address)}\r\n                      onClick={(e) => {\r\n                        e.stopPropagation()\r\n                        addSavedPool(p.address)\r\n                      }}\r\n                    />\r\n                  </Flex>\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSD)}</Text>}\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.volumeUSDWeek)}</Text>}\r\n                  {!isXs && !isSm && <Text textAlign=\"end\">${formatAmount(p.liquidityUSD)}</Text>}\r\n                </ResponsiveGrid>\r\n              </HoverRowLink>\r\n            )\r\n          })}\r\n          {contentUnderPoolList()}\r\n          <HoverText\r\n            onClick={() => {\r\n              setPoolsShown(poolsShown + 5)\r\n            }}\r\n            hide={poolForList.length <= poolsShown}\r\n            ref={showMoreRef}\r\n          >\r\n            {t('See more...')}\r\n          </HoverText>\r\n        </Menu>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\nimport { Box, Flex, ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Search from 'views/Info/components/InfoSearch'\r\n\r\nconst NavWrapper = styled(Flex)`\r\n  background: ${({ theme }) => theme.colors.gradients.cardHeader};\r\n  justify-content: space-between;\r\n  padding: 20px 16px;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding: 20px 40px;\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst InfoNav = () => {\r\n  const { t } = useTranslation()\r\n  const isPools = useRouteMatch(['/info/pools', '/info/pool', '/info/pair'])\r\n  const isTokens = useRouteMatch(['/info/tokens', '/info/token'])\r\n  let activeIndex = 0\r\n  if (isPools) {\r\n    activeIndex = 1\r\n  }\r\n  if (isTokens) {\r\n    activeIndex = 2\r\n  }\r\n  return (\r\n    <NavWrapper>\r\n      <Box>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n          <ButtonMenuItem as={Link} to=\"/info\">\r\n            {t('Overview')}\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem as={Link} to=\"/info/pools\">\r\n            {t('Pools')}\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem as={Link} to=\"/info/tokens\">\r\n            {t('Tokens')}\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </Box>\r\n      <Box width={['100%', '100%', '250px']}>\r\n        <Search />\r\n      </Box>\r\n    </NavWrapper>\r\n  )\r\n}\r\n\r\nexport default InfoNav\r\n","import React from 'react'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\nconst LineChartLoaderSVG: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg width=\"100%\" height=\"100%\" preserveAspectRatio=\"none\" viewBox=\"0 0 100 50\" {...props}>\r\n      <path\r\n        d=\"M 0 49 C 1 49 1 45 4 47 C 7 49 7 35 11 37 C 13 38 14 32 16 34 C 18 35.6667 20 40 22 39 C 24 38 24 34 26 34 C 27 34 29 39 32 36 C 33 35 34 32 35 32 C 37 32 37 35 39 34 C 40 33 39 29 43 31 C 46 32 45 28 47 30 C 50 32 49 22 51 24 Q 53 26 55 24 C 56 23 56 25 57 26 C 58 27 59 28 60 28 C 63 28 66 17 67 16 C 68 15 69 17 70 16 C 71 15 71 13 74 13 C 76 13 76 14 77 15 C 79 17 80 18 82 18 C 83 18 83 17 84 17 C 87 17 89 24 91 24 C 93 24 95 20 96 17 C 97.6667 13.3333 98 9 101 6\"\r\n        stroke=\"#7645D9\"\r\n        strokeWidth=\"0.2\"\r\n        strokeDasharray=\"156\"\r\n        strokeDashoffset=\"156\"\r\n        fill=\"transparent\"\r\n        opacity=\"0.5\"\r\n        filter=\"url(#glow)\"\r\n      >\r\n        <animate\r\n          id=\"firstline\"\r\n          attributeName=\"stroke-dashoffset\"\r\n          dur=\"2s\"\r\n          from=\"156\"\r\n          to=\"-156\"\r\n          begin=\"0s;firstline.end+0.5s\"\r\n        />\r\n      </path>\r\n      <path\r\n        d=\"M 0 49 C 1 49 1 45 4 47 C 7 49 7 35 11 37 C 13 38 14 32 16 34 C 18 35.6667 20 40 22 39 C 24 38 24 34 26 34 C 27 34 29 39 32 36 C 33 35 34 32 35 32 C 37 32 37 35 39 34 C 40 33 39 29 43 31 C 46 32 45 28 47 30 C 50 32 49 22 51 24 Q 53 26 55 24 C 56 23 56 25 57 26 C 58 27 59 28 60 28 C 63 28 66 17 67 16 C 68 15 69 17 70 16 C 71 15 71 13 74 13 C 76 13 76 14 77 15 C 79 17 80 18 82 18 C 83 18 83 17 84 17 C 87 17 89 24 91 24 C 93 24 95 20 96 17 C 97.6667 13.3333 98 9 101 6\"\r\n        stroke=\"#7645D9\"\r\n        strokeWidth=\"0.2\"\r\n        strokeDasharray=\"156\"\r\n        strokeDashoffset=\"156\"\r\n        fill=\"transparent\"\r\n        opacity=\"0.5\"\r\n        filter=\"url(#glow)\"\r\n      >\r\n        <animate\r\n          id=\"secondline\"\r\n          attributeName=\"stroke-dashoffset\"\r\n          dur=\"2s\"\r\n          from=\"156\"\r\n          to=\"-156\"\r\n          begin=\"1.3s;secondline.end+0.5s\"\r\n        />\r\n      </path>\r\n      <defs>\r\n        <filter id=\"glow\">\r\n          <feGaussianBlur className=\"blur\" result=\"coloredBlur\" stdDeviation=\"4\" />\r\n          <feMerge>\r\n            <feMergeNode in=\"coloredBlur\" />\r\n            <feMergeNode in=\"coloredBlur\" />\r\n            <feMergeNode in=\"coloredBlur\" />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport default LineChartLoaderSVG\r\n","import React from 'react'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\nconst BarChartLoaderSVG: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg width=\"100%\" height=\"100%\" viewBox=\"0 0 50 25\" preserveAspectRatio=\"none\" opacity=\"0.1\" {...props}>\r\n      <rect width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.9s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.9s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"10.222%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.8s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.8s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"20.444%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.7s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.7s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"30.666%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.6s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.6s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"40.888%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.5s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.5s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"51.11%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.4s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.4s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"61.332%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.3s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.3s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"71.554%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.2s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.2s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"81.776%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.1s\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"0.9s\"\r\n          values=\"85%; 10%; 85%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n          begin=\"-0.1s\"\r\n        />\r\n      </rect>\r\n      <rect x=\"91.998%\" width=\"8%\" fill=\"#1FC7D4\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"0.9s\"\r\n          values=\"15%; 90%; 15%\"\r\n          keyTimes=\"0; 0.55; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate attributeName=\"y\" dur=\"0.9s\" values=\"85%; 10%; 85%\" keyTimes=\"0; 0.55; 1\" repeatCount=\"indefinite\" />\r\n      </rect>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport default BarChartLoaderSVG\r\n","import React from 'react'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\nconst CandleChartLoaderSVG: React.FC<SvgProps> = (props) => {\r\n  return (\r\n    <Svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 50\" opacity=\"0.1\" {...props}>\r\n      <rect width=\"5%\" fill=\"#31D0AA\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"2s\"\r\n          values=\"0%; 40%; 40%; 10%; 10%\"\r\n          keyTimes=\"0; 0.125; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"2s\"\r\n          from=\"50%\"\r\n          to=\"30%\"\r\n          values=\"30%; 10%; 10%; 25%; 25%\"\r\n          keyTimes=\"0; 0.125; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"rx\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 100%; 100%;\"\r\n          keyTimes=\"0; 0.6; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"x\"\r\n          dur=\"2s\"\r\n          values=\"32.5%; 32.5%; 47.5%; 47.5%;\"\r\n          keyTimes=\"0; 0.7; 0.8; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          dur=\"2s\"\r\n          values=\"1; 1; 0; 0;\"\r\n          keyTimes=\"0; 0.75; 0.9; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n      <rect width=\"5%\" fill=\"#31D0AA\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 20%; 20%; 10%; 10%\"\r\n          keyTimes=\"0; 0.125; 0.25; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"2s\"\r\n          values=\"15%; 15%; 5%; 5%; 25%; 25%\"\r\n          keyTimes=\"0; 0.125; 0.25; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"rx\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 100%; 100%;\"\r\n          keyTimes=\"0; 0.6; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"x\"\r\n          dur=\"2s\"\r\n          values=\"42.5%; 42.5%; 47.5%; 47.5%;\"\r\n          keyTimes=\"0; 0.7; 0.8; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          dur=\"2s\"\r\n          values=\"1; 1; 0; 0;\"\r\n          keyTimes=\"0; 0.75; 0.9; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n      <rect width=\"5%\" fill=\"#ED4B9E\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 35%; 35%; 10%; 10%\"\r\n          keyTimes=\"0; 0.25; 0.375; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"2s\"\r\n          values=\"25%; 25%; 10%; 10%; 25%; 25%\"\r\n          keyTimes=\"0; 0.25; 0.375; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"rx\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 100%; 100%;\"\r\n          keyTimes=\"0; 0.6; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"x\"\r\n          dur=\"2s\"\r\n          values=\"52.5%; 52.5%; 47.5%; 47.5%;\"\r\n          keyTimes=\"0; 0.7; 0.8; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          dur=\"2s\"\r\n          values=\"1; 1; 0; 0;\"\r\n          keyTimes=\"0; 0.75; 0.9; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n      <rect width=\"5%\" fill=\"#31D0AA\">\r\n        <animate\r\n          attributeName=\"height\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 35%; 35%; 10%; 10%\"\r\n          keyTimes=\"0; 0.375; 0.5; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"y\"\r\n          dur=\"2s\"\r\n          values=\"15%; 15%; 0%; 0%; 25%; 25%\"\r\n          keyTimes=\"0; 0.375; 0.5; 0.5; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"rx\"\r\n          dur=\"2s\"\r\n          values=\"0%; 0%; 100%; 100%;\"\r\n          keyTimes=\"0; 0.6; 0.625; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"x\"\r\n          dur=\"2s\"\r\n          values=\"62.5%; 62.5%; 47.5%; 47.5%;\"\r\n          keyTimes=\"0; 0.7; 0.8; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animate\r\n          attributeName=\"opacity\"\r\n          dur=\"2s\"\r\n          values=\"1; 1; 0; 0;\"\r\n          keyTimes=\"0; 0.75; 0.9; 1\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </rect>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport default CandleChartLoaderSVG\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport LineChartLoaderSVG from './LineChartLoaderSVG'\r\nimport BarChartLoaderSVG from './BarChartLoaderSVG'\r\nimport CandleChartLoaderSVG from './CandleChartLoaderSVG'\r\n\r\nconst LoadingText = styled(Box)`\r\n  position: absolute;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  top: 50%;\r\n  left: 0;\r\n  right: 0;\r\n  text-align: center;\r\n`\r\n\r\nconst LoadingIndicator = styled(Box)`\r\n  height: 100%;\r\n  position: relative;\r\n`\r\n\r\nexport const BarChartLoader: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <LoadingIndicator>\r\n      <BarChartLoaderSVG />\r\n      <LoadingText>\r\n        <Text color=\"textSubtle\" fontSize=\"20px\">\r\n          {t('Loading chart data...')}\r\n        </Text>\r\n      </LoadingText>\r\n    </LoadingIndicator>\r\n  )\r\n}\r\n\r\nexport const LineChartLoader: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <LoadingIndicator>\r\n      <LineChartLoaderSVG />\r\n      <LoadingText>\r\n        <Text color=\"textSubtle\" fontSize=\"20px\">\r\n          {t('Loading chart data...')}\r\n        </Text>\r\n      </LoadingText>\r\n    </LoadingIndicator>\r\n  )\r\n}\r\n\r\nexport const CandleChartLoader: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <LoadingIndicator>\r\n      <CandleChartLoaderSVG />\r\n      <LoadingText>\r\n        <Text color=\"textSubtle\" fontSize=\"20px\">\r\n          {t('Loading chart data...')}\r\n        </Text>\r\n      </LoadingText>\r\n    </LoadingIndicator>\r\n  )\r\n}\r\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\r\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area } from 'recharts'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport type LineChartProps = {\r\n  data: any[]\r\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\r\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\r\n} & React.HTMLAttributes<HTMLDivElement>\r\n\r\n// Calls setHoverValue and setHoverDate when part of chart is hovered\r\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\r\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\r\n  useEffect(() => {\r\n    setHoverValue(payload.value)\r\n    setHoverDate(payload.time.toLocaleString(locale, { year: 'numeric', day: 'numeric', month: 'short' }))\r\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\r\n\r\n  return null\r\n}\r\n\r\n/**\r\n * Note: remember that it needs to be mounted inside the container with fixed height\r\n */\r\nconst LineChart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\r\n  const {\r\n    currentLanguage: { locale },\r\n  } = useTranslation()\r\n  const { theme } = useTheme()\r\n  if (!data || data.length === 0) {\r\n    return <LineChartLoader />\r\n  }\r\n  return (\r\n    <ResponsiveContainer>\r\n      <AreaChart\r\n        data={data}\r\n        width={300}\r\n        height={308}\r\n        margin={{\r\n          top: 5,\r\n          right: 15,\r\n          left: 0,\r\n          bottom: 5,\r\n        }}\r\n        onMouseLeave={() => {\r\n          if (setHoverDate) setHoverDate(undefined)\r\n          if (setHoverValue) setHoverValue(undefined)\r\n        }}\r\n      >\r\n        <defs>\r\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"5%\" stopColor={theme.colors.inputSecondary} stopOpacity={0.5} />\r\n            <stop offset=\"100%\" stopColor={theme.colors.secondary} stopOpacity={0} />\r\n          </linearGradient>\r\n        </defs>\r\n        <XAxis\r\n          dataKey=\"time\"\r\n          axisLine={false}\r\n          tickLine={false}\r\n          tickFormatter={(time) => time.toLocaleDateString(undefined, { day: '2-digit' })}\r\n          minTickGap={10}\r\n        />\r\n        <YAxis\r\n          dataKey=\"value\"\r\n          tickCount={6}\r\n          scale=\"linear\"\r\n          axisLine={false}\r\n          tickLine={false}\r\n          fontSize=\"12px\"\r\n          tickFormatter={(val) => `$${formatAmount(val)}`}\r\n          orientation=\"right\"\r\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\r\n        />\r\n        <Tooltip\r\n          cursor={{ stroke: theme.colors.secondary }}\r\n          contentStyle={{ display: 'none' }}\r\n          formatter={(tooltipValue, name, props) => (\r\n            <HoverUpdater\r\n              locale={locale}\r\n              payload={props.payload}\r\n              setHoverValue={setHoverValue}\r\n              setHoverDate={setHoverDate}\r\n            />\r\n          )}\r\n        />\r\n        <Area dataKey=\"value\" type=\"monotone\" stroke={theme.colors.secondary} fill=\"url(#gradient)\" strokeWidth={2} />\r\n      </AreaChart>\r\n    </ResponsiveContainer>\r\n  )\r\n}\r\n\r\nexport default LineChart\r\n","import React from 'react'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\n\r\nexport interface PercentProps extends TextProps {\r\n  value: number | undefined\r\n}\r\n\r\nconst Percent: React.FC<PercentProps> = ({ value, ...rest }) => {\r\n  if (!value || Number.isNaN(value)) {\r\n    return <Text {...rest}>-</Text>\r\n  }\r\n\r\n  const isNegative = value < 0\r\n\r\n  return (\r\n    <Text {...rest} color={isNegative ? 'failure' : 'success'}>\r\n      {isNegative ? '↓' : '↑'}\r\n      {Math.abs(value).toFixed(2)}%\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default Percent\r\n","import styled from 'styled-components'\r\nimport { Text, Flex } from '@pancakeswap/uikit'\r\n\r\nexport const ClickableColumnHeader = styled(Text)`\r\n  cursor: pointer;\r\n`\r\n\r\nexport const TableWrapper = styled(Flex)`\r\n  width: 100%;\r\n  padding-top: 16px;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nexport const PageButtons = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 0.2em;\r\n  margin-bottom: 1.2em;\r\n`\r\n\r\nexport const Arrow = styled.div`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  padding: 0 20px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport const Break = styled.div`\r\n  height: 1px;\r\n  background-color: ${({ theme }) => theme.colors.cardBorder};\r\n  width: 100%;\r\n`\r\n","import React, { useState, useMemo, useCallback, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Box, Skeleton, useMatchBreakpoints, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { TokenData } from 'state/info/types'\r\nimport { Link } from 'react-router-dom'\r\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport Percent from 'views/Info/components/Percent'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\r\n\r\n/**\r\n *  Columns on different layouts\r\n *  6 = | # | Name | Price | Price Change | Volume 24H | TVL |\r\n *  5 = | # | Name | Price |              | Volume 24H | TVL |\r\n *  4 = | # | Name | Price |              | Volume 24H |     |\r\n *  2 = |   | Name |       |              | Volume 24H |     |\r\n *  On smallest screen Name is reduced to just symbol\r\n */\r\nconst ResponsiveGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 1em;\r\n  align-items: center;\r\n\r\n  padding: 0 24px;\r\n\r\n  grid-template-columns: 20px 3fr repeat(4, 1fr);\r\n\r\n  @media screen and (max-width: 900px) {\r\n    grid-template-columns: 20px 2fr repeat(3, 1fr);\r\n    & :nth-child(4) {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    grid-template-columns: 20px 2fr repeat(2, 1fr);\r\n    & :nth-child(6) {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 670px) {\r\n    grid-template-columns: 1fr 1fr;\r\n    > *:first-child {\r\n      display: none;\r\n    }\r\n    > *:nth-child(3) {\r\n      display: none;\r\n    }\r\n  }\r\n`\r\n\r\nconst LinkWrapper = styled(Link)`\r\n  text-decoration: none;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.7;\r\n  }\r\n`\r\n\r\nconst ResponsiveLogo = styled(CurrencyLogo)`\r\n  @media screen and (max-width: 670px) {\r\n    width: 16px;\r\n    height: 16px;\r\n  }\r\n`\r\n\r\nconst TableLoader: React.FC = () => {\r\n  const loadingRow = (\r\n    <ResponsiveGrid>\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n    </ResponsiveGrid>\r\n  )\r\n  return (\r\n    <>\r\n      {loadingRow}\r\n      {loadingRow}\r\n      {loadingRow}\r\n    </>\r\n  )\r\n}\r\n\r\nconst DataRow: React.FC<{ tokenData: TokenData; index: number }> = ({ tokenData, index }) => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  return (\r\n    <LinkWrapper to={`/info/token/${tokenData.address}`}>\r\n      <ResponsiveGrid>\r\n        <Flex>\r\n          <Text>{index + 1}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"center\">\r\n          <ResponsiveLogo address={tokenData.address} />\r\n          {(isXs || isSm) && <Text ml=\"8px\">{tokenData.symbol}</Text>}\r\n          {!isXs && !isSm && (\r\n            <Flex marginLeft=\"10px\">\r\n              <Text>{tokenData.name}</Text>\r\n              <Text ml=\"8px\">({tokenData.symbol})</Text>\r\n            </Flex>\r\n          )}\r\n        </Flex>\r\n        <Text fontWeight={400}>${formatAmount(tokenData.priceUSD, { notation: 'standard' })}</Text>\r\n        <Text fontWeight={400}>\r\n          <Percent value={tokenData.priceUSDChange} fontWeight={400} />\r\n        </Text>\r\n        <Text fontWeight={400}>${formatAmount(tokenData.volumeUSD)}</Text>\r\n        <Text fontWeight={400}>${formatAmount(tokenData.liquidityUSD)}</Text>\r\n      </ResponsiveGrid>\r\n    </LinkWrapper>\r\n  )\r\n}\r\n\r\nconst SORT_FIELD = {\r\n  name: 'name',\r\n  volumeUSD: 'volumeUSD',\r\n  liquidityUSD: 'liquidityUSD',\r\n  priceUSD: 'priceUSD',\r\n  priceUSDChange: 'priceUSDChange',\r\n  priceUSDChangeWeek: 'priceUSDChangeWeek',\r\n}\r\n\r\nconst MAX_ITEMS = 10\r\n\r\nconst TokenTable: React.FC<{\r\n  tokenDatas: TokenData[] | undefined\r\n  maxItems?: number\r\n}> = ({ tokenDatas, maxItems = MAX_ITEMS }) => {\r\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\r\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const [page, setPage] = useState(1)\r\n  const [maxPage, setMaxPage] = useState(1)\r\n  useEffect(() => {\r\n    let extraPages = 1\r\n    if (tokenDatas) {\r\n      if (tokenDatas.length % maxItems === 0) {\r\n        extraPages = 0\r\n      }\r\n      setMaxPage(Math.floor(tokenDatas.length / maxItems) + extraPages)\r\n    }\r\n  }, [maxItems, tokenDatas])\r\n\r\n  const sortedTokens = useMemo(() => {\r\n    return tokenDatas\r\n      ? tokenDatas\r\n          .sort((a, b) => {\r\n            if (a && b) {\r\n              return a[sortField as keyof TokenData] > b[sortField as keyof TokenData]\r\n                ? (sortDirection ? -1 : 1) * 1\r\n                : (sortDirection ? -1 : 1) * -1\r\n            }\r\n            return -1\r\n          })\r\n          .slice(maxItems * (page - 1), page * maxItems)\r\n      : []\r\n  }, [tokenDatas, maxItems, page, sortDirection, sortField])\r\n\r\n  const handleSort = useCallback(\r\n    (newField: string) => {\r\n      setSortField(newField)\r\n      setSortDirection(sortField !== newField ? true : !sortDirection)\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  const arrow = useCallback(\r\n    (field: string) => {\r\n      const directionArrow = !sortDirection ? '↑' : '↓'\r\n      return sortField === field ? directionArrow : ''\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  if (!tokenDatas) {\r\n    return <Skeleton />\r\n  }\r\n\r\n  return (\r\n    <TableWrapper>\r\n      <ResponsiveGrid>\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\r\n          #\r\n        </Text>\r\n        <ClickableColumnHeader\r\n          color=\"secondary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.name)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Name')} {arrow(SORT_FIELD.name)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"secondary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.priceUSD)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Price')} {arrow(SORT_FIELD.priceUSD)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"secondary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.priceUSDChange)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Price Change')} {arrow(SORT_FIELD.priceUSDChange)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"secondary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"secondary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\r\n        </ClickableColumnHeader>\r\n      </ResponsiveGrid>\r\n\r\n      <Break />\r\n      {sortedTokens.length > 0 ? (\r\n        <>\r\n          {sortedTokens.map((data, i) => {\r\n            if (data) {\r\n              return (\r\n                <React.Fragment key={data.address}>\r\n                  <DataRow index={(page - 1) * MAX_ITEMS + i} tokenData={data} />\r\n                  <Break />\r\n                </React.Fragment>\r\n              )\r\n            }\r\n            return null\r\n          })}\r\n          <PageButtons>\r\n            <Arrow\r\n              onClick={() => {\r\n                setPage(page === 1 ? page : page - 1)\r\n              }}\r\n            >\r\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\r\n            </Arrow>\r\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\r\n            <Arrow\r\n              onClick={() => {\r\n                setPage(page === maxPage ? page : page + 1)\r\n              }}\r\n            >\r\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\r\n            </Arrow>\r\n          </PageButtons>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <TableLoader />\r\n          <Box />\r\n        </>\r\n      )}\r\n    </TableWrapper>\r\n  )\r\n}\r\n\r\nexport default TokenTable\r\n","import React, { useCallback, useState, useMemo, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\nimport { Text, Flex, Box, Skeleton, ArrowBackIcon, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { PoolData } from 'state/info/types'\r\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\r\nimport { DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\r\n\r\n/**\r\n *  Columns on different layouts\r\n *  5 = | # | Pool | TVL | Volume 24H | Volume 7D |\r\n *  4 = | # | Pool |     | Volume 24H | Volume 7D |\r\n *  3 = | # | Pool |     | Volume 24H |           |\r\n *  2 = |   | Pool |     | Volume 24H |           |\r\n */\r\nconst ResponsiveGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 1em;\r\n  align-items: center;\r\n  grid-template-columns: 20px 3.5fr repeat(5, 1fr);\r\n\r\n  padding: 0 24px;\r\n  @media screen and (max-width: 900px) {\r\n    grid-template-columns: 20px 1.5fr repeat(3, 1fr);\r\n    & :nth-child(4),\r\n    & :nth-child(5) {\r\n      display: none;\r\n    }\r\n  }\r\n  @media screen and (max-width: 500px) {\r\n    grid-template-columns: 20px 1.5fr repeat(1, 1fr);\r\n    & :nth-child(4),\r\n    & :nth-child(5),\r\n    & :nth-child(6),\r\n    & :nth-child(7) {\r\n      display: none;\r\n    }\r\n  }\r\n  @media screen and (max-width: 480px) {\r\n    grid-template-columns: 2.5fr repeat(1, 1fr);\r\n    > *:nth-child(1) {\r\n      display: none;\r\n    }\r\n  }\r\n`\r\n\r\nconst LinkWrapper = styled(Link)`\r\n  text-decoration: none;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.7;\r\n  }\r\n`\r\n\r\nconst SORT_FIELD = {\r\n  volumeUSD: 'volumeUSD',\r\n  liquidityUSD: 'liquidityUSD',\r\n  volumeUSDWeek: 'volumeUSDWeek',\r\n  lpFees24h: 'lpFees24h',\r\n  lpApr7d: 'lpApr7d',\r\n}\r\n\r\nconst LoadingRow: React.FC = () => (\r\n  <ResponsiveGrid>\r\n    <Skeleton />\r\n    <Skeleton />\r\n    <Skeleton />\r\n    <Skeleton />\r\n    <Skeleton />\r\n    <Skeleton />\r\n    <Skeleton />\r\n  </ResponsiveGrid>\r\n)\r\n\r\nconst TableLoader: React.FC = () => (\r\n  <>\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n  </>\r\n)\r\n\r\nconst DataRow = ({ poolData, index }: { poolData: PoolData; index: number }) => {\r\n  return (\r\n    <LinkWrapper to={`/info/pool/${poolData.address}`}>\r\n      <ResponsiveGrid>\r\n        <Text>{index + 1}</Text>\r\n        <Flex>\r\n          <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} />\r\n          <Text ml=\"8px\">\r\n            {poolData.token0.symbol}/{poolData.token1.symbol}\r\n          </Text>\r\n        </Flex>\r\n        <Text>${formatAmount(poolData.volumeUSD)}</Text>\r\n        <Text>${formatAmount(poolData.volumeUSDWeek)}</Text>\r\n        <Text>${formatAmount(poolData.lpFees24h)}</Text>\r\n        <Text>{formatAmount(poolData.lpApr7d)}%</Text>\r\n        <Text>${formatAmount(poolData.liquidityUSD)}</Text>\r\n      </ResponsiveGrid>\r\n    </LinkWrapper>\r\n  )\r\n}\r\n\r\ninterface PoolTableProps {\r\n  poolDatas: PoolData[]\r\n  loading?: boolean // If true shows indication that SOME pools are loading, but the ones already fetched will be shown\r\n}\r\n\r\nconst PoolTable: React.FC<PoolTableProps> = ({ poolDatas, loading }) => {\r\n  // for sorting\r\n  const [sortField, setSortField] = useState(SORT_FIELD.volumeUSD)\r\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\r\n  const { t } = useTranslation()\r\n\r\n  // pagination\r\n  const [page, setPage] = useState(1)\r\n  const [maxPage, setMaxPage] = useState(1)\r\n  useEffect(() => {\r\n    let extraPages = 1\r\n    if (poolDatas.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\r\n      extraPages = 0\r\n    }\r\n    setMaxPage(Math.floor(poolDatas.length / ITEMS_PER_INFO_TABLE_PAGE) + extraPages)\r\n  }, [poolDatas])\r\n\r\n  const sortedPools = useMemo(() => {\r\n    return poolDatas\r\n      ? poolDatas\r\n          .sort((a, b) => {\r\n            if (a && b) {\r\n              return a[sortField as keyof PoolData] > b[sortField as keyof PoolData]\r\n                ? (sortDirection ? -1 : 1) * 1\r\n                : (sortDirection ? -1 : 1) * -1\r\n            }\r\n            return -1\r\n          })\r\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\r\n      : []\r\n  }, [page, poolDatas, sortDirection, sortField])\r\n\r\n  const handleSort = useCallback(\r\n    (newField: string) => {\r\n      setSortField(newField)\r\n      setSortDirection(sortField !== newField ? true : !sortDirection)\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  const arrow = useCallback(\r\n    (field: string) => {\r\n      const directionArrow = !sortDirection ? '↑' : '↓'\r\n      return sortField === field ? directionArrow : ''\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  return (\r\n    <TableWrapper>\r\n      <ResponsiveGrid>\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\r\n          #\r\n        </Text>\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Pool')}\r\n        </Text>\r\n        <ClickableColumnHeader\r\n          color=\"secondary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.volumeUSD)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Volume 24H')} {arrow(SORT_FIELD.volumeUSD)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"secondary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.volumeUSDWeek)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Volume 7D')} {arrow(SORT_FIELD.volumeUSDWeek)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"secondary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.lpFees24h)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('LP reward fees 24H')} {arrow(SORT_FIELD.lpFees24h)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"secondary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.lpApr7d)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('LP reward APR')} {arrow(SORT_FIELD.lpApr7d)}\r\n        </ClickableColumnHeader>\r\n        <ClickableColumnHeader\r\n          color=\"secondary\"\r\n          fontSize=\"12px\"\r\n          bold\r\n          onClick={() => handleSort(SORT_FIELD.liquidityUSD)}\r\n          textTransform=\"uppercase\"\r\n        >\r\n          {t('Liquidity')} {arrow(SORT_FIELD.liquidityUSD)}\r\n        </ClickableColumnHeader>\r\n      </ResponsiveGrid>\r\n      <Break />\r\n      {sortedPools.length > 0 ? (\r\n        <>\r\n          {sortedPools.map((poolData, i) => {\r\n            if (poolData) {\r\n              return (\r\n                <React.Fragment key={poolData.address}>\r\n                  <DataRow index={(page - 1) * ITEMS_PER_INFO_TABLE_PAGE + i} poolData={poolData} />\r\n                  <Break />\r\n                </React.Fragment>\r\n              )\r\n            }\r\n            return null\r\n          })}\r\n          {loading && <LoadingRow />}\r\n          <PageButtons>\r\n            <Arrow\r\n              onClick={() => {\r\n                setPage(page === 1 ? page : page - 1)\r\n              }}\r\n            >\r\n              <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\r\n            </Arrow>\r\n\r\n            <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\r\n\r\n            <Arrow\r\n              onClick={() => {\r\n                setPage(page === maxPage ? page : page + 1)\r\n              }}\r\n            >\r\n              <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\r\n            </Arrow>\r\n          </PageButtons>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <TableLoader />\r\n          {/* spacer */}\r\n          <Box />\r\n        </>\r\n      )}\r\n    </TableWrapper>\r\n  )\r\n}\r\n\r\nexport default PoolTable\r\n","import React, { useEffect, Dispatch, SetStateAction } from 'react'\r\nimport { BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Bar } from 'recharts'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { BarChartLoader } from 'views/Info/components/ChartLoaders'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport type LineChartProps = {\r\n  data: any[]\r\n  height?: string\r\n  chartHeight?: string\r\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\r\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of value\r\n} & React.HTMLAttributes<HTMLDivElement>\r\n\r\nconst CustomBar = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  fill,\r\n}: {\r\n  x: number\r\n  y: number\r\n  width: number\r\n  height: number\r\n  fill: string\r\n}) => {\r\n  return (\r\n    <g>\r\n      <rect x={x} y={y} fill={fill} width={width} height={height} rx=\"2\" />\r\n    </g>\r\n  )\r\n}\r\n\r\n// Calls setHoverValue and setHoverDate when part of chart is hovered\r\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\r\nconst HoverUpdater = ({ locale, payload, setHoverValue, setHoverDate }) => {\r\n  useEffect(() => {\r\n    setHoverValue(payload.value)\r\n    setHoverDate(payload.time.toLocaleString(locale, { year: 'numeric', day: 'numeric', month: 'short' }))\r\n  }, [locale, payload.value, payload.time, setHoverValue, setHoverDate])\r\n\r\n  return null\r\n}\r\n\r\nconst Chart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\r\n  const {\r\n    currentLanguage: { locale },\r\n  } = useTranslation()\r\n  const { theme } = useTheme()\r\n  if (!data || data.length === 0) {\r\n    return <BarChartLoader />\r\n  }\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n      <BarChart\r\n        data={data}\r\n        margin={{\r\n          top: 5,\r\n          right: 15,\r\n          left: 0,\r\n          bottom: 5,\r\n        }}\r\n        onMouseLeave={() => {\r\n          setHoverDate(undefined)\r\n          setHoverValue(undefined)\r\n        }}\r\n      >\r\n        <XAxis\r\n          dataKey=\"time\"\r\n          axisLine={false}\r\n          tickLine={false}\r\n          tickFormatter={(time) => time.toLocaleDateString(undefined, { day: '2-digit' })}\r\n          minTickGap={10}\r\n        />\r\n        <YAxis\r\n          dataKey=\"value\"\r\n          tickCount={6}\r\n          scale=\"linear\"\r\n          axisLine={false}\r\n          tickLine={false}\r\n          color={theme.colors.textSubtle}\r\n          fontSize=\"12px\"\r\n          tickFormatter={(val) => `$${formatAmount(val)}`}\r\n          orientation=\"right\"\r\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\r\n        />\r\n        <Tooltip\r\n          cursor={{ fill: theme.colors.backgroundDisabled }}\r\n          contentStyle={{ display: 'none' }}\r\n          formatter={(tooltipValue, name, props) => (\r\n            <HoverUpdater\r\n              locale={locale}\r\n              payload={props.payload}\r\n              setHoverValue={setHoverValue}\r\n              setHoverDate={setHoverDate}\r\n            />\r\n          )}\r\n        />\r\n        <Bar\r\n          dataKey=\"value\"\r\n          fill={theme.colors.primary}\r\n          shape={(props) => (\r\n            <CustomBar height={props.height} width={props.width} x={props.x} y={props.y} fill={theme.colors.primary} />\r\n          )}\r\n        />\r\n      </BarChart>\r\n    </ResponsiveContainer>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","// TODO PCS refactor ternaries\r\n/* eslint-disable no-nested-ternary */\r\nimport React, { useCallback, useState, useMemo, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { formatDistanceToNowStrict } from 'date-fns'\r\nimport { Text, Flex, Box, Radio, Skeleton, LinkExternal, ArrowForwardIcon, ArrowBackIcon } from '@pancakeswap/uikit'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport { getBscScanLink } from 'utils'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { Transaction, TransactionType } from 'state/info/types'\r\nimport { ITEMS_PER_INFO_TABLE_PAGE } from 'config/constants/info'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ClickableColumnHeader, TableWrapper, PageButtons, Arrow, Break } from './shared'\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n`\r\n\r\nconst ResponsiveGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 1em;\r\n  align-items: center;\r\n  grid-template-columns: 2fr 0.8fr repeat(4, 1fr);\r\n  padding: 0 24px;\r\n  @media screen and (max-width: 940px) {\r\n    grid-template-columns: 2fr repeat(4, 1fr);\r\n    & > *:nth-child(5) {\r\n      display: none;\r\n    }\r\n  }\r\n  @media screen and (max-width: 800px) {\r\n    grid-template-columns: 2fr repeat(2, 1fr);\r\n    & > *:nth-child(5) {\r\n      display: none;\r\n    }\r\n    & > *:nth-child(3) {\r\n      display: none;\r\n    }\r\n    & > *:nth-child(4) {\r\n      display: none;\r\n    }\r\n  }\r\n  @media screen and (max-width: 500px) {\r\n    grid-template-columns: 2fr 1fr;\r\n    & > *:nth-child(5) {\r\n      display: none;\r\n    }\r\n    & > *:nth-child(3) {\r\n      display: none;\r\n    }\r\n    & > *:nth-child(4) {\r\n      display: none;\r\n    }\r\n    & > *:nth-child(2) {\r\n      display: none;\r\n    }\r\n  }\r\n`\r\n\r\nconst RadioGroup = styled(Flex)`\r\n  align-items: center;\r\n  margin-right: 16px;\r\n  margin-top: 8px;\r\n  cursor: pointer;\r\n`\r\n\r\nconst SORT_FIELD = {\r\n  amountUSD: 'amountUSD',\r\n  timestamp: 'timestamp',\r\n  sender: 'sender',\r\n  amountToken0: 'amountToken0',\r\n  amountToken1: 'amountToken1',\r\n}\r\n\r\nconst TableLoader: React.FC = () => {\r\n  const loadingRow = (\r\n    <ResponsiveGrid>\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n      <Skeleton />\r\n    </ResponsiveGrid>\r\n  )\r\n  return (\r\n    <>\r\n      {loadingRow}\r\n      {loadingRow}\r\n      {loadingRow}\r\n    </>\r\n  )\r\n}\r\n\r\nconst DataRow: React.FC<{ transaction: Transaction }> = ({ transaction }) => {\r\n  const { t } = useTranslation()\r\n  const abs0 = Math.abs(transaction.amountToken0)\r\n  const abs1 = Math.abs(transaction.amountToken1)\r\n  const outputTokenSymbol = transaction.amountToken0 < 0 ? transaction.token0Symbol : transaction.token1Symbol\r\n  const inputTokenSymbol = transaction.amountToken1 < 0 ? transaction.token0Symbol : transaction.token1Symbol\r\n\r\n  return (\r\n    <ResponsiveGrid>\r\n      <LinkExternal href={getBscScanLink(transaction.hash, 'transaction')}>\r\n        <Text>\r\n          {transaction.type === TransactionType.MINT\r\n            ? t('Add %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })\r\n            : transaction.type === TransactionType.SWAP\r\n            ? t('Swap %token0% for %token1%', { token0: inputTokenSymbol, token1: outputTokenSymbol })\r\n            : t('Remove %token0% and %token1%', { token0: transaction.token0Symbol, token1: transaction.token1Symbol })}\r\n        </Text>\r\n      </LinkExternal>\r\n      <Text>${formatAmount(transaction.amountUSD)}</Text>\r\n      <Text>\r\n        <Text>{`${formatAmount(abs0)} ${transaction.token0Symbol}`}</Text>\r\n      </Text>\r\n      <Text>\r\n        <Text>{`${formatAmount(abs1)} ${transaction.token1Symbol}`}</Text>\r\n      </Text>\r\n      <LinkExternal href={getBscScanLink(transaction.sender, 'address')}>\r\n        {truncateHash(transaction.sender)}\r\n      </LinkExternal>\r\n      <Text>{formatDistanceToNowStrict(parseInt(transaction.timestamp, 10) * 1000)}</Text>\r\n    </ResponsiveGrid>\r\n  )\r\n}\r\n\r\nconst TransactionTable: React.FC<{\r\n  transactions: Transaction[]\r\n}> = ({ transactions }) => {\r\n  const [sortField, setSortField] = useState(SORT_FIELD.timestamp)\r\n  const [sortDirection, setSortDirection] = useState<boolean>(true)\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const [page, setPage] = useState(1)\r\n  const [maxPage, setMaxPage] = useState(1)\r\n\r\n  const [txFilter, setTxFilter] = useState<TransactionType | undefined>(undefined)\r\n\r\n  const sortedTransactions = useMemo(() => {\r\n    return transactions\r\n      ? transactions\r\n          .slice()\r\n          .sort((a, b) => {\r\n            if (a && b) {\r\n              return a[sortField as keyof Transaction] > b[sortField as keyof Transaction]\r\n                ? (sortDirection ? -1 : 1) * 1\r\n                : (sortDirection ? -1 : 1) * -1\r\n            }\r\n            return -1\r\n          })\r\n          .filter((x) => {\r\n            return txFilter === undefined || x.type === txFilter\r\n          })\r\n          .slice(ITEMS_PER_INFO_TABLE_PAGE * (page - 1), page * ITEMS_PER_INFO_TABLE_PAGE)\r\n      : []\r\n  }, [transactions, page, sortField, sortDirection, txFilter])\r\n\r\n  // Update maxPage based on amount of items & applied filtering\r\n  useEffect(() => {\r\n    if (transactions) {\r\n      const filteredTransactions = transactions.filter((tx) => {\r\n        return txFilter === undefined || tx.type === txFilter\r\n      })\r\n      if (filteredTransactions.length % ITEMS_PER_INFO_TABLE_PAGE === 0) {\r\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE))\r\n      } else {\r\n        setMaxPage(Math.floor(filteredTransactions.length / ITEMS_PER_INFO_TABLE_PAGE) + 1)\r\n      }\r\n    }\r\n  }, [transactions, txFilter])\r\n\r\n  const handleFilter = useCallback(\r\n    (newFilter: TransactionType) => {\r\n      if (newFilter !== txFilter) {\r\n        setTxFilter(newFilter)\r\n        setPage(1)\r\n      }\r\n    },\r\n    [txFilter],\r\n  )\r\n\r\n  const handleSort = useCallback(\r\n    (newField: string) => {\r\n      setSortField(newField)\r\n      setSortDirection(sortField !== newField ? true : !sortDirection)\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  const arrow = useCallback(\r\n    (field: string) => {\r\n      const directionArrow = !sortDirection ? '↑' : '↓'\r\n      return sortField === field ? directionArrow : ''\r\n    },\r\n    [sortDirection, sortField],\r\n  )\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex mb=\"16px\">\r\n        <Flex flexDirection={['column', 'row']}>\r\n          <RadioGroup onClick={() => handleFilter(undefined)}>\r\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === undefined} />\r\n            <Text ml=\"8px\">{t('All')}</Text>\r\n          </RadioGroup>\r\n\r\n          <RadioGroup onClick={() => handleFilter(TransactionType.SWAP)}>\r\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.SWAP} />\r\n            <Text ml=\"8px\">{t('Swaps')}</Text>\r\n          </RadioGroup>\r\n        </Flex>\r\n\r\n        <Flex flexDirection={['column', 'row']}>\r\n          <RadioGroup onClick={() => handleFilter(TransactionType.MINT)}>\r\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.MINT} />\r\n            <Text ml=\"8px\">{t('Adds')}</Text>\r\n          </RadioGroup>\r\n\r\n          <RadioGroup onClick={() => handleFilter(TransactionType.BURN)}>\r\n            <Radio onChange={() => null} scale=\"sm\" checked={txFilter === TransactionType.BURN} />\r\n            <Text ml=\"8px\">{t('Removes')}</Text>\r\n          </RadioGroup>\r\n        </Flex>\r\n      </Flex>\r\n      <TableWrapper>\r\n        <ResponsiveGrid>\r\n          <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n            {t('Action')}\r\n          </Text>\r\n          <ClickableColumnHeader\r\n            color=\"secondary\"\r\n            fontSize=\"12px\"\r\n            bold\r\n            onClick={() => handleSort(SORT_FIELD.amountUSD)}\r\n            textTransform=\"uppercase\"\r\n          >\r\n            {t('Total Value')} {arrow(SORT_FIELD.amountUSD)}\r\n          </ClickableColumnHeader>\r\n          <ClickableColumnHeader\r\n            color=\"secondary\"\r\n            fontSize=\"12px\"\r\n            bold\r\n            onClick={() => handleSort(SORT_FIELD.amountToken0)}\r\n            textTransform=\"uppercase\"\r\n          >\r\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken0)}\r\n          </ClickableColumnHeader>\r\n          <ClickableColumnHeader\r\n            color=\"secondary\"\r\n            fontSize=\"12px\"\r\n            bold\r\n            onClick={() => handleSort(SORT_FIELD.amountToken1)}\r\n            textTransform=\"uppercase\"\r\n          >\r\n            {t('Token Amount')} {arrow(SORT_FIELD.amountToken1)}\r\n          </ClickableColumnHeader>\r\n          <ClickableColumnHeader\r\n            color=\"secondary\"\r\n            fontSize=\"12px\"\r\n            bold\r\n            onClick={() => handleSort(SORT_FIELD.sender)}\r\n            textTransform=\"uppercase\"\r\n          >\r\n            {t('Account')} {arrow(SORT_FIELD.sender)}\r\n          </ClickableColumnHeader>\r\n          <ClickableColumnHeader\r\n            color=\"secondary\"\r\n            fontSize=\"12px\"\r\n            bold\r\n            onClick={() => handleSort(SORT_FIELD.timestamp)}\r\n            textTransform=\"uppercase\"\r\n          >\r\n            {t('Time')} {arrow(SORT_FIELD.timestamp)}\r\n          </ClickableColumnHeader>\r\n        </ResponsiveGrid>\r\n        <Break />\r\n\r\n        {transactions ? (\r\n          <>\r\n            {sortedTransactions.map((transaction, index) => {\r\n              if (transaction) {\r\n                return (\r\n                  // eslint-disable-next-line react/no-array-index-key\r\n                  <React.Fragment key={index}>\r\n                    <DataRow transaction={transaction} />\r\n                    <Break />\r\n                  </React.Fragment>\r\n                )\r\n              }\r\n              return null\r\n            })}\r\n            {sortedTransactions.length === 0 ? (\r\n              <Flex justifyContent=\"center\">\r\n                <Text>{t('No Transactions')}</Text>\r\n              </Flex>\r\n            ) : undefined}\r\n            <PageButtons>\r\n              <Arrow\r\n                onClick={() => {\r\n                  setPage(page === 1 ? page : page - 1)\r\n                }}\r\n              >\r\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n\r\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\r\n              <Arrow\r\n                onClick={() => {\r\n                  setPage(page === maxPage ? page : page + 1)\r\n                }}\r\n              >\r\n                <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n            </PageButtons>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <TableLoader />\r\n            {/* spacer */}\r\n            <Box />\r\n          </>\r\n        )}\r\n      </TableWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default TransactionTable\r\n","import React, { useState, useMemo, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Box, Text, Heading, Card, Skeleton } from '@pancakeswap/uikit'\r\nimport { fromUnixTime } from 'date-fns'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/Layout/Page'\r\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\r\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\r\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\r\nimport {\r\n  useAllPoolData,\r\n  useAllTokenData,\r\n  useProtocolChartData,\r\n  useProtocolData,\r\n  useProtocolTransactions,\r\n} from 'state/info/hooks'\r\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\r\n\r\nexport const ChartCardsContainer = styled(Flex)`\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  padding: 0;\r\n  gap: 1em;\r\n\r\n  & > * {\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-direction: row;\r\n  } ;\r\n`\r\n\r\nconst Overview: React.FC = () => {\r\n  const {\r\n    t,\r\n    currentLanguage: { locale },\r\n  } = useTranslation()\r\n  const [liquidityHover, setLiquidityHover] = useState<number | undefined>()\r\n  const [liquidityDateHover, setLiquidityDateHover] = useState<string | undefined>()\r\n  const [volumeHover, setVolumeHover] = useState<number | undefined>()\r\n  const [volumeDateHover, setVolumeDateHover] = useState<string | undefined>()\r\n\r\n  const [protocolData] = useProtocolData()\r\n  const [chartData] = useProtocolChartData()\r\n  const [transactions] = useProtocolTransactions()\r\n\r\n  const currentDate = new Date().toLocaleString(locale, { month: 'short', year: 'numeric', day: 'numeric' })\r\n\r\n  // Getting latest liquidity and volumeUSD to display on top of chart when not hovered\r\n  useEffect(() => {\r\n    if (volumeHover == null && protocolData) {\r\n      setVolumeHover(protocolData.volumeUSD)\r\n    }\r\n  }, [protocolData, volumeHover])\r\n  useEffect(() => {\r\n    if (liquidityHover == null && protocolData) {\r\n      setLiquidityHover(protocolData.liquidityUSD)\r\n    }\r\n  }, [liquidityHover, protocolData])\r\n\r\n  const formattedLiquidityData = useMemo(() => {\r\n    if (chartData) {\r\n      return chartData.map((day) => {\r\n        return {\r\n          time: fromUnixTime(day.date),\r\n          value: day.liquidityUSD,\r\n        }\r\n      })\r\n    }\r\n    return []\r\n  }, [chartData])\r\n\r\n  const formattedVolumeData = useMemo(() => {\r\n    if (chartData) {\r\n      return chartData.map((day) => {\r\n        return {\r\n          time: fromUnixTime(day.date),\r\n          value: day.volumeUSD,\r\n        }\r\n      })\r\n    }\r\n    return []\r\n  }, [chartData])\r\n\r\n  const allTokens = useAllTokenData()\r\n\r\n  const formattedTokens = useMemo(() => {\r\n    return Object.values(allTokens)\r\n      .map((token) => token.data)\r\n      .filter((token) => token)\r\n  }, [allTokens])\r\n\r\n  const allPoolData = useAllPoolData()\r\n  const poolDatas = useMemo(() => {\r\n    return Object.values(allPoolData)\r\n      .map((pool) => pool.data)\r\n      .filter((pool) => pool)\r\n  }, [allPoolData])\r\n\r\n  const somePoolsAreLoading = useMemo(() => {\r\n    return Object.values(allPoolData).some((pool) => !pool.data)\r\n  }, [allPoolData])\r\n\r\n  return (\r\n    <Page>\r\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\r\n        {t('PancakeSwap Info & Analytics')}\r\n      </Heading>\r\n      <ChartCardsContainer>\r\n        <Card>\r\n          <Box p={['16px', '16px', '24px']}>\r\n            <Text bold color=\"secondary\">\r\n              {t('Liquidity')}\r\n            </Text>\r\n            {liquidityHover > 0 ? (\r\n              <Text bold fontSize=\"24px\">\r\n                ${formatAmount(liquidityHover)}\r\n              </Text>\r\n            ) : (\r\n              <Skeleton width=\"128px\" height=\"36px\" />\r\n            )}\r\n            <Text>{liquidityDateHover ?? currentDate}</Text>\r\n            <Box height=\"250px\">\r\n              <LineChart\r\n                data={formattedLiquidityData}\r\n                setHoverValue={setLiquidityHover}\r\n                setHoverDate={setLiquidityDateHover}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        </Card>\r\n        <Card>\r\n          <Box p={['16px', '16px', '24px']}>\r\n            <Text bold color=\"secondary\">\r\n              {t('Volume 24H')}\r\n            </Text>\r\n            {volumeHover > 0 ? (\r\n              <Text bold fontSize=\"24px\">\r\n                ${formatAmount(volumeHover)}\r\n              </Text>\r\n            ) : (\r\n              <Skeleton width=\"128px\" height=\"36px\" />\r\n            )}\r\n            <Text>{volumeDateHover ?? currentDate}</Text>\r\n            <Box height=\"250px\">\r\n              <BarChart data={formattedVolumeData} setHoverValue={setVolumeHover} setHoverDate={setVolumeDateHover} />\r\n            </Box>\r\n          </Box>\r\n        </Card>\r\n      </ChartCardsContainer>\r\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\r\n        {t('Top Tokens')}\r\n      </Heading>\r\n      <TokenTable tokenDatas={formattedTokens} />\r\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\r\n        {t('Top Pools')}\r\n      </Heading>\r\n      <PoolTable poolDatas={poolDatas} loading={somePoolsAreLoading} />\r\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\r\n        {t('Transactions')}\r\n      </Heading>\r\n      <TransactionTable transactions={transactions} />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Overview\r\n","import React, { useMemo } from 'react'\r\nimport { Text, Heading, Card } from '@pancakeswap/uikit'\r\nimport Page from 'components/Layout/Page'\r\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\r\nimport { useAllPoolData, usePoolDatas } from 'state/info/hooks'\r\nimport { useWatchlistPools } from 'state/user/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst PoolsOverview: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  // get all the pool datas that exist\r\n  const allPoolData = useAllPoolData()\r\n  const poolDatas = useMemo(() => {\r\n    return Object.values(allPoolData)\r\n      .map((pool) => pool.data)\r\n      .filter((pool) => pool)\r\n  }, [allPoolData])\r\n\r\n  const [savedPools] = useWatchlistPools()\r\n  const watchlistPools = usePoolDatas(savedPools)\r\n\r\n  return (\r\n    <Page>\r\n      <Heading scale=\"lg\" mb=\"16px\">\r\n        {t('Your Watchlist')}\r\n      </Heading>\r\n      <Card>\r\n        {watchlistPools.length > 0 ? (\r\n          <PoolTable poolDatas={watchlistPools} />\r\n        ) : (\r\n          <Text px=\"24px\" py=\"16px\">\r\n            {t('Saved pools will appear here')}\r\n          </Text>\r\n        )}\r\n      </Card>\r\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-pools-title\">\r\n        {t('All Pools')}\r\n      </Heading>\r\n      <PoolTable poolDatas={poolDatas} />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default PoolsOverview\r\n","import React, { useRef, useState, useEffect, useCallback, Dispatch, SetStateAction } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { createChart, IChartApi } from 'lightweight-charts'\r\nimport { format } from 'date-fns'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { CandleChartLoader } from 'views/Info/components/ChartLoaders'\r\n\r\nconst CANDLE_CHART_HEIGHT = 250\r\n\r\nexport type LineChartProps = {\r\n  data: any[]\r\n  setValue?: Dispatch<SetStateAction<number | undefined>> // used for value on hover\r\n  setLabel?: Dispatch<SetStateAction<string | undefined>> // used for value label on hover\r\n} & React.HTMLAttributes<HTMLDivElement>\r\n\r\nconst CandleChart = ({ data, setValue, setLabel, ...rest }: LineChartProps) => {\r\n  const { theme } = useTheme()\r\n  const {\r\n    currentLanguage: { locale },\r\n  } = useTranslation()\r\n  const chartRef = useRef<HTMLDivElement>(null)\r\n  const [chartCreated, setChart] = useState<IChartApi | undefined>()\r\n\r\n  const handleResize = useCallback(() => {\r\n    if (chartCreated && chartRef?.current?.parentElement) {\r\n      chartCreated.resize(chartRef.current.parentElement.clientWidth - 32, CANDLE_CHART_HEIGHT)\r\n      chartCreated.timeScale().fitContent()\r\n      chartCreated.timeScale().scrollToPosition(0, false)\r\n    }\r\n  }, [chartCreated, chartRef])\r\n\r\n  // add event listener for resize\r\n  const isClient = typeof window === 'object'\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      return null\r\n    }\r\n    window.addEventListener('resize', handleResize)\r\n    return () => window.removeEventListener('resize', handleResize)\r\n  }, [isClient, chartRef, handleResize]) // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  // if chart not instantiated in canvas, create it\r\n  useEffect(() => {\r\n    if (!chartCreated && data && !!chartRef?.current?.parentElement) {\r\n      const chart = createChart(chartRef.current, {\r\n        height: CANDLE_CHART_HEIGHT,\r\n        width: chartRef.current.parentElement.clientWidth - 32,\r\n        layout: {\r\n          backgroundColor: 'transparent',\r\n          textColor: theme.colors.textSubtle,\r\n          fontFamily: 'Kanit, sans-serif',\r\n          fontSize: 12,\r\n        },\r\n        rightPriceScale: {\r\n          scaleMargins: {\r\n            top: 0.1,\r\n            bottom: 0.1,\r\n          },\r\n          borderVisible: false,\r\n        },\r\n        timeScale: {\r\n          borderVisible: false,\r\n          secondsVisible: true,\r\n          tickMarkFormatter: (unixTime: number) => {\r\n            return format(unixTime * 1000, 'MM/dd h:mm a')\r\n          },\r\n        },\r\n        watermark: {\r\n          visible: false,\r\n        },\r\n        grid: {\r\n          horzLines: {\r\n            visible: false,\r\n          },\r\n          vertLines: {\r\n            visible: false,\r\n          },\r\n        },\r\n        crosshair: {\r\n          horzLine: {\r\n            visible: false,\r\n            labelVisible: false,\r\n          },\r\n          mode: 1,\r\n          vertLine: {\r\n            visible: true,\r\n            labelVisible: false,\r\n            style: 3,\r\n            width: 1,\r\n            color: theme.colors.textSubtle,\r\n            labelBackgroundColor: theme.colors.primary,\r\n          },\r\n        },\r\n      })\r\n\r\n      chart.timeScale().fitContent()\r\n      setChart(chart)\r\n    }\r\n  }, [chartCreated, data, setValue, theme])\r\n\r\n  useEffect(() => {\r\n    if (chartCreated && data) {\r\n      const series = chartCreated.addCandlestickSeries({\r\n        upColor: theme.colors.success,\r\n        downColor: theme.colors.failure,\r\n        borderDownColor: theme.colors.failure,\r\n        borderUpColor: theme.colors.success,\r\n        wickDownColor: theme.colors.failure,\r\n        wickUpColor: theme.colors.success,\r\n      })\r\n\r\n      series.setData(data)\r\n\r\n      // update the title when hovering on the chart\r\n      chartCreated.subscribeCrosshairMove((param) => {\r\n        if (\r\n          chartRef?.current &&\r\n          (param === undefined ||\r\n            param.time === undefined ||\r\n            (param && param.point && param.point.x < 0) ||\r\n            (param && param.point && param.point.x > chartRef.current.clientWidth) ||\r\n            (param && param.point && param.point.y < 0) ||\r\n            (param && param.point && param.point.y > CANDLE_CHART_HEIGHT))\r\n        ) {\r\n          // reset values\r\n          if (setValue) setValue(undefined)\r\n          if (setLabel) setLabel(undefined)\r\n        } else if (series && param) {\r\n          const timestamp = param.time as number\r\n          const now = new Date(timestamp * 1000)\r\n          const time = `${now.toLocaleString(locale, {\r\n            year: 'numeric',\r\n            month: 'short',\r\n            day: 'numeric',\r\n            hour: 'numeric',\r\n            minute: '2-digit',\r\n            timeZone: 'UTC',\r\n          })} (UTC)`\r\n          const parsed = param.seriesPrices.get(series) as { open: number } | undefined\r\n          if (setValue) setValue(parsed?.open)\r\n          if (setLabel) setLabel(time)\r\n        }\r\n      })\r\n    }\r\n  }, [locale, chartCreated, data, setValue, setLabel, theme])\r\n\r\n  return (\r\n    <>\r\n      {!chartCreated && <CandleChartLoader />}\r\n      <div ref={chartRef} id=\"candle-chart\" {...rest} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CandleChart\r\n","/* eslint-disable no-nested-ternary */\r\nimport React, { useEffect, useState } from 'react'\r\nimport { RouteComponentProps, Link } from 'react-router-dom'\r\nimport {\r\n  Text,\r\n  Flex,\r\n  Box,\r\n  Button,\r\n  Card,\r\n  Breadcrumbs,\r\n  Heading,\r\n  Spinner,\r\n  LinkExternal,\r\n  useMatchBreakpoints,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  HelpIcon,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport Page from 'components/Layout/Page'\r\nimport { getBscScanLink } from 'utils'\r\nimport { CurrencyLogo, DoubleCurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport Percent from 'views/Info/components/Percent'\r\nimport SaveIcon from 'views/Info/components/SaveIcon'\r\nimport { usePoolDatas, usePoolChartData, usePoolTransactions } from 'state/info/hooks'\r\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\r\nimport { useWatchlistPools } from 'state/user/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\r\n\r\nconst ContentLayout = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 300px 1fr;\r\n  grid-gap: 1em;\r\n  margin-top: 16px;\r\n  @media screen and (max-width: 800px) {\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n  }\r\n`\r\n\r\nconst TokenButton = styled(Flex)`\r\n  padding: 8px 0px;\r\n  margin-right: 16px;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst LockedTokensContainer = styled(Flex)`\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  padding: 16px;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  margin-top: 8px;\r\n  border-radius: 16px;\r\n  max-width: 280px;\r\n`\r\n\r\nconst PoolPage: React.FC<RouteComponentProps<{ address: string }>> = ({\r\n  match: {\r\n    params: { address: routeAddress },\r\n  },\r\n}) => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { t } = useTranslation()\r\n  const [showWeeklyData, setShowWeeklyData] = useState(0)\r\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\r\n    t(`Based on last 7 days' performance. Does not account for impermanent loss`),\r\n    {},\r\n  )\r\n\r\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\r\n  const address = routeAddress.toLowerCase()\r\n\r\n  const poolData = usePoolDatas([address])[0]\r\n  const chartData = usePoolChartData(address)\r\n  const transactions = usePoolTransactions(address)\r\n\r\n  const [watchlistPools, addPoolToWatchlist] = useWatchlistPools()\r\n\r\n  return (\r\n    <Page symbol={poolData ? `${poolData?.token0.symbol} / ${poolData?.token1.symbol}` : null}>\r\n      {poolData ? (\r\n        <>\r\n          <Flex justifyContent=\"space-between\" mb=\"16px\" flexDirection={['column', 'column', 'row']}>\r\n            <Breadcrumbs mb=\"32px\">\r\n              <Link to=\"/info\">\r\n                <Text color=\"primary\">{t('Info')}</Text>\r\n              </Link>\r\n              <Link to=\"/info/pools\">\r\n                <Text color=\"primary\">{t('Pools')}</Text>\r\n              </Link>\r\n              <Flex>\r\n                <Text mr=\"8px\">{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\r\n              </Flex>\r\n            </Breadcrumbs>\r\n            <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\r\n              <LinkExternal mr=\"8px\" href={getBscScanLink(address, 'address')}>\r\n                {t('View on BscScan')}\r\n              </LinkExternal>\r\n              <SaveIcon fill={watchlistPools.includes(address)} onClick={() => addPoolToWatchlist(address)} />\r\n            </Flex>\r\n          </Flex>\r\n          <Flex flexDirection=\"column\">\r\n            <Flex alignItems=\"center\" mb={['8px', null]}>\r\n              <DoubleCurrencyLogo address0={poolData.token0.address} address1={poolData.token1.address} size={32} />\r\n              <Text\r\n                ml=\"38px\"\r\n                bold\r\n                fontSize={isXs || isSm ? '24px' : '40px'}\r\n                id=\"info-pool-pair-title\"\r\n              >{`${poolData.token0.symbol} / ${poolData.token1.symbol}`}</Text>\r\n            </Flex>\r\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\r\n              <Flex flexDirection={['column', 'column', 'row']} mb={['8px', '8px', null]}>\r\n                <Link to={`/info/token/${poolData.token0.address}`}>\r\n                  <TokenButton>\r\n                    <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\r\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\r\n                      {`1 ${poolData.token0.symbol} =  ${formatAmount(poolData.token1Price, {\r\n                        notation: 'standard',\r\n                        displayThreshold: 0.001,\r\n                        tokenPrecision: true,\r\n                      })} ${poolData.token1.symbol}`}\r\n                    </Text>\r\n                  </TokenButton>\r\n                </Link>\r\n                <Link to={`/info/token/${poolData.token1.address}`}>\r\n                  <TokenButton ml={[null, null, '10px']}>\r\n                    <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\r\n                    <Text fontSize=\"16px\" ml=\"4px\" style={{ whiteSpace: 'nowrap' }} width=\"fit-content\">\r\n                      {`1 ${poolData.token1.symbol} =  ${formatAmount(poolData.token0Price, {\r\n                        notation: 'standard',\r\n                        displayThreshold: 0.001,\r\n                        tokenPrecision: true,\r\n                      })} ${poolData.token0.symbol}`}\r\n                    </Text>\r\n                  </TokenButton>\r\n                </Link>\r\n              </Flex>\r\n              <Flex>\r\n                <Link to={`/add/${poolData.token0.address}/${poolData.token1.address}`}>\r\n                  <Button mr=\"8px\" variant=\"secondary\">\r\n                    {t('Add Liquidity')}\r\n                  </Button>\r\n                </Link>\r\n                <Link to={`/swap?inputCurrency=${poolData.token0.address}&outputCurrency=${poolData.token1.address}`}>\r\n                  <Button>{t('Trade')}</Button>\r\n                </Link>\r\n              </Flex>\r\n            </Flex>\r\n          </Flex>\r\n          <ContentLayout>\r\n            <Box>\r\n              <Card>\r\n                <Box p=\"24px\">\r\n                  <Flex justifyContent=\"space-between\">\r\n                    <Flex flex=\"1\" flexDirection=\"column\">\r\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\r\n                        {t('Liquidity')}\r\n                      </Text>\r\n                      <Text fontSize=\"24px\" bold>\r\n                        ${formatAmount(poolData.liquidityUSD)}\r\n                      </Text>\r\n                      <Percent value={poolData.liquidityUSDChange} />\r\n                    </Flex>\r\n                    <Flex flex=\"1\" flexDirection=\"column\">\r\n                      <Text color=\"secondary\" bold fontSize=\"12px\" textTransform=\"uppercase\">\r\n                        {t('LP reward APR')}\r\n                      </Text>\r\n                      <Text fontSize=\"24px\" bold>\r\n                        {formatAmount(poolData.lpApr7d)}%\r\n                      </Text>\r\n                      <Flex alignItems=\"center\">\r\n                        <span ref={targetRef}>\r\n                          <HelpIcon color=\"textSubtle\" />\r\n                        </span>\r\n                        <Text ml=\"4px\" fontSize=\"12px\" color=\"textSubtle\">\r\n                          {t('7D performance')}\r\n                        </Text>\r\n                        {tooltipVisible && tooltip}\r\n                      </Flex>\r\n                    </Flex>\r\n                  </Flex>\r\n                  <Text color=\"secondary\" bold mt=\"24px\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                    {t('Total Tokens Locked')}\r\n                  </Text>\r\n                  <LockedTokensContainer>\r\n                    <Flex justifyContent=\"space-between\">\r\n                      <Flex>\r\n                        <CurrencyLogo address={poolData.token0.address} size=\"24px\" />\r\n                        <Text small color=\"textSubtle\" ml=\"8px\">\r\n                          {poolData.token0.symbol}\r\n                        </Text>\r\n                      </Flex>\r\n                      <Text small>{formatAmount(poolData.liquidityToken0)}</Text>\r\n                    </Flex>\r\n                    <Flex justifyContent=\"space-between\">\r\n                      <Flex>\r\n                        <CurrencyLogo address={poolData.token1.address} size=\"24px\" />\r\n                        <Text small color=\"textSubtle\" ml=\"8px\">\r\n                          {poolData.token1.symbol}\r\n                        </Text>\r\n                      </Flex>\r\n                      <Text small>{formatAmount(poolData.liquidityToken1)}</Text>\r\n                    </Flex>\r\n                  </LockedTokensContainer>\r\n                </Box>\r\n              </Card>\r\n              <Card mt=\"16px\">\r\n                <Flex flexDirection=\"column\" p=\"24px\">\r\n                  <ButtonMenu\r\n                    activeIndex={showWeeklyData}\r\n                    onItemClick={(index) => setShowWeeklyData(index)}\r\n                    scale=\"sm\"\r\n                    variant=\"subtle\"\r\n                  >\r\n                    <ButtonMenuItem width=\"100%\">{t('24H')}</ButtonMenuItem>\r\n                    <ButtonMenuItem width=\"100%\">{t('7D')}</ButtonMenuItem>\r\n                  </ButtonMenu>\r\n                  <Flex mt=\"24px\">\r\n                    <Flex flex=\"1\" flexDirection=\"column\">\r\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n                        {showWeeklyData ? t('Volume 7D') : t('Volume 24H')}\r\n                      </Text>\r\n                      <Text fontSize=\"24px\" bold>\r\n                        ${showWeeklyData ? formatAmount(poolData.volumeUSDWeek) : formatAmount(poolData.volumeUSD)}\r\n                      </Text>\r\n                      <Percent value={showWeeklyData ? poolData.volumeUSDChangeWeek : poolData.volumeUSDChange} />\r\n                    </Flex>\r\n                    <Flex flex=\"1\" flexDirection=\"column\">\r\n                      <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n                        {showWeeklyData ? t('LP reward fees 7D') : t('LP reward fees 24H')}\r\n                      </Text>\r\n                      <Text fontSize=\"24px\" bold>\r\n                        ${showWeeklyData ? formatAmount(poolData.lpFees7d) : formatAmount(poolData.lpFees24h)}\r\n                      </Text>\r\n                      <Text color=\"textSubtle\" fontSize=\"12px\">\r\n                        {t('out of $%totalFees% total fees', {\r\n                          totalFees: showWeeklyData\r\n                            ? formatAmount(poolData.totalFees7d)\r\n                            : formatAmount(poolData.totalFees24h),\r\n                        })}\r\n                      </Text>\r\n                    </Flex>\r\n                  </Flex>\r\n                </Flex>\r\n              </Card>\r\n            </Box>\r\n            <ChartCard variant=\"pool\" chartData={chartData} />\r\n          </ContentLayout>\r\n          <Heading mb=\"16px\" mt=\"40px\" scale=\"lg\">\r\n            {t('Transactions')}\r\n          </Heading>\r\n          <TransactionTable transactions={transactions} />\r\n        </>\r\n      ) : (\r\n        <Flex mt=\"80px\" justifyContent=\"center\">\r\n          <Spinner />\r\n        </Flex>\r\n      )}\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default PoolPage\r\n","import React, { useMemo, useRef, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Box, Card } from '@pancakeswap/uikit'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAllTokenData } from 'state/info/hooks'\r\nimport { TokenData } from 'state/info/types'\r\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport Percent from 'views/Info/components/Percent'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst CardWrapper = styled(Link)`\r\n  display: inline-block;\r\n  min-width: 190px;\r\n  margin-left: 16px;\r\n  :hover {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n  }\r\n`\r\n\r\nconst TopMoverCard = styled(Box)`\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  padding: 16px;\r\n`\r\n\r\nexport const ScrollableRow = styled.div`\r\n  width: 100%;\r\n  overflow-x: auto;\r\n  padding: 16px 0;\r\n  white-space: nowrap;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst DataCard = ({ tokenData }: { tokenData: TokenData }) => {\r\n  return (\r\n    <CardWrapper to={`/info/token/${tokenData.address}`}>\r\n      <TopMoverCard>\r\n        <Flex>\r\n          <Box width=\"32px\" height=\"32px\">\r\n            {/* wrapped in a box because of alignment issues between img and svg */}\r\n            <CurrencyLogo address={tokenData.address} size=\"32px\" />\r\n          </Box>\r\n          <Box ml=\"16px\">\r\n            <Text>{tokenData.symbol}</Text>\r\n            <Flex alignItems=\"center\">\r\n              <Text fontSize=\"14px\" mr=\"6px\" lineHeight=\"16px\">\r\n                ${formatAmount(tokenData.priceUSD)}\r\n              </Text>\r\n              <Percent fontSize=\"14px\" value={tokenData.priceUSDChange} />\r\n            </Flex>\r\n          </Box>\r\n        </Flex>\r\n      </TopMoverCard>\r\n    </CardWrapper>\r\n  )\r\n}\r\n\r\nconst TopTokenMovers: React.FC = () => {\r\n  const allTokens = useAllTokenData()\r\n  const { t } = useTranslation()\r\n\r\n  const topPriceIncrease = useMemo(() => {\r\n    return Object.values(allTokens)\r\n      .sort(({ data: a }, { data: b }) => {\r\n        // eslint-disable-next-line no-nested-ternary\r\n        return a && b ? (Math.abs(a?.priceUSDChange) > Math.abs(b?.priceUSDChange) ? -1 : 1) : -1\r\n      })\r\n      .slice(0, Math.min(20, Object.values(allTokens).length))\r\n  }, [allTokens])\r\n\r\n  const increaseRef = useRef<HTMLDivElement>(null)\r\n  const moveLeftRef = useRef<boolean>(true)\r\n\r\n  useEffect(() => {\r\n    const scrollInterval = setInterval(() => {\r\n      if (increaseRef.current) {\r\n        if (increaseRef.current.scrollLeft === increaseRef.current.scrollWidth - increaseRef.current.clientWidth) {\r\n          moveLeftRef.current = false\r\n        } else if (increaseRef.current.scrollLeft === 0) {\r\n          moveLeftRef.current = true\r\n        }\r\n        increaseRef.current.scrollTo(\r\n          moveLeftRef.current ? increaseRef.current.scrollLeft + 1 : increaseRef.current.scrollLeft - 1,\r\n          0,\r\n        )\r\n      }\r\n    }, 30)\r\n\r\n    return () => {\r\n      clearInterval(scrollInterval)\r\n    }\r\n  }, [])\r\n\r\n  if (topPriceIncrease.length === 0 || !topPriceIncrease.some((entry) => entry.data)) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Card my=\"16px\">\r\n      <Text ml=\"16px\" mt=\"8px\">\r\n        {t('Top Movers')}\r\n      </Text>\r\n      <ScrollableRow ref={increaseRef}>\r\n        {topPriceIncrease.map((entry) =>\r\n          entry.data ? <DataCard key={`top-card-token-${entry.data?.address}`} tokenData={entry.data} /> : null,\r\n        )}\r\n      </ScrollableRow>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default TopTokenMovers\r\n","import React, { useMemo, useEffect } from 'react'\r\nimport { Text, Heading, Card } from '@pancakeswap/uikit'\r\nimport Page from 'components/Layout/Page'\r\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\r\nimport { useAllTokenData, useTokenDatas } from 'state/info/hooks'\r\nimport { useWatchlistTokens } from 'state/user/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TopTokenMovers from 'views/Info/components/TopTokenMovers'\r\n\r\nconst TokensOverview: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  const allTokens = useAllTokenData()\r\n\r\n  const formattedTokens = useMemo(() => {\r\n    return Object.values(allTokens)\r\n      .map((token) => token.data)\r\n      .filter((token) => token)\r\n  }, [allTokens])\r\n\r\n  const [savedTokens] = useWatchlistTokens()\r\n  const watchListTokens = useTokenDatas(savedTokens)\r\n\r\n  return (\r\n    <Page>\r\n      <Heading scale=\"lg\" mb=\"16px\">\r\n        {t('Your Watchlist')}\r\n      </Heading>\r\n      {savedTokens.length > 0 ? (\r\n        <TokenTable tokenDatas={watchListTokens} />\r\n      ) : (\r\n        <Card>\r\n          <Text py=\"16px\" px=\"24px\">\r\n            {t('Saved tokens will appear here')}\r\n          </Text>\r\n        </Card>\r\n      )}\r\n      <TopTokenMovers />\r\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\" id=\"info-tokens-title\">\r\n        {t('All Tokens')}\r\n      </Heading>\r\n      <TokenTable tokenDatas={formattedTokens} />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default TokensOverview\r\n","import { useState, useEffect } from 'react'\r\n\r\n// endpoint to check asset exists and get url to CMC page\r\n// returns 400 status code if token is not on CMC\r\nconst CMC_ENDPOINT = 'https://3rdparty-apis.coinmarketcap.com/v1/cryptocurrency/contract?address='\r\n\r\n/**\r\n * Check if asset exists on CMC, if exists\r\n * return  url, if not return undefined\r\n * @param address token address (all lowercase, checksummed are not supported by CMC)\r\n */\r\nconst useCMCLink = (address: string): string | undefined => {\r\n  const [cmcPageUrl, setCMCPageUrl] = useState<string | undefined>(undefined)\r\n\r\n  useEffect(() => {\r\n    const fetchLink = async () => {\r\n      const result = await fetch(`${CMC_ENDPOINT}${address}`)\r\n      // if link exists, format the url\r\n      if (result.status === 200) {\r\n        result.json().then(({ data }) => {\r\n          setCMCPageUrl(data.url)\r\n        })\r\n      }\r\n    }\r\n    if (address) {\r\n      fetchLink()\r\n    }\r\n  }, [address])\r\n\r\n  return cmcPageUrl\r\n}\r\n\r\nexport default useCMCLink\r\n","/* eslint-disable no-nested-ternary */\r\nimport React, { useEffect, useMemo } from 'react'\r\nimport { RouteComponentProps, Link } from 'react-router-dom'\r\nimport { Duration } from 'date-fns'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Text,\r\n  Box,\r\n  Heading,\r\n  Button,\r\n  Card,\r\n  Flex,\r\n  Breadcrumbs,\r\n  Link as UIKitLink,\r\n  LinkExternal,\r\n  Spinner,\r\n  Image,\r\n  useMatchBreakpoints,\r\n} from '@pancakeswap/uikit'\r\nimport Page from 'components/Layout/Page'\r\nimport { getBscScanLink } from 'utils'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport useCMCLink from 'views/Info/hooks/useCMCLink'\r\nimport { CurrencyLogo } from 'views/Info/components/CurrencyLogo'\r\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\r\nimport Percent from 'views/Info/components/Percent'\r\nimport SaveIcon from 'views/Info/components/SaveIcon'\r\nimport {\r\n  usePoolDatas,\r\n  useTokenData,\r\n  usePoolsForToken,\r\n  useTokenChartData,\r\n  useTokenPriceData,\r\n  useTokenTransactions,\r\n} from 'state/info/hooks'\r\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\r\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\r\nimport { useWatchlistTokens } from 'state/user/hooks'\r\nimport { ONE_HOUR_SECONDS } from 'config/constants/info'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ChartCard from 'views/Info/components/InfoCharts/ChartCard'\r\n\r\nconst ContentLayout = styled.div`\r\n  margin-top: 16px;\r\n  display: grid;\r\n  grid-template-columns: 260px 1fr;\r\n  grid-gap: 1em;\r\n  @media screen and (max-width: 800px) {\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n  }\r\n`\r\n\r\nconst StyledCMCLink = styled(UIKitLink)`\r\n  width: 24px;\r\n  height: 24px;\r\n  margin-right: 8px;\r\n\r\n  & :hover {\r\n    opacity: 0.8;\r\n  }\r\n`\r\nconst DEFAULT_TIME_WINDOW: Duration = { weeks: 1 }\r\n\r\nconst TokenPage: React.FC<RouteComponentProps<{ address: string }>> = ({\r\n  match: {\r\n    params: { address: routeAddress },\r\n  },\r\n}) => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const { t } = useTranslation()\r\n\r\n  // Needed to scroll up if user comes to this page by clicking on entry in the table\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\r\n  const address = routeAddress.toLowerCase()\r\n\r\n  const cmcLink = useCMCLink(address)\r\n\r\n  const tokenData = useTokenData(address)\r\n  const poolsForToken = usePoolsForToken(address)\r\n  const poolDatas = usePoolDatas(poolsForToken ?? [])\r\n  const transactions = useTokenTransactions(address)\r\n  const chartData = useTokenChartData(address)\r\n\r\n  // pricing data\r\n  const priceData = useTokenPriceData(address, ONE_HOUR_SECONDS, DEFAULT_TIME_WINDOW)\r\n  const adjustedPriceData = useMemo(() => {\r\n    // Include latest available price\r\n    if (priceData && tokenData && priceData.length > 0) {\r\n      return [\r\n        ...priceData,\r\n        {\r\n          time: new Date().getTime() / 1000,\r\n          open: priceData[priceData.length - 1].close,\r\n          close: tokenData?.priceUSD,\r\n          high: tokenData?.priceUSD,\r\n          low: priceData[priceData.length - 1].close,\r\n        },\r\n      ]\r\n    }\r\n    return undefined\r\n  }, [priceData, tokenData])\r\n\r\n  const [watchlistTokens, addWatchlistToken] = useWatchlistTokens()\r\n\r\n  return (\r\n    <Page symbol={tokenData?.symbol}>\r\n      {tokenData ? (\r\n        !tokenData.exists ? (\r\n          <Card>\r\n            <Box p=\"16px\">\r\n              <Text>\r\n                {t('No pool has been created with this token yet. Create one')}\r\n                <Link style={{ display: 'inline', marginLeft: '6px' }} to={`/add/${address}`}>\r\n                  {t('here.')}\r\n                </Link>\r\n              </Text>\r\n            </Box>\r\n          </Card>\r\n        ) : (\r\n          <>\r\n            {/* Stuff on top */}\r\n            <Flex justifyContent=\"space-between\" mb=\"24px\" flexDirection={['column', 'column', 'row']}>\r\n              <Breadcrumbs mb=\"32px\">\r\n                <Link to=\"/info\">\r\n                  <Text color=\"primary\">{t('Info')}</Text>\r\n                </Link>\r\n                <Link to=\"/info/tokens\">\r\n                  <Text color=\"primary\">{t('Tokens')}</Text>\r\n                </Link>\r\n                <Flex>\r\n                  <Text mr=\"8px\">{tokenData.symbol}</Text>\r\n                  <Text>{`(${truncateHash(address)})`}</Text>\r\n                </Flex>\r\n              </Breadcrumbs>\r\n              <Flex justifyContent={[null, null, 'flex-end']} mt={['8px', '8px', 0]}>\r\n                <LinkExternal mr=\"8px\" color=\"primary\" href={getBscScanLink(address, 'address')}>\r\n                  {t('View on BscScan')}\r\n                </LinkExternal>\r\n                {cmcLink && (\r\n                  <StyledCMCLink href={cmcLink} rel=\"noopener noreferrer nofollow\" target=\"_blank\">\r\n                    <Image src=\"/images/CMC-logo.svg\" height={22} width={22} alt={t('View token on CoinMarketCap')} />\r\n                  </StyledCMCLink>\r\n                )}\r\n                <SaveIcon fill={watchlistTokens.includes(address)} onClick={() => addWatchlistToken(address)} />\r\n              </Flex>\r\n            </Flex>\r\n            <Flex justifyContent=\"space-between\" flexDirection={['column', 'column', 'column', 'row']}>\r\n              <Flex flexDirection=\"column\" mb={['8px', null]}>\r\n                <Flex alignItems=\"center\">\r\n                  <CurrencyLogo size=\"32px\" address={address} />\r\n                  <Text\r\n                    ml=\"12px\"\r\n                    bold\r\n                    lineHeight=\"0.7\"\r\n                    fontSize={isXs || isSm ? '24px' : '40px'}\r\n                    id=\"info-token-name-title\"\r\n                  >\r\n                    {tokenData.name}\r\n                  </Text>\r\n                  <Text ml=\"12px\" lineHeight=\"1\" color=\"textSubtle\" fontSize={isXs || isSm ? '14px' : '20px'}>\r\n                    ({tokenData.symbol})\r\n                  </Text>\r\n                </Flex>\r\n                <Flex mt=\"8px\" ml=\"46px\" alignItems=\"center\">\r\n                  <Text mr=\"16px\" bold fontSize=\"24px\">\r\n                    ${formatAmount(tokenData.priceUSD, { notation: 'standard' })}\r\n                  </Text>\r\n                  <Percent value={tokenData.priceUSDChange} fontWeight={600} />\r\n                </Flex>\r\n              </Flex>\r\n              <Flex>\r\n                <Link to={`/add/${address}`}>\r\n                  <Button mr=\"8px\" variant=\"secondary\">\r\n                    {t('Add Liquidity')}\r\n                  </Button>\r\n                </Link>\r\n                <Link to={`/swap?inputCurrency=${address}`}>\r\n                  <Button>{t('Trade')}</Button>\r\n                </Link>\r\n              </Flex>\r\n            </Flex>\r\n\r\n            {/* data on the right side of chart */}\r\n            <ContentLayout>\r\n              <Card>\r\n                <Box p=\"24px\">\r\n                  <Text bold small color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                    {t('Liquidity')}\r\n                  </Text>\r\n                  <Text bold fontSize=\"24px\">\r\n                    ${formatAmount(tokenData.liquidityUSD)}\r\n                  </Text>\r\n                  <Percent value={tokenData.liquidityUSDChange} />\r\n\r\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                    {t('Volume 24H')}\r\n                  </Text>\r\n                  <Text bold fontSize=\"24px\" textTransform=\"uppercase\">\r\n                    ${formatAmount(tokenData.volumeUSD)}\r\n                  </Text>\r\n                  <Percent value={tokenData.volumeUSDChange} />\r\n\r\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                    {t('Volume 7D')}\r\n                  </Text>\r\n                  <Text bold fontSize=\"24px\">\r\n                    ${formatAmount(tokenData.volumeUSDWeek)}\r\n                  </Text>\r\n\r\n                  <Text mt=\"24px\" bold color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\">\r\n                    {t('Transactions 24H')}\r\n                  </Text>\r\n                  <Text bold fontSize=\"24px\">\r\n                    {formatAmount(tokenData.txCount, { isInteger: true })}\r\n                  </Text>\r\n                </Box>\r\n              </Card>\r\n              {/* charts card */}\r\n              <ChartCard\r\n                variant=\"token\"\r\n                chartData={chartData}\r\n                tokenData={tokenData}\r\n                tokenPriceData={adjustedPriceData}\r\n              />\r\n            </ContentLayout>\r\n\r\n            {/* pools and transaction tables */}\r\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\r\n              {t('Pools')}\r\n            </Heading>\r\n\r\n            <PoolTable poolDatas={poolDatas} />\r\n\r\n            <Heading scale=\"lg\" mb=\"16px\" mt=\"40px\">\r\n              {t('Transactions')}\r\n            </Heading>\r\n\r\n            <TransactionTable transactions={transactions} />\r\n          </>\r\n        )\r\n      ) : (\r\n        <Flex mt=\"80px\" justifyContent=\"center\">\r\n          <Spinner />\r\n        </Flex>\r\n      )}\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default TokenPage\r\n","import React from 'react'\r\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\r\nimport { isAddress } from 'ethers/lib/utils'\r\nimport TokenPage from './TokenPage'\r\n\r\nconst RedirectInvalidToken = (props: RouteComponentProps<{ address: string }>) => {\r\n  const {\r\n    match: {\r\n      params: { address },\r\n    },\r\n  } = props\r\n\r\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\r\n  if (!isAddress(address.toLowerCase())) {\r\n    return <Redirect to=\"/\" />\r\n  }\r\n  return <TokenPage {...props} />\r\n}\r\n\r\nexport default RedirectInvalidToken\r\n","import React from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport { PoolUpdater, ProtocolUpdater, TokenUpdater } from 'state/info/updaters'\r\nimport InfoNav from './components/InfoNav'\r\nimport Overview from './Overview'\r\nimport Pools from './Pools'\r\nimport PoolPage from './Pools/PoolPage'\r\nimport Tokens from './Tokens'\r\nimport RedirectInvalidToken from './Tokens/redirects'\r\n\r\nconst Info: React.FC = () => {\r\n  return (\r\n    <>\r\n      <ProtocolUpdater />\r\n      <PoolUpdater />\r\n      <TokenUpdater />\r\n      <InfoNav />\r\n      <Route path=\"/info\" exact>\r\n        <Overview />\r\n      </Route>\r\n      <Route path=\"/info/pools\" exact>\r\n        <Pools />\r\n      </Route>\r\n      <Route path=\"/info/tokens\" exact>\r\n        <Tokens />\r\n      </Route>\r\n      <Route exact path={['/info/tokens/:address', '/info/token/:address']} component={RedirectInvalidToken} />\r\n      <Route exact path={['/info/pools/:address', '/info/pool/:address', '/info/pair/:address']} component={PoolPage} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Info\r\n","import React from 'react'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst Wrapper = styled(Flex)`\r\n  overflow-x: scroll;\r\n  padding: 0;\r\n  border-radius: 24px 24px 0 0;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  scrollbar-width: none; /* Firefox */\r\n`\r\n\r\nconst Inner = styled(Flex)`\r\n  justify-content: space-between;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  width: 100%;\r\n`\r\n\r\ninterface TabProps {\r\n  isActive?: boolean\r\n  onClick?: () => void\r\n}\r\n\r\nexport const TabToggle = styled.button<TabProps>`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  flex: 1;\r\n  border: 0;\r\n  outline: 0;\r\n  padding: 16px;\r\n  margin: 0;\r\n  border-radius: 24px 24px 0 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: ${({ theme, isActive }) => (isActive ? theme.colors.text : theme.colors.textSubtle)};\r\n  background-color: ${({ theme, isActive }) => (isActive ? theme.card.background : theme.colors.input)};\r\n`\r\n\r\ninterface TabToggleGroupProps {\r\n  children: React.ReactElement[]\r\n}\r\n\r\nexport const TabToggleGroup: React.FC<TabToggleGroupProps> = ({ children }) => {\r\n  return (\r\n    <Wrapper p={['0 4px', '0 16px']}>\r\n      <Inner>{children}</Inner>\r\n    </Wrapper>\r\n  )\r\n}\r\n"],"sourceRoot":""}