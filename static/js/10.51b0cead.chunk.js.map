{"version":3,"sources":["views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/StatBox.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/hooks/useGetCollectionDistribution.tsx","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","components/Select/Select.tsx","views/Nft/market/hooks/useAllPancakeBunnyNfts.ts","../node_modules/lodash/capitalize.js","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx","views/Nft/market/Collection/Items/PancakeBunniesCollectionNfts.tsx","components/ScrollToTopButton/index.tsx","views/Nft/market/components/Filters/ListFilter/styles.tsx","views/Nft/market/components/Filters/ListFilter/index.tsx","views/Nft/market/Collection/Items/ClearAllButton.tsx","views/Nft/market/Collection/Items/SortSelect.tsx","views/Nft/market/Collection/Items/Filters.tsx","views/Nft/market/Collection/config.ts","views/Nft/market/Collection/Items/CollectionNfts.tsx","views/Nft/market/Collection/Items/FilteredCollectionNfts.tsx","views/Nft/market/Collection/Items/CollectionWrapper.tsx","views/Nft/market/Collection/Items/index.tsx","views/Nft/market/components/GridPlaceholder.tsx","components/AddressInputSelect/index.tsx"],"names":["MarketPageHeader","props","background","useTheme","theme","isDark","StatBoxItem","title","stat","fontSize","color","textAlign","height","width","mx","fontWeight","StatBox","styled","Flex","colors","invertedContrast","cardBorder","radii","card","AvatarImage","div","attrs","alt","src","borderColor","useGetCollectionDistributionPB","useState","isFetching","data","state","setState","useEffect","a","prevState","getCollectionDistributionApi","pancakeBunniesAddress","apiResponse","fetchTokens","useGetCollectionDistribution","collectionAddress","SearchBar","history","useHistory","onAddressClick","value","push","nftsBaseUrl","MarketPageTitle","description","children","gridGap","alignItems","gridTemplateColumns","as","scale","mb","BaseSubMenu","SubMenuItems","StyledBannerImage","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","flexDirection","position","pb","BannerImage","bottom","left","DropDownHeader","shadows","inset","inputSecondary","input","DropDownListContainer","zIndices","dropdown","DropDownContainer","Box","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onOptionChange","defaultOptionIndex","dropdownRef","useRef","setIsOpen","selectedOptionIndex","setSelectedOptionIndex","toggling","event","stopPropagation","handleClickOutside","document","addEventListener","removeEventListener","onClick","label","ref","map","option","index","selectedIndex","useAllPancakeBunnyNfts","allPancakeBunnyNfts","setAllPancakeBunnyNfts","isPBCollection","getNftsFromCollectionApi","bunnyIds","Object","keys","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","allBunnies","bunnyId","tokenId","name","collectionName","collection","image","attributes","traitType","displayType","meta","currentAskPrice","updatedAt","fetchPancakeBunnies","toString","require","upperFirst","module","exports","string","toLowerCase","BackLink","RouterLink","primary","TopBar","t","useTranslation","justifyContent","to","LowestPriceStatBoxItem","lowestPrice","setLowestPrice","getLowestPriceInCollection","lowestCollectionPrice","fetchLowestPrice","formattedLowestPrice","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","symbol","Header","useParams","totalSupply","numberTokensListed","totalVolumeBNB","banner","useLocation","pathname","hash","volume","parseFloat","itemsConfig","href","large","formatNumber","Number","address","Container","items","activeItem","mt","PancakeBunniesCollectionNfts","sortBy","sortedNfts","orderBy","nft","length","GridPlaceholder","FixedContainer","ScrollToTopButton","visible","setVisible","toggleVisible","scrolled","documentElement","scrollTop","window","style","display","variant","endIcon","scrollTo","top","behavior","StyledItemRow","ItemImage","Image","ItemRow","item","isSelected","onSelect","px","py","mr","flex","count","checked","onChange","noop","ml","SearchWrapper","FilterButton","TriggerButton","Button","hasItem","CloseButton","IconButton","ListFilter","query","setQuery","orderKey","orderDir","orderState","setOrderState","wrapperRef","menuRef","nftFilters","useGetNftFilters","nftFilterState","useGetNftFilterLoadingState","dispatch","useAppDispatch","traitFilter","isTraitSelected","filteredItems","filter","indexOf","toggleSort","newOrderKey","prevOrderDir","target","current","contains","component","disabled","NftFilterLoadingState","LOADING","placement","maxWidth","p","startIcon","placeholder","evt","textTransform","overflowY","filteredItem","isItemSelected","attr","filterNftsFromCollection","handleItemSelect","newFilters","ClearAllButton","removeAllFilters","SortSelect","selectedOrder","useGetNftOrdering","sortByItems","field","direction","findIndex","newOption","setOrdering","GridContainer","Grid","lg","xxl","FilterByTitle","Text","FilterByControls","SortByTitle","SortByControls","ScrollableFlexContainer","Filters","showOnlyNftsOnSale","useGetNftShowOnlyOnSale","activeButtonIndex","setActiveButtonIndex","attrsByType","reduce","accum","uniqueTraitTypes","bold","activeIndex","onItemClick","newIndex","setShowOnlyOnSale","showOnlyOnSale","capitalize","isEmpty","REQUEST_SIZE","CollectionNfts","page","setPage","skip","setSkip","nfts","setNfts","isFetchingFilteredNfts","setIsFetchingFilteredNfts","collectionNfts","useNftsFromCollection","nftFilterLoadingState","orderField","orderDirection","fetchApiData","marketData","apiRequestPromises","marketNft","getNftApi","Promise","all","apiResponses","responsesWithMarketData","apiNft","i","combinedNfts","uniqBy","fetchMarketData","getNftsMarketData","isTradable","subgraphRes","fetchNftsFromCollections","size","nftsToShow","isNotLastPage","resultsAmount","currentAskPriceAsNumber","prevPage","spin","FilteredCollectionNfts","numToShow","setNumToShow","orderedNfts","Infinity","tokenIdNumber","isFinite","parseInt","filteredNfts","slice","prevNumToShow","CollectionWrapper","createPortal","body","Items","setSortBy","useGetCollection","fetchCollection","minWidth","GridPlaceholderItem","numItems","times","itemKey","ResultStatus","SubMenu","default","AddressLink","initialState","resultFound","NOT_VALID","defaultValidAddressHandler","resolve","AddressInputSelect","onValidAddress","isAddress","hasResults","FOUND","NOT_FOUND","validAddressHandler","subject","newValue","zIndex","paddingRight","right"],"mappings":"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","file":"static/js/10.51b0cead.chunk.js","sourcesContent":["import React from 'react'\r\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\r\n  const { theme } = useTheme()\r\n  const background = theme.isDark\r\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\r\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\r\n  return <PageHeader background={background} {...props} />\r\n}\r\n\r\nexport default MarketPageHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\n\r\nexport interface StatBoxItemProps extends BoxProps {\r\n  title: string\r\n  stat: string\r\n}\r\n\r\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\r\n  <Box {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\r\n      {title}\r\n    </Text>\r\n    {stat === null ? (\r\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\r\n    ) : (\r\n      <Text fontWeight=\"600\" textAlign=\"center\">\r\n        {stat}\r\n      </Text>\r\n    )}\r\n  </Box>\r\n)\r\n\r\nconst StatBox = styled(Flex)`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.invertedContrast};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  justify-content: space-around;\r\n  padding: 8px;\r\n  width: 100%;\r\n`\r\n\r\nexport default StatBox\r\n","import styled from 'styled-components'\r\n\r\ninterface AvatarImageProps {\r\n  src: string\r\n  borderColor?: string\r\n  alt?: string\r\n}\r\n\r\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<AvatarImageProps>`\r\n  background: url('${({ src }) => src}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default AvatarImage\r\n","import { useEffect, useState } from 'react'\r\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\r\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\ninterface State {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistribution['data']\r\n}\r\n\r\nconst useGetCollectionDistribution = (collectionAddress: string) => {\r\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setState])\r\n\r\n  return state\r\n}\r\n\r\ninterface StatePB {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistributionPB['data']\r\n}\r\n\r\nexport const useGetCollectionDistributionPB = () => {\r\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [setState])\r\n\r\n  return state\r\n}\r\n\r\nexport default useGetCollectionDistribution\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport AddressInputSelect from 'components/AddressInputSelect'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\n\r\nconst SearchBar: React.FC = (props) => {\r\n  const history = useHistory()\r\n\r\n  const handleAddressClick = (value: string) => {\r\n    history.push(`${nftsBaseUrl}/profile/${value}`)\r\n  }\r\n\r\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\r\n}\r\n\r\nexport default SearchBar\r\n","import React, { ReactNode } from 'react'\r\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface MarketPageTitleProps extends GridProps {\r\n  title: string\r\n  description?: ReactNode\r\n}\r\n\r\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\r\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\r\n    <Box>\r\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\r\n        {title}\r\n      </Heading>\r\n      {description}\r\n    </Box>\r\n    <Box>{children}</Box>\r\n  </Grid>\r\n)\r\n\r\nexport default MarketPageTitle\r\n","import { SubMenuItems } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseSubMenu = styled(SubMenuItems)`\r\n  background-color: transparent;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nexport default BaseSubMenu\r\n","import styled from 'styled-components'\r\n\r\ninterface StyledBannerImageProps {\r\n  src: string\r\n  alt?: string\r\n}\r\n\r\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<StyledBannerImageProps>`\r\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 100%;\r\n  border-radius: 32px;\r\n  height: 123px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 192px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    height: 256px;\r\n  }\r\n`\r\n\r\nexport default StyledBannerImage\r\n","import React, { ReactNode } from 'react'\r\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\r\nimport BannerImage from './BannerImage'\r\n\r\ninterface BannerHeaderProps extends FlexProps {\r\n  bannerImage: string\r\n  bannerAlt?: string\r\n  avatar?: ReactNode\r\n}\r\n\r\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\r\n  return (\r\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\r\n      <Box position=\"relative\" pb=\"56px\">\r\n        <BannerImage src={bannerImage} alt={bannerAlt} />\r\n        <Box position=\"absolute\" bottom={0} left={-4}>\r\n          <Flex alignItems=\"flex-end\">\r\n            {avatar}\r\n            {children}\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default BannerHeader\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Box, BoxProps, Text } from '@pancakeswap/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled(Box)<{ isOpen: boolean }>`\r\n  cursor: pointer;\r\n  width: 100%;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n  user-select: none;\r\n  z-index: 20;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps extends BoxProps {\r\n  options: OptionProps[]\r\n  onOptionChange?: (option: OptionProps) => void\r\n  defaultOptionIndex?: number\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({\r\n  options,\r\n  onOptionChange,\r\n  defaultOptionIndex = 0,\r\n  ...props\r\n}) => {\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOptionIndex, setSelectedOptionIndex] = useState(defaultOptionIndex)\r\n\r\n  const toggling = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    setIsOpen(!isOpen)\r\n    event.stopPropagation()\r\n  }\r\n\r\n  const onOptionClicked = (selectedIndex: number) => () => {\r\n    setSelectedOptionIndex(selectedIndex)\r\n    setIsOpen(false)\r\n\r\n    if (onOptionChange) {\r\n      onOptionChange(options[selectedIndex])\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = () => {\r\n      setIsOpen(false)\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} {...props}>\r\n      <DropDownHeader onClick={toggling}>\r\n        <Text>{options[selectedOptionIndex].label}</Text>\r\n      </DropDownHeader>\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option, index) =>\r\n            index !== selectedOptionIndex ? (\r\n              <ListItem onClick={onOptionClicked(index)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import { useState, useEffect } from 'react'\r\nimport {\r\n  getAllPancakeBunniesLowestPrice,\r\n  getAllPancakeBunniesRecentUpdatedAt,\r\n  getNftsFromCollectionApi,\r\n} from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\r\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\r\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\r\n\r\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\r\n\r\n  useEffect(() => {\r\n    const fetchPancakeBunnies = async () => {\r\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\r\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\r\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\r\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\r\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\r\n      const bunnyIds = Object.keys(data)\r\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\r\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\r\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\r\n        return {\r\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\r\n          tokenId: data[bunnyId].name,\r\n          name: data[bunnyId].name,\r\n          description: data[bunnyId].description,\r\n          collectionAddress: pancakeBunniesAddress,\r\n          collectionName: data[bunnyId].collection.name,\r\n          image: data[bunnyId].image,\r\n          attributes: [\r\n            {\r\n              traitType: 'bunnyId',\r\n              value: bunnyId,\r\n              displayType: null,\r\n            },\r\n          ],\r\n          meta: {\r\n            currentAskPrice: lowestPrices[bunnyId],\r\n            updatedAt: latestUpdates[bunnyId],\r\n          },\r\n        }\r\n      })\r\n      setAllPancakeBunnyNfts(allBunnies)\r\n    }\r\n    if (isPBCollection && !allPancakeBunnyNfts) {\r\n      fetchPancakeBunnies()\r\n    }\r\n  }, [isPBCollection, allPancakeBunnyNfts])\r\n\r\n  return allPancakeBunnyNfts\r\n}\r\n\r\nexport default useAllPancakeBunnyNfts\r\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","import React from 'react'\r\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport SearchBar from '../components/SearchBar'\r\n\r\nconst BackLink = styled(RouterLink)`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: inline-flex;\r\n  font-weight: 600;\r\n`\r\n\r\nconst TopBar: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n      <BackLink to={`${nftsBaseUrl}/collections`}>\r\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\r\n        {t('All Collections')}\r\n      </BackLink>\r\n      <Box>\r\n        <SearchBar />\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TopBar\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\r\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\r\n\r\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\r\n  collectionAddress: string\r\n}\r\n\r\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n  const { t } = useTranslation()\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\r\n      setLowestPrice(lowestCollectionPrice)\r\n    }\r\n\r\n    fetchLowestPrice()\r\n  }, [collectionAddress, setLowestPrice])\r\n\r\n  const formattedLowestPrice =\r\n    lowestPrice === null\r\n      ? null\r\n      : lowestPrice.toLocaleString(undefined, {\r\n          minimumFractionDigits: 3,\r\n          maximumFractionDigits: 3,\r\n        })\r\n\r\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\r\n}\r\n\r\nexport default LowestPriceStatBoxItem\r\n","import React from 'react'\r\nimport { useLocation, useParams } from 'react-router'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport MarketPageTitle from '../components/MarketPageTitle'\r\nimport StatBox, { StatBoxItem } from '../components/StatBox'\r\nimport BannerHeader from '../components/BannerHeader'\r\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\r\nimport BaseSubMenu from '../components/BaseSubMenu'\r\nimport { nftsBaseUrl } from '../constants'\r\nimport TopBar from './TopBar'\r\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\r\n\r\ninterface HeaderProps {\r\n  collection: Collection\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\r\n  const { t } = useTranslation()\r\n  const { pathname, hash } = useLocation()\r\n\r\n  const volume = totalVolumeBNB\r\n    ? parseFloat(totalVolumeBNB).toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })\r\n    : '0'\r\n\r\n  const itemsConfig = [\r\n    {\r\n      label: t('Items'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\r\n    },\r\n    {\r\n      label: t('Traits'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <MarketPageHeader>\r\n        <TopBar />\r\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\r\n        <MarketPageTitle\r\n          title={collection.name}\r\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\r\n        >\r\n          <StatBox>\r\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\r\n            <StatBoxItem\r\n              title={t('Items listed')}\r\n              stat={numberTokensListed ? formatNumber(Number(numberTokensListed), 0, 0) : '0'}\r\n            />\r\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\r\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\r\n          </StatBox>\r\n        </MarketPageTitle>\r\n      </MarketPageHeader>\r\n      <Container>\r\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || '#items'}`} mt=\"24px\" mb=\"8px\" />\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Grid } from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport useAllPancakeBunnyNfts from '../../hooks/useAllPancakeBunnyNfts'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\n\r\ninterface CollectionNftsProps {\r\n  collection: Collection\r\n  sortBy?: string\r\n}\r\n\r\nconst PancakeBunniesCollectionNfts: React.FC<CollectionNftsProps> = ({ collection, sortBy = 'updatedAt' }) => {\r\n  const { address } = collection\r\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(address)\r\n\r\n  const sortedNfts = allPancakeBunnyNfts\r\n    ? orderBy(allPancakeBunnyNfts, (nft) => (nft.meta[sortBy] ? Number(nft?.meta[sortBy]) : 0), [\r\n        sortBy === 'currentAskPrice' ? 'asc' : 'desc',\r\n      ])\r\n    : []\r\n\r\n  if (!sortedNfts.length) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        gridGap=\"16px\"\r\n        gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n        alignItems=\"start\"\r\n      >\r\n        {sortedNfts.map((nft) => {\r\n          return <CollectibleLinkCard key={`${nft.tokenId}-${nft.collectionName}`} nft={nft} />\r\n        })}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PancakeBunniesCollectionNfts\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, ChevronUpIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst FixedContainer = styled.div`\r\n  position: fixed;\r\n  right: 5%;\r\n  bottom: 60px;\r\n`\r\n\r\nconst ScrollToTopButton = () => {\r\n  const [visible, setVisible] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleVisible = () => {\r\n    const scrolled = document.documentElement.scrollTop\r\n    if (scrolled > 700) {\r\n      setVisible(true)\r\n    } else if (scrolled <= 700) {\r\n      setVisible(false)\r\n    }\r\n  }\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo({\r\n      top: 400,\r\n      behavior: 'auto',\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', toggleVisible)\r\n\r\n    return () => window.removeEventListener('scroll', toggleVisible)\r\n  }, [])\r\n\r\n  return (\r\n    <FixedContainer style={{ display: visible ? 'inline' : 'none' }}>\r\n      <Button variant=\"subtle\" endIcon={<ChevronUpIcon color=\"invertedContrast\" />} onClick={scrollToTop}>\r\n        {t('To Top')}\r\n      </Button>\r\n    </FixedContainer>\r\n  )\r\n}\r\n\r\nexport default ScrollToTopButton\r\n","import React from 'react'\r\nimport { Radio, Flex, Image, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport noop from 'lodash/noop'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { Item } from './types'\r\n\r\nconst StyledItemRow = styled(Flex)`\r\n  cursor: pointer;\r\n  user-select: none;\r\n`\r\n\r\nconst ItemImage = styled(Image)`\r\n  border-radius: 50%;\r\n`\r\n\r\ninterface ItemRowProps {\r\n  item: Item\r\n  isSelected: boolean\r\n  onSelect: () => void\r\n}\r\n\r\nexport const ItemRow: React.FC<ItemRowProps> = ({ item, isSelected, onSelect }) => (\r\n  <StyledItemRow alignItems=\"center\" px=\"16px\" py=\"8px\" onClick={onSelect}>\r\n    {item.image && <ItemImage src={item.image} height={48} width={48} mr=\"16px\" />}\r\n    <Text style={{ flex: 1 }}>{item.label}</Text>\r\n    {item.count !== undefined && (\r\n      <Text color=\"textSubtle\" px=\"8px\">\r\n        {formatNumber(item.count, 0, 0)}\r\n      </Text>\r\n    )}\r\n    <Radio name=\"item-select\" scale=\"sm\" checked={isSelected} value={item.label} onChange={noop} ml=\"24px\" />\r\n  </StyledItemRow>\r\n)\r\n\r\nexport const SearchWrapper = styled(Flex)`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  border-radius: 24px 24px 0 0;\r\n`\r\n\r\nexport const FilterButton = styled(Flex)`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  user-select: none;\r\n\r\n  svg {\r\n    pointer-events: none;\r\n  }\r\n`\r\n","import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Box,\r\n  Button,\r\n  Text,\r\n  Flex,\r\n  InlineMenu,\r\n  Input,\r\n  InputGroup,\r\n  SearchIcon,\r\n  IconButton,\r\n  CloseIcon,\r\n  ArrowUpIcon,\r\n  ArrowDownIcon,\r\n} from '@pancakeswap/uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { useAppDispatch } from 'state'\r\nimport { filterNftsFromCollection } from 'state/nftMarket/reducer'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useGetNftFilterLoadingState, useGetNftFilters } from 'state/nftMarket/hooks'\r\nimport { NftFilterLoadingState } from 'state/nftMarket/types'\r\nimport { FilterButton, ItemRow, SearchWrapper } from './styles'\r\nimport { Item } from './types'\r\n\r\ninterface ListFilterProps {\r\n  title?: string\r\n  traitType: string\r\n  items: Item[]\r\n  collectionAddress: string\r\n}\r\n\r\ninterface State {\r\n  orderKey: string\r\n  orderDir: 'asc' | 'desc'\r\n}\r\n\r\nconst TriggerButton = styled(Button)<{ hasItem: boolean }>`\r\n  ${({ hasItem }) =>\r\n    hasItem &&\r\n    `  \r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n    padding-right: 8px;\r\n  `}\r\n`\r\n\r\nconst CloseButton = styled(IconButton)`\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n`\r\n\r\nexport const ListFilter: React.FC<ListFilterProps> = ({ title, traitType, items, collectionAddress }) => {\r\n  const { t } = useTranslation()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [query, setQuery] = useState('')\r\n  const [orderState, setOrderState] = useState<State>({ orderKey: 'count', orderDir: 'asc' })\r\n  const wrapperRef = useRef(null)\r\n  const menuRef = useRef(null)\r\n  const nftFilters = useGetNftFilters(collectionAddress)\r\n  const nftFilterState = useGetNftFilterLoadingState(collectionAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { orderKey, orderDir } = orderState\r\n\r\n  const traitFilter = nftFilters[traitType]\r\n  const isTraitSelected = !!traitFilter\r\n\r\n  const filteredItems =\r\n    query && query.length > 1\r\n      ? items.filter((item) => item.label.toLowerCase().indexOf(query.toLowerCase()) !== -1)\r\n      : items\r\n\r\n  const handleClearItem = () => {\r\n    const newFilters = { ...nftFilters }\r\n\r\n    delete newFilters[traitType]\r\n\r\n    dispatch(\r\n      filterNftsFromCollection({\r\n        collectionAddress,\r\n        nftFilters: newFilters,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const handleMenuClick = () => setIsOpen(!isOpen)\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = evt.target\r\n    setQuery(value)\r\n  }\r\n\r\n  const handleItemSelect = ({ attr }: Item) => {\r\n    dispatch(\r\n      filterNftsFromCollection({\r\n        collectionAddress,\r\n        nftFilters: { ...nftFilters, [traitType]: attr },\r\n      }),\r\n    )\r\n  }\r\n\r\n  const toggleSort = (newOrderKey: string) => () => {\r\n    setOrderState((prevOrderDir) => {\r\n      if (prevOrderDir.orderKey !== newOrderKey) {\r\n        return {\r\n          orderKey: newOrderKey,\r\n          orderDir: 'asc',\r\n        }\r\n      }\r\n\r\n      return {\r\n        orderKey: newOrderKey,\r\n        orderDir: prevOrderDir.orderDir === 'asc' ? 'desc' : 'asc',\r\n      }\r\n    })\r\n  }\r\n\r\n  // @TODO Fix this in the Toolkit\r\n  // This is a fix to ensure the \"isOpen\" value is aligned with the menus's (to avoid a double click)\r\n  useEffect(() => {\r\n    const handleClickOutside = ({ target }: Event) => {\r\n      if (\r\n        wrapperRef.current &&\r\n        menuRef.current &&\r\n        !menuRef.current.contains(target) &&\r\n        !wrapperRef.current.contains(target)\r\n      ) {\r\n        setIsOpen(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside)\r\n\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside)\r\n    }\r\n  }, [setIsOpen, wrapperRef, menuRef])\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" mr=\"4px\" mb=\"4px\">\r\n      <Box ref={wrapperRef}>\r\n        <InlineMenu\r\n          component={\r\n            <TriggerButton\r\n              onClick={handleMenuClick}\r\n              variant={isTraitSelected ? 'subtle' : 'light'}\r\n              scale=\"sm\"\r\n              disabled={nftFilterState === NftFilterLoadingState.LOADING}\r\n              hasItem={isTraitSelected}\r\n            >\r\n              {title}\r\n            </TriggerButton>\r\n          }\r\n          isOpen={isOpen}\r\n          options={{ placement: 'bottom' }}\r\n        >\r\n          <Box maxWidth=\"375px\" ref={menuRef}>\r\n            <SearchWrapper alignItems=\"center\" p=\"16px\">\r\n              <InputGroup startIcon={<SearchIcon color=\"textSubtle\" />}>\r\n                <Input name=\"query\" placeholder={t('Search')} onChange={handleChange} value={query} />\r\n              </InputGroup>\r\n            </SearchWrapper>\r\n            <Flex alignItems=\"center\" p=\"16px\">\r\n              <FilterButton onClick={toggleSort('label')} style={{ flex: 1 }}>\r\n                <Text fontSize=\"12px\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\">\r\n                  {t('Name')}\r\n                </Text>\r\n                <Box width=\"18px\">\r\n                  {orderKey === 'label' && orderDir === 'asc' && <ArrowUpIcon width=\"18px\" color=\"secondary\" />}\r\n                  {orderKey === 'label' && orderDir === 'desc' && <ArrowDownIcon width=\"18px\" color=\"secondary\" />}\r\n                </Box>\r\n              </FilterButton>\r\n              <FilterButton onClick={toggleSort('count')}>\r\n                <Text fontSize=\"12px\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\">\r\n                  {t('Count')}\r\n                </Text>\r\n                <Box width=\"18px\">\r\n                  {orderKey === 'count' && orderDir === 'asc' && <ArrowUpIcon width=\"18px\" color=\"secondary\" />}\r\n                  {orderKey === 'count' && orderDir === 'desc' && <ArrowDownIcon width=\"18px\" color=\"secondary\" />}\r\n                </Box>\r\n              </FilterButton>\r\n            </Flex>\r\n            <Box height=\"240px\" overflowY=\"auto\">\r\n              {filteredItems.length > 0 ? (\r\n                orderBy(filteredItems, orderKey, orderDir).map((filteredItem) => {\r\n                  const handleSelect = () => handleItemSelect(filteredItem)\r\n                  const isItemSelected = traitFilter ? traitFilter.value === filteredItem.attr.value : false\r\n\r\n                  return (\r\n                    <ItemRow\r\n                      key={filteredItem.label}\r\n                      item={filteredItem}\r\n                      isSelected={isItemSelected}\r\n                      onSelect={handleSelect}\r\n                    />\r\n                  )\r\n                })\r\n              ) : (\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" height=\"230px\">\r\n                  <Text color=\"textDisabled\" textAlign=\"center\">\r\n                    {t('No results found')}\r\n                  </Text>\r\n                </Flex>\r\n              )}\r\n            </Box>\r\n          </Box>\r\n        </InlineMenu>\r\n      </Box>\r\n      {isTraitSelected && (\r\n        <CloseButton\r\n          variant={isTraitSelected ? 'subtle' : 'light'}\r\n          scale=\"sm\"\r\n          onClick={handleClearItem}\r\n          disabled={nftFilterState === NftFilterLoadingState.LOADING}\r\n        >\r\n          <CloseIcon color=\"currentColor\" width=\"18px\" />\r\n        </CloseButton>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeAllFilters } from 'state/nftMarket/reducer'\r\nimport { useGetNftFilterLoadingState } from 'state/nftMarket/hooks'\r\nimport { NftFilterLoadingState } from 'state/nftMarket/types'\r\n\r\ninterface ClearAllButtonProps extends ButtonProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst ClearAllButton: React.FC<ClearAllButtonProps> = ({ collectionAddress, ...props }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const nftFilterState = useGetNftFilterLoadingState(collectionAddress)\r\n\r\n  const clearAll = () => {\r\n    dispatch(removeAllFilters(collectionAddress))\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      key=\"clear-all\"\r\n      variant=\"text\"\r\n      scale=\"sm\"\r\n      onClick={clearAll}\r\n      disabled={nftFilterState === NftFilterLoadingState.LOADING}\r\n      {...props}\r\n    >\r\n      {t('Clear')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClearAllButton\r\n","import React from 'react'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setOrdering } from 'state/nftMarket/reducer'\r\nimport { useGetNftOrdering } from 'state/nftMarket/hooks'\r\n\r\nconst SortSelect: React.FC<{ collectionAddress: string }> = ({ collectionAddress }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const selectedOrder = useGetNftOrdering(collectionAddress)\r\n  const handleChange = (newOption: OptionProps) => {\r\n    const { field, direction } = newOption.value\r\n    dispatch(setOrdering({ collection: collectionAddress, field, direction }))\r\n  }\r\n\r\n  const sortByItems = [\r\n    { label: t('Recently listed'), value: { field: 'updatedAt', direction: 'desc' } },\r\n    { label: t('Lowest price'), value: { field: 'currentAskPrice', direction: 'asc' } },\r\n    { label: t('Highest price'), value: { field: 'currentAskPrice', direction: 'desc' } },\r\n    { label: t('Token ID'), value: { field: 'tokenId', direction: 'asc' } },\r\n  ]\r\n\r\n  const defaultOptionIndex = sortByItems.findIndex(\r\n    (option) => option.value.field === selectedOrder.field && option.value.direction === selectedOrder.direction,\r\n  )\r\n\r\n  return (\r\n    <Select\r\n      options={sortByItems}\r\n      onOptionChange={handleChange}\r\n      defaultOptionIndex={defaultOptionIndex !== -1 ? defaultOptionIndex : undefined}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SortSelect\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, ButtonMenu, ButtonMenuItem, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport capitalize from 'lodash/capitalize'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useGetNftFilters, useGetNftShowOnlyOnSale } from 'state/nftMarket/hooks'\r\nimport { Collection, NftAttribute } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Item, ListFilter } from 'views/Nft/market/components/Filters'\r\nimport { useAppDispatch } from 'state'\r\nimport { setShowOnlyOnSale } from 'state/nftMarket/reducer'\r\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\r\nimport ClearAllButton from './ClearAllButton'\r\nimport SortSelect from './SortSelect'\r\n\r\ninterface FiltersProps {\r\n  collection: Collection\r\n}\r\n\r\nconst GridContainer = styled(Grid)`\r\n  margin-bottom: 16px;\r\n  padding: 0 16px;\r\n  grid-gap: 8px 16px;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-areas:\r\n    'filterByTitle .'\r\n    'attributeFilters attributeFilters'\r\n    '. sortByTitle'\r\n    'filterByControls sortByControls';\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . .'\r\n      'attributeFilters attributeFilters attributeFilters'\r\n      '. . sortByTitle'\r\n      'filterByControls . sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 2fr 5fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . .'\r\n      'filterByControls attributeFilters attributeFilters'\r\n      '. . sortByTitle'\r\n      '. . sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    grid-template-columns: 1.3fr 5fr 1fr;\r\n    grid-template-areas:\r\n      'filterByTitle . sortByTitle'\r\n      'filterByControls attributeFilters sortByControls';\r\n  }\r\n  ${({ theme }) => theme.mediaQueries.xxl} {\r\n    grid-template-columns: 1fr 5fr 1fr;\r\n  }\r\n`\r\n\r\nconst FilterByTitle = styled(Text)`\r\n  grid-area: filterByTitle;\r\n`\r\n\r\nconst FilterByControls = styled(Box)`\r\n  grid-area: filterByControls;\r\n`\r\n\r\nconst SortByTitle = styled(Text)`\r\n  grid-area: sortByTitle;\r\n`\r\n\r\nconst SortByControls = styled(Box)`\r\n  grid-area: sortByControls;\r\n`\r\n\r\nconst ScrollableFlexContainer = styled(Flex)`\r\n  grid-area: attributeFilters;\r\n  align-items: center;\r\n  flex: 1;\r\n  flex-wrap: nowrap;\r\n  overflow-x: auto;\r\n  -webkit-overflow-scrolling: touch;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-wrap: wrap;\r\n    overflow-x: revert;\r\n  }\r\n`\r\n\r\nconst Filters: React.FC<FiltersProps> = ({ collection }) => {\r\n  const { address } = collection\r\n  const dispatch = useAppDispatch()\r\n  const { data } = useGetCollectionDistribution(address)\r\n  const { t } = useTranslation()\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(address)\r\n  const [activeButtonIndex, setActiveButtonIndex] = useState(showOnlyNftsOnSale ? 1 : 0)\r\n\r\n  const onActiveButtonChange = (newIndex: number) => {\r\n    dispatch(setShowOnlyOnSale({ collection: address, showOnlyOnSale: newIndex === 1 }))\r\n    setActiveButtonIndex(newIndex)\r\n  }\r\n\r\n  const nftFilters = useGetNftFilters(address)\r\n  const attrsByType: Record<string, NftAttribute[]> = collection?.attributes?.reduce(\r\n    (accum, attr) => ({\r\n      ...accum,\r\n      [attr.traitType]: accum[attr.traitType] ? [...accum[attr.traitType], attr] : [attr],\r\n    }),\r\n    {},\r\n  )\r\n  const uniqueTraitTypes = attrsByType ? Object.keys(attrsByType) : []\r\n\r\n  return (\r\n    <GridContainer>\r\n      <FilterByTitle textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" bold>\r\n        {t('Filter by')}\r\n      </FilterByTitle>\r\n      <FilterByControls>\r\n        <ButtonMenu scale=\"sm\" activeIndex={activeButtonIndex} onItemClick={onActiveButtonChange}>\r\n          <ButtonMenuItem>{t('All')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('On Sale')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </FilterByControls>\r\n      <SortByTitle fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight={600} mb=\"4px\">\r\n        {t('Sort By')}\r\n      </SortByTitle>\r\n      <SortByControls>\r\n        <SortSelect collectionAddress={address} />\r\n      </SortByControls>\r\n      <ScrollableFlexContainer>\r\n        {uniqueTraitTypes.map((traitType) => {\r\n          const attrs = attrsByType[traitType]\r\n          const items: Item[] = attrs.map((attr) => ({\r\n            label: capitalize(attr.value as string),\r\n            count: data && data[traitType] ? data[traitType][attr.value] : undefined,\r\n            attr,\r\n          }))\r\n\r\n          return (\r\n            <ListFilter\r\n              key={traitType}\r\n              title={capitalize(traitType)}\r\n              traitType={traitType}\r\n              items={items}\r\n              collectionAddress={address}\r\n            />\r\n          )\r\n        })}\r\n        {!isEmpty(nftFilters) && <ClearAllButton collectionAddress={address} mb=\"4px\" />}\r\n      </ScrollableFlexContainer>\r\n    </GridContainer>\r\n  )\r\n}\r\n\r\nexport default Filters\r\n","export const REQUEST_SIZE = 100\r\n","import React, { useEffect, useState } from 'react'\r\nimport uniqBy from 'lodash/uniqBy'\r\nimport { AutoRenewIcon, Button, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetNftFilterLoadingState,\r\n  useGetNftOrdering,\r\n  useGetNftShowOnlyOnSale,\r\n  useNftsFromCollection,\r\n} from 'state/nftMarket/hooks'\r\nimport { Collection, NftFilterLoadingState, NftToken, TokenMarketData } from 'state/nftMarket/types'\r\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\r\nimport { getNftApi, getNftsMarketData } from 'state/nftMarket/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport { REQUEST_SIZE } from '../config'\r\n\r\ninterface CollectionNftsProps {\r\n  collection: Collection\r\n}\r\n\r\nconst CollectionNfts: React.FC<CollectionNftsProps> = ({ collection }) => {\r\n  const { totalSupply, numberTokensListed, address: collectionAddress } = collection\r\n  const [page, setPage] = useState(1)\r\n  const [skip, setSkip] = useState(0)\r\n  const [nfts, setNfts] = useState<NftToken[]>([])\r\n  const [isFetchingFilteredNfts, setIsFetchingFilteredNfts] = useState(false)\r\n  const { t } = useTranslation()\r\n  const collectionNfts = useNftsFromCollection(collectionAddress)\r\n  const nftFilterLoadingState = useGetNftFilterLoadingState(collectionAddress)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(collectionAddress)\r\n  const { field: orderField, direction: orderDirection } = useGetNftOrdering(collectionAddress)\r\n  const isFetching =\r\n    orderField === 'tokenId' ? nftFilterLoadingState === NftFilterLoadingState.LOADING : isFetchingFilteredNfts\r\n\r\n  const handleLoadMore = () => {\r\n    if (orderField === 'tokenId') {\r\n      setPage((prevPage) => prevPage + 1)\r\n    }\r\n    setSkip(skip + REQUEST_SIZE)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (orderField === 'tokenId') {\r\n      setPage(1)\r\n    }\r\n  }, [orderField])\r\n\r\n  useEffect(() => {\r\n    setNfts([])\r\n    setSkip(0)\r\n  }, [orderField, orderDirection])\r\n\r\n  useEffect(() => {\r\n    const fetchApiData = async (marketData: TokenMarketData[]) => {\r\n      const apiRequestPromises = marketData.map((marketNft) => getNftApi(collectionAddress, marketNft.tokenId))\r\n      const apiResponses = await Promise.all(apiRequestPromises)\r\n      const responsesWithMarketData = apiResponses.map((apiNft, i) => {\r\n        return {\r\n          ...apiNft,\r\n          collectionAddress,\r\n          collectionName: apiNft.collection.name,\r\n          marketData: marketData[i],\r\n        }\r\n      })\r\n      setIsFetchingFilteredNfts(false)\r\n      setNfts((prevState) => {\r\n        const combinedNfts = [...prevState, ...responsesWithMarketData]\r\n        return uniqBy(combinedNfts, 'tokenId')\r\n      })\r\n    }\r\n\r\n    const fetchMarketData = async () => {\r\n      const subgraphRes = await getNftsMarketData(\r\n        { collection: collectionAddress.toLowerCase(), isTradable: true },\r\n        REQUEST_SIZE,\r\n        orderField,\r\n        orderDirection,\r\n        skip,\r\n      )\r\n      fetchApiData(subgraphRes)\r\n    }\r\n\r\n    if (orderField !== 'tokenId') {\r\n      // Query by tokenId is handled in useEffect below since we in this case\r\n      // we need to show all NFTs, even those that never been on sale (i.e. they are not in subgraph)\r\n      setIsFetchingFilteredNfts(true)\r\n      fetchMarketData()\r\n    }\r\n  }, [orderField, orderDirection, skip, collectionAddress])\r\n\r\n  useEffect(() => {\r\n    if (orderField === 'tokenId') {\r\n      dispatch(\r\n        fetchNftsFromCollections({\r\n          collectionAddress,\r\n          page,\r\n          size: REQUEST_SIZE,\r\n        }),\r\n      )\r\n    }\r\n  }, [page, collectionAddress, dispatch, orderField])\r\n\r\n  const nftsToShow =\r\n    orderField === 'tokenId'\r\n      ? collectionNfts?.filter((nft) => {\r\n          if (showOnlyNftsOnSale) {\r\n            return nft.marketData?.isTradable\r\n          }\r\n          return true\r\n        })\r\n      : nfts\r\n\r\n  if (!nftsToShow || nftsToShow?.length === 0) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  const isNotLastPage =\r\n    showOnlyNftsOnSale || orderField !== 'tokenId'\r\n      ? nftsToShow?.length < Number(numberTokensListed)\r\n      : nftsToShow?.length < Number(totalSupply)\r\n\r\n  const resultsAmount = showOnlyNftsOnSale || orderField !== 'tokenId' ? numberTokensListed : totalSupply\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <Text bold>\r\n          {resultsAmount} {t('Results')}\r\n        </Text>\r\n      </Flex>\r\n      <Grid\r\n        gridGap=\"16px\"\r\n        gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n        alignItems=\"start\"\r\n      >\r\n        {nftsToShow.map((nft) => {\r\n          const currentAskPriceAsNumber = nft.marketData && parseFloat(nft.marketData.currentAskPrice)\r\n\r\n          return (\r\n            <CollectibleLinkCard\r\n              key={nft.tokenId}\r\n              nft={nft}\r\n              currentAskPrice={currentAskPriceAsNumber > 0 ? currentAskPriceAsNumber : undefined}\r\n            />\r\n          )\r\n        })}\r\n      </Grid>\r\n      <Flex mt=\"60px\" mb=\"12px\" justifyContent=\"center\">\r\n        {isNotLastPage && (\r\n          <Button\r\n            onClick={handleLoadMore}\r\n            scale=\"sm\"\r\n            endIcon={isFetching ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\r\n          >\r\n            {isFetching ? t('Loading') : t('Load more')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CollectionNfts\r\n","import React, { useState } from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { BunnyPlaceholderIcon, Button, Flex, Grid, Text } from '@pancakeswap/uikit'\r\nimport {\r\n  useGetNftFilterLoadingState,\r\n  useGetNftOrdering,\r\n  useGetNftShowOnlyOnSale,\r\n  useNftsFromCollection,\r\n} from 'state/nftMarket/hooks'\r\nimport { Collection, NftFilterLoadingState } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport { REQUEST_SIZE } from '../config'\r\n\r\ninterface FilteredCollectionNftsProps {\r\n  collection: Collection\r\n}\r\n\r\nconst FilteredCollectionNfts: React.FC<FilteredCollectionNftsProps> = ({ collection }) => {\r\n  const { address: collectionAddress } = collection\r\n  const [numToShow, setNumToShow] = useState(REQUEST_SIZE)\r\n  const { t } = useTranslation()\r\n  const selectedOrder = useGetNftOrdering(collectionAddress)\r\n  const showOnlyNftsOnSale = useGetNftShowOnlyOnSale(collectionAddress)\r\n  const collectionNfts = useNftsFromCollection(collectionAddress)\r\n  const nftFilterLoadingState = useGetNftFilterLoadingState(collectionAddress)\r\n\r\n  const handleLoadMore = () => {\r\n    setNumToShow((prevNumToShow) => prevNumToShow + REQUEST_SIZE)\r\n  }\r\n\r\n  if (nftFilterLoadingState === NftFilterLoadingState.LOADING) {\r\n    return <GridPlaceholder />\r\n  }\r\n\r\n  const orderedNfts = collectionNfts\r\n    ? orderBy(\r\n        collectionNfts,\r\n        (nft) => {\r\n          if (selectedOrder.field === 'currentAskPrice') {\r\n            const currentAskPriceAsNumber = nft.marketData?.currentAskPrice\r\n              ? parseFloat(nft.marketData?.currentAskPrice)\r\n              : 0\r\n            if (currentAskPriceAsNumber > 0) {\r\n              return parseFloat(nft.marketData.currentAskPrice)\r\n            }\r\n            return selectedOrder.direction === 'asc' ? Infinity : -Infinity\r\n          }\r\n          if (selectedOrder.field === 'tokenId') {\r\n            const tokenIdNumber = Number(nft.tokenId)\r\n            return Number.isFinite(tokenIdNumber) ? tokenIdNumber : 0\r\n          }\r\n          // recently listed sorting\r\n          return nft.marketData ? parseInt(nft.marketData[selectedOrder.field], 10) : 0\r\n        },\r\n        selectedOrder.direction,\r\n      )\r\n    : []\r\n\r\n  const filteredNfts = showOnlyNftsOnSale ? orderedNfts.filter((nft) => nft.marketData?.isTradable) : orderedNfts\r\n\r\n  const nftsToShow = filteredNfts.slice(0, numToShow)\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <Text bold>\r\n          {filteredNfts.length} {t('Results')}\r\n        </Text>\r\n      </Flex>\r\n      {nftsToShow.length > 0 ? (\r\n        <>\r\n          <Grid\r\n            gridGap=\"16px\"\r\n            gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n            alignItems=\"start\"\r\n          >\r\n            {nftsToShow.map((nft) => {\r\n              const currentAskPriceAsNumber = nft.marketData && parseFloat(nft.marketData.currentAskPrice)\r\n\r\n              return (\r\n                <CollectibleLinkCard\r\n                  key={nft.tokenId}\r\n                  nft={nft}\r\n                  currentAskPrice={currentAskPriceAsNumber > 0 ? currentAskPriceAsNumber : undefined}\r\n                />\r\n              )\r\n            })}\r\n          </Grid>\r\n          <Flex mt=\"60px\" mb=\"12px\" justifyContent=\"center\">\r\n            {collectionNfts.length > numToShow && (\r\n              <Button onClick={handleLoadMore} scale=\"sm\">\r\n                {t('Load more')}\r\n              </Button>\r\n            )}\r\n          </Flex>\r\n        </>\r\n      ) : (\r\n        <Flex alignItems=\"center\" py=\"48px\" flexDirection=\"column\">\r\n          <BunnyPlaceholderIcon width=\"96px\" mb=\"24px\" />\r\n          <Text fontWeight={600}>{t('No NFTs found')}</Text>\r\n        </Flex>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default FilteredCollectionNfts\r\n","import React from 'react'\r\nimport { createPortal } from 'react-dom'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { useGetNftFilters } from 'state/nftMarket/hooks'\r\nimport Container from 'components/Layout/Container'\r\nimport ScrollButton from 'components/ScrollToTopButton'\r\nimport Filters from './Filters'\r\nimport CollectionNfts from './CollectionNfts'\r\nimport FilteredCollectionNfts from './FilteredCollectionNfts'\r\n\r\ninterface CollectionWrapperProps {\r\n  collection: Collection\r\n}\r\n\r\nconst CollectionWrapper: React.FC<CollectionWrapperProps> = ({ collection }) => {\r\n  const nftFilters = useGetNftFilters(collection.address)\r\n\r\n  return (\r\n    <Box py=\"32px\">\r\n      <Container px={[0, null, '24px']}>\r\n        <Filters collection={collection} />\r\n      </Container>\r\n      <Container>\r\n        {isEmpty(nftFilters) ? (\r\n          <CollectionNfts collection={collection} />\r\n        ) : (\r\n          <FilteredCollectionNfts collection={collection} />\r\n        )}\r\n      </Container>\r\n      {createPortal(<ScrollButton />, document.body)}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default CollectionWrapper\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchCollection } from 'state/nftMarket/reducer'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Container from 'components/Layout/Container'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\nimport PancakeBunniesCollectionNfts from './PancakeBunniesCollectionNfts'\r\nimport Header from '../Header'\r\nimport CollectionWrapper from './CollectionWrapper'\r\n\r\nconst Items = () => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const [sortBy, setSortBy] = useState('updatedAt')\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const collection = useGetCollection(collectionAddress)\r\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n\r\n  const { address } = collection || {}\r\n\r\n  const sortByItems = [\r\n    { label: t('Recently listed'), value: 'updatedAt' },\r\n    { label: t('Lowest price'), value: 'currentAskPrice' },\r\n  ]\r\n\r\n  const handleChange = (newOption: OptionProps) => {\r\n    setSortBy(newOption.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (address) {\r\n      dispatch(fetchCollection(address))\r\n    }\r\n  }, [address, dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Header collection={collection} />\r\n      {isPBCollection ? (\r\n        <Container mb=\"24px\">\r\n          <Flex alignItems=\"center\" justifyContent={['flex-start', null, null, 'flex-end']} mb=\"24px\">\r\n            <Box minWidth=\"165px\">\r\n              <Text fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight={600} mb=\"4px\">\r\n                {t('Sort By')}\r\n              </Text>\r\n              <Select options={sortByItems} onOptionChange={handleChange} />\r\n            </Box>\r\n          </Flex>\r\n          <PancakeBunniesCollectionNfts collection={collection} sortBy={sortBy} />\r\n        </Container>\r\n      ) : (\r\n        <CollectionWrapper collection={collection} />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Items\r\n","import React from 'react'\r\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\r\nimport times from 'lodash/times'\r\n\r\ninterface GridPlaceholderProps extends GridProps {\r\n  numItems?: number\r\n}\r\n\r\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\r\n  <Box {...props}>\r\n    <Skeleton height=\"258px\" mb=\"8px\" />\r\n    <Skeleton width=\"30%\" mb=\"4px\" />\r\n    <Skeleton width=\"45%\" mb=\"16px\" />\r\n    <Skeleton />\r\n  </Box>\r\n)\r\n\r\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\r\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\r\n    {times(numItems).map((itemKey) => (\r\n      <GridPlaceholderItem key={itemKey} />\r\n    ))}\r\n  </Grid>\r\n)\r\n\r\nexport default GridPlaceholder\r\n","import React, { ChangeEvent, useState, useEffect } from 'react'\r\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { isAddress } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CircleLoader from 'components/Loader/CircleLoader'\r\n\r\nenum ResultStatus {\r\n  NOT_VALID,\r\n  FOUND,\r\n  NOT_FOUND,\r\n}\r\n\r\ninterface AddressInputSelectProps extends BoxProps {\r\n  onValidAddress?: (value: string) => Promise<boolean>\r\n  onAddressClick: (value: string) => void\r\n}\r\n\r\nconst SubMenu = styled.div<{ isOpen: boolean }>`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\r\n  left: 0;\r\n  padding-bottom: 8px;\r\n  padding-top: 16px;\r\n  position: absolute;\r\n  top: calc(100% - 12px);\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  width: 100%;\r\n  z-index: 15;\r\n\r\n  ${({ isOpen }) =>\r\n    isOpen &&\r\n    `\r\n    height: auto;\r\n    opacity: 1;\r\n    transform: scaleY(1);\r\n  `}\r\n`\r\n\r\nconst AddressLink = styled(Text)`\r\n  cursor: pointer;\r\n  overflow-wrap: break-word;\r\n  font-weight: bold;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n`\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  resultFound: ResultStatus.NOT_VALID,\r\n  value: '',\r\n}\r\n\r\nconst defaultValidAddressHandler = () => Promise.resolve(true)\r\n\r\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\r\n  onValidAddress = defaultValidAddressHandler,\r\n  onAddressClick,\r\n  ...props\r\n}) => {\r\n  const [state, setState] = useState(initialState)\r\n  const { t } = useTranslation()\r\n  const { isFetching, resultFound, value } = state\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value: newValue } = evt.target\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      value: newValue,\r\n    }))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setState(initialState)\r\n    onAddressClick(state.value)\r\n  }\r\n\r\n  // When we have a valid address fetch the data\r\n  useEffect(() => {\r\n    const isValidAddress = isAddress(value) !== false\r\n\r\n    const validAddressHandler = async () => {\r\n      try {\r\n        setState((prevState) => ({ ...prevState, isFetching: true }))\r\n        const hasResults = await onValidAddress(value)\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isFetching: false,\r\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\r\n        }))\r\n      } catch {\r\n        setState((prevState) => ({ ...prevState, isFetching: false }))\r\n      }\r\n    }\r\n\r\n    if (isValidAddress) {\r\n      validAddressHandler()\r\n    } else {\r\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\r\n    }\r\n  }, [value, onValidAddress, setState])\r\n\r\n  return (\r\n    <Box position=\"relative\" {...props}>\r\n      <Input\r\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\r\n        value={state.value}\r\n        onChange={handleChange}\r\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\r\n      />\r\n      {isFetching && (\r\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\r\n          <CircleLoader />\r\n        </Box>\r\n      )}\r\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\r\n        {resultFound === ResultStatus.FOUND ? (\r\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\r\n        ) : (\r\n          <Text px=\"16px\" fontWeight=\"bold\">\r\n            {t('No results found.')}\r\n          </Text>\r\n        )}\r\n      </SubMenu>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default AddressInputSelect\r\n"],"sourceRoot":""}