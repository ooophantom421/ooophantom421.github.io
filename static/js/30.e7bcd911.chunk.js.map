{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/EmWithdrawModal.tsx","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/Countdown/Timer.tsx","views/Farms/components/FarmCard/Countdown/index.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/Farms.tsx","utils/apr.ts"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","secondPart","Divider","backgroundDisabled","EmWithdrawModal","onDismiss","PID","account","useWeb3React","useTheme","useToast","toastError","toastSuccess","useCakeVaultContract","useState","pendingTx","setPendingTx","useCakeVault","estimatedCakeBountyReward","totalPendingCakeHarvest","cakePriceBusd","fees","callFee","useCallWithGasPrice","callWithGasPrice","usePriceCakeBusd","estimatedDollarBountyReward","getBalanceNumber","useMemo","BigNumber","multipliedBy","hasFetchedDollarBounty","gte","hasFetchedCakeBounty","masterChefContract","useMasterchef","handleConfirmClick","a","emergencyWithdraw","tx","wait","title","headerBackground","gradients","cardHeader","alignItems","justifyContent","isLoading","endIcon","spin","mb","id","ConnectWalletButton","StyledLinkExternal","LinkExternal","DetailsSection","farm","bscScanAddress","infoAddress","removed","lpLabel","totalValueFormatted","totalLpValueFormatted","addLiquidityUrl","useModal","pid","onEmergencyWithdraw","href","symbol","variant","p","height","Flex","CardHeading","Tag","multiplier","isCommunityFarm","token","quoteToken","primaryToken","secondaryToken","width","flexDirection","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceUnits","parseUnits","formatBigNumber","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","stakedBalance","onConfirm","tokenName","displayApr","lpPrice","apr","cakePrice","val","setVal","showRoiCalculator","setShowRoiCalculator","fullBalance","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","handleChange","formatNumber","gt","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","disabled","isFinite","eq","console","error","mt","maxWidth","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","withdrawLocked","onStaked","location","useLocation","dispatch","useAppDispatch","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","onPresentDeposit","onPresentWithdraw","Balance","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","canHarvest","rawEarningsBalance","BIG_ZERO","earningsBusd","useApproveFarm","lpContract","onApprove","ethers","constants","MaxUint256","receipt","status","StyledTimerFlex","showTooltip","textSubtle","Timer","minutes","hours","days","HeadingTextComponent","BodyTextComponent","Boolean","suffix","blockNumber","xl","StyledHeading","Heading","Countdown","secondsRemaining","getTimePeriods","seconds","background","gold","$fill","_","Action","CardActions","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lastDepositTime","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","lastDepositTimeVal","utcNow","Date","now","setSecondsRemaining","isCountingdown","startCountingValue","deadLine","countDownVisibility","setTimeout","clearTimeout","timer","textTransform","pr","display","lpSymbol","ApyLabelContainer","ApyButton","useFarmUser","ml","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","widrawLockLabel","FarmCard","index","log","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","totlaLpTokenValueFormatted","lpTotalInQuoteToken","earnLabel","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","ContractAddress","StakingContractAddress","isPromotedFarm","isActive","isCommunity","startIcon","CardActionsContainer","getBscScanLink","PageContainer","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useRouteMatch","useFarms","farmsLP","data","userDataLoaded","query","useUserFarmsViewMode","sortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","useRef","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","tokenPerBlock","lowercaseQuery","latinise","toLowerCase","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","Number","slice","sortFarms","current","useEffect","farmsCurrentlyVisible","PageHeader","flex","as","src","alt","Page","exact","Loading","ref","cakePriceUsd","poolLiquidityUsd","farmAddress","TokenPerYear","BLOCKS_PER_YEAR","NaN","cakeRewardsAprAsNumber","lpAprs","toLocaleLowerCase"],"mappings":"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","file":"static/js/30.e7bcd911.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"button\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport tokens from 'config/constants/tokens'\r\n\r\nconst getLiquidityUrlPathParts = ({\r\n  quoteTokenAddress,\r\n  tokenAddress,\r\n}: {\r\n  quoteTokenAddress: string\r\n  tokenAddress: string\r\n}): string => {\r\n  const wBnbAddress = tokens.wbnb.address\r\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\r\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, Flex, Button, HelpIcon, AutoRenewIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useCakeVaultContract, useMasterchef } from 'hooks/useContract'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport Balance from 'components/Balance'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { useCakeVault } from 'state/pools/hooks'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { emergencyWithdraw } from 'utils/calls/farms'\r\n\r\ninterface EmWithdrawModalProps {\r\n  onDismiss?: () => void\r\n  PID: number\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 16px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst EmWithdrawModal: React.FC<EmWithdrawModalProps> = ({ onDismiss, PID }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { theme } = useTheme()\r\n  const { toastError, toastSuccess } = useToast()\r\n  const cakeVaultContract = useCakeVaultContract()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const {\r\n    estimatedCakeBountyReward,\r\n    totalPendingCakeHarvest,\r\n    fees: { callFee },\r\n  } = useCakeVault()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const callFeeAsDecimal = callFee / 100\r\n  const totalYieldToDisplay = getBalanceNumber(totalPendingCakeHarvest, 18)\r\n\r\n  const estimatedDollarBountyReward = useMemo(() => {\r\n    return new BigNumber(estimatedCakeBountyReward).multipliedBy(cakePriceBusd)\r\n  }, [cakePriceBusd, estimatedCakeBountyReward])\r\n\r\n  const hasFetchedDollarBounty = estimatedDollarBountyReward.gte(0)\r\n  const hasFetchedCakeBounty = estimatedCakeBountyReward ? estimatedCakeBountyReward.gte(0) : false\r\n  const dollarBountyToDisplay = hasFetchedDollarBounty ? getBalanceNumber(estimatedDollarBountyReward, 18) : 0\r\n  const cakeBountyToDisplay = hasFetchedCakeBounty ? getBalanceNumber(estimatedCakeBountyReward, 18) : 0\r\n\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleConfirmClick = async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      const tx = await emergencyWithdraw(masterChefContract, PID)\r\n      const receipt = await tx.wait()\r\n      setPendingTx(false)\r\n      onDismiss()\r\n    } catch (error) {\r\n      toastError(t('Error'), t('Sorry! Transaction is failed!'))\r\n      onDismiss()\r\n      setPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Emergency Withdraw?')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex alignItems=\"flex-start\" justifyContent=\"space-between\">\r\n        <Text>{t('Do you really want to emergency withdraw?')}</Text>\r\n      </Flex>\r\n      <Divider />\r\n      {account ? (\r\n        <Button\r\n          isLoading={pendingTx}\r\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n          onClick={handleConfirmClick}\r\n          mb=\"28px\"\r\n          id=\"autoCakeConfirmBounty\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n        \r\n      ) : (\r\n        <ConnectWalletButton mb=\"28px\" />\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EmWithdrawModal\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Button, LinkExternal, Skeleton, Link, useModal } from '@pancakeswap/uikit'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport EmWithdrawModal from '../EmWithdrawModal'\r\n\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n}\r\n\r\nexport interface ExpandableSectionProps {\r\n  farm: FarmWithStakedValue\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  totalLpValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  farm,\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  totalLpValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [onEmergencyWithdraw] = useModal(<EmWithdrawModal PID={farm.pid} />)\r\n  \r\n  return (\r\n    <Wrapper>\r\n      {/* <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total PET-BNB Staked')}:</Text>\r\n        {totalLpValueFormatted ? <Text>{totalLpValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Deposit Fee')}:</Text>\r\n        {'-' ? <Text>-</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex> */}\r\n      {!removed && (\r\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n          <StyledLinkExternal href={addLiquidityUrl}>{t('Get PET-BNB', { symbol: lpLabel })}</StyledLinkExternal>\r\n        </Flex>\r\n      )}\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      </Flex>\r\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\r\n        <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n      </Flex>\r\n      <Flex justifyContent=\"flex-end\">\r\n          <Button\r\n            variant=\"text\"\r\n            p=\"0\"\r\n            height=\"auto\"\r\n            onClick={onEmergencyWithdraw}\r\n          >\r\n            <Text color=\"red\">\r\n              {t('Emergency Withdrawal')}\r\n            </Text>\r\n          </Button>\r\n          \r\n        </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport { Token } from '@pancakeswap/sdk'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading color='primary' mb=\"4px\">PET-BNB</Heading>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  border: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n\r\n    const balanceUnits = parseUnits(balance, decimals)\r\n    return formatBigNumber(balanceUnits, decimals, decimals)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, Message, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const { theme } = useTheme()\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal \r\n    title={t('Stake LP tokens')} \r\n    onDismiss={onDismiss}\r\n    headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Sorry! Transaction is failed!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\" style={{ maxWidth: '420px' }}>\r\n        <Message variant=\"warning\" mb=\"24px\">\r\n          <Text>\r\n            {t(\"Note: Depositing additional LP tokens will reset the lock so that ALL deposited tokens will unlock at the same time.\",\r\n            )}\r\n          </Text>\r\n        </Message>\r\n      </Flex>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n  const { theme } = useTheme()\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')}\r\n    onDismiss={onDismiss}\r\n    headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Sorry! Transaction is failed!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await unstakeFarm(masterChefContract, pid, amount)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n      console.info(txHash)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  multiplier?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n  withdrawLocked?: boolean\r\n  onStaked: () => void\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  multiplier,\r\n  apr,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  lpLabel,\r\n  withdrawLocked,\r\n  onStaked,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n    onStaked()\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return '<0.0000001'\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0)) {\r\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      multiplier={multiplier}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} disabled={withdrawLocked} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n  canHarvest?: boolean\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, canHarvest }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n\r\n      <Button\r\n        disabled={(!canHarvest || ( rawEarningsBalance.eq(0) || pendingTx ))}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'PET' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Sorry! Transaction is failed!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {pendingTx ? t('Harvesting') : t('Harvest')}\r\n      </Button>\r\n\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const handleApprove = useCallback(async () => {\r\n    const tx = await callWithGasPrice(lpContract, 'approve', [masterChefContract.address, ethers.constants.MaxUint256])\r\n    const receipt = await tx.wait()\r\n    return receipt.status\r\n  }, [lpContract, masterChefContract, callWithGasPrice])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Heading, Text } from '@pancakeswap/uikit'\r\n\r\nexport interface TimerProps {\r\n  prefix?: string\r\n  suffix?: string\r\n  minutes?: number\r\n  hours?: number\r\n  days?: number\r\n  showTooltip?: boolean\r\n  blockNumber?: number\r\n  HeadingTextComponent?: React.ElementType\r\n  BodyTextComponent?: React.ElementType\r\n}\r\n\r\nconst StyledTimerFlex = styled(Flex)<{ showTooltip?: boolean }>`\r\n  ${({ theme, showTooltip }) => (showTooltip ? ` border-bottom: 1px dashed ${theme.colors.textSubtle};` : ``)}\r\n  div:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Timer = ({ minutes, hours, days, showTooltip, HeadingTextComponent, BodyTextComponent }) => {\r\n  return (\r\n    <StyledTimerFlex alignItems=\"flex-end\" showTooltip={showTooltip}>\r\n      {Boolean(days) && (\r\n        <>\r\n          <HeadingTextComponent mr=\"2px\">{days}</HeadingTextComponent>\r\n          <BodyTextComponent>d</BodyTextComponent>\r\n        </>\r\n      )}\r\n      {Boolean(hours) && (\r\n        <>\r\n          <HeadingTextComponent mr=\"2px\">{hours}</HeadingTextComponent>\r\n          <BodyTextComponent>h</BodyTextComponent>\r\n        </>\r\n      )}\r\n      {Boolean(minutes) && (\r\n        <>\r\n          <HeadingTextComponent mr=\"2px\">{minutes}</HeadingTextComponent>\r\n          <BodyTextComponent>m</BodyTextComponent>\r\n        </>\r\n      )}\r\n    </StyledTimerFlex>\r\n  )\r\n}\r\n\r\n\r\nconst Wrapper: React.FC<TimerProps> = ({\r\n  prefix,\r\n  suffix,\r\n  minutes,\r\n  hours,\r\n  days,\r\n  blockNumber,\r\n  showTooltip = false,\r\n  HeadingTextComponent,\r\n  BodyTextComponent,\r\n}) => {\r\n\r\n  return (\r\n    <Flex alignItems=\"flex-end\" position=\"relative\">\r\n      <Timer\r\n        minutes={minutes}\r\n        hours={hours}\r\n        days={days}\r\n        HeadingTextComponent={HeadingTextComponent}\r\n        BodyTextComponent={BodyTextComponent}\r\n        showTooltip={showTooltip}\r\n      />\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Wrapper\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Skeleton, PocketWatchIcon, Text, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\nimport useTheme from 'hooks/useTheme'\r\nimport Timer from './Timer'\r\n\r\nconst Wrapper = styled(Flex)`\r\n  width: fit-content;\r\n  height: fit-content;\r\n  border: 1px solid #7645d9;\r\n  box-sizing: border-box;\r\n  border-radius: 6px 6px 6px 6px;\r\n  padding: 3px 3px;\r\n\r\n  justify-content: space-around;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding: 4px 4px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    flex-direction: column;\r\n  }\r\n`\r\n\r\ninterface HeadingProps {\r\n  background?: string\r\n  $fill?: boolean\r\n}\r\nconst StyledHeading = styled(Heading)<HeadingProps>`\r\n  font-size: 16px;\r\n  margin-right: 2px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst Countdown: React.FC<{ secondsRemaining: number; }> = ({\r\n  secondsRemaining,\r\n}) => {\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n\r\n  const { minutes, hours, days, seconds } = getTimePeriods(secondsRemaining)\r\n\r\n  const renderTimer = () => {\r\n    return (\r\n      <Timer\r\n        prefix={`${t('Start')}:`}\r\n        minutes={seconds}\r\n        hours={hours}\r\n        days={days}\r\n        HeadingTextComponent={({ children }) => (\r\n          <StyledHeading background={theme.colors.gradients.gold} $fill>\r\n            {children}\r\n          </StyledHeading>\r\n        )}\r\n        BodyTextComponent={({ children }) => (\r\n          <Text bold color={theme.colors.gradients.gold} fontSize=\"12px\" mr={{ _: '8px', sm: '10px' }}>\r\n            {children}\r\n          </Text>\r\n        )}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"center\" alignItems=\"center\">\r\n        {renderTimer()}\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Countdown\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\nimport useCountdown from './Countdown/useCountdown'\r\nimport CountDown from './Countdown'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const { allowance, tokenBalance, stakedBalance, earnings, lastDepositTime, canHarvest } = farm.userData || {}\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n  /* Get PET Token Contract */\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n    } catch (e) {\r\n      toastError(t('Error'), t('Sorry! Transaction is failed!'))\r\n      console.error(e)\r\n    } finally {\r\n      setRequestedApproval(false)\r\n    }\r\n  }, [onApprove, dispatch, account, pid, t, toastError])\r\n\r\n  let withdrawLocked = true\r\n  const setWithdrawLocked = (flag) => {\r\n    withdrawLocked = flag\r\n  }\r\n  // const onStaked = useCallback(() => setWithdrawLocked(false), [setWithdrawLocked])\r\n  const onStaked = () => {\r\n    withdrawLocked = false\r\n  }\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        withdrawLocked={withdrawLocked}\r\n        onStaked={onStaked}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  let lastDepositTimeVal = lastDepositTime.toNumber()\r\n  const utcNow = Date.now() / 1000;\r\n  \r\n  lastDepositTimeVal = utcNow - 1 // test code\r\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\r\n\r\n  let isCountingdown = false\r\n  let timer: ReturnType<typeof setTimeout>\r\n  let startCountingValue = 0\r\n  const timerCallback = () => {\r\n    if (startCountingValue === 0) {\r\n      setSecondsRemaining(secondsRemaining - 1)\r\n    } else {\r\n      setSecondsRemaining(startCountingValue)\r\n      startCountingValue = 0\r\n    }\r\n    if (isCountingdown && secondsRemaining === 0) {\r\n      clearTimeout(timer)\r\n      isCountingdown = false\r\n      countDownVisibility = false\r\n    }\r\n  }\r\n\r\n  const withdrawLockPeriod = farm.pid === 0 ? 30 : (farm.pid === 1 ? 45 : 50)\r\n  const deadLine = lastDepositTimeVal + withdrawLockPeriod\r\n  let countDownVisibility = false\r\n  if (/* !account || !isApproved || */ lastDepositTimeVal === 0) {\r\n    countDownVisibility = false\r\n  } else if (lastDepositTimeVal < utcNow && utcNow < deadLine) {\r\n    countDownVisibility = true\r\n\r\n    if (isCountingdown === false) {\r\n      isCountingdown = true\r\n      startCountingValue = deadLine - utcNow\r\n      setTimeout(timerCallback, 1000)\r\n    }\r\n  }\r\n\r\n  countDownVisibility = false\r\n  // withdrawLocked = isCountingdown\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          PET\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} canHarvest={canHarvest} />\r\n\r\n      <Flex justifyContent=\"flex-end\" style={{ display: countDownVisibility ? 'flex' : 'none'}}>\r\n        <CountDown secondsRemaining={secondsRemaining} />\r\n      </Flex>\r\n\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {t('PET-BNB')}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\">\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n          <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Card, Flex, Text, Skeleton, Tag, LockIcon, } from '@pancakeswap/uikit'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { StakingContractAddress } from 'config/constants'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends DeserializedFarm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: baseline;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  index:number\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst widrawLockLabel = ['30D'];\r\nconst aprLabel = [45.89, 89.32, 123.59];\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account, index }) => {\r\n  const { t } = useTranslation()\r\n\r\n  console.log ('farm: ', farm);\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 7 })}`\r\n      : ''\r\n  \r\n  const totlaLpTokenValueFormatted = farm.lpTotalInQuoteToken && farm.lpTotalInQuoteToken.gt(0)\r\n  ? `${farm.lpTotalInQuoteToken.toNumber().toLocaleString(undefined, { maximumFractionDigits: 7 })}`\r\n  : ''\r\n      \r\n  const lpLabel = \"MTR\";/* arm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '') */\r\n \r\n  const earnLabel = widrawLockLabel[index]/* farm.dual ? farm.dual.earnLabel : t('CAKE + Fees') */\r\n \r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const ContractAddress = getAddress(StakingContractAddress)\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n  return (\r\n    <StyledCard isActive={isPromotedFarm}>\r\n      <FarmCardInnerContainer>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          multiplier={farm.multiplier}\r\n          isCommunityFarm={farm.isCommunity}\r\n          token={farm.token}\r\n          quoteToken={farm.quoteToken}\r\n        />\r\n        {!removed && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text color=\"secondary\">{t('APR')}:</Text>\r\n            <Text color=\"secondary\" bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {  30  ? (\r\n                <ApyButton\r\n                  variant=\"text-and-button\"\r\n                  pid={farm.pid}\r\n                  lpSymbol={farm.lpSymbol}\r\n                  multiplier={farm.multiplier}\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={  30 }\r\n                  displayApr={ '100'/* displayApr */ }\r\n                />\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text color=\"secondary\">{t('Withdraw Lock')}:</Text>\r\n          <Tag variant=\"secondary\" startIcon={<LockIcon width=\"14px\" color=\"secondary\" mr=\"4px\" />}>\r\n            {earnLabel}\r\n          </Tag>\r\n        </Flex>\r\n        <CardActionsContainer\r\n          farm={farm}\r\n          lpLabel={lpLabel}\r\n          account={account}\r\n          cakePrice={cakePrice}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n\r\n      </FarmCardInnerContainer>\r\n\r\n      <ExpandingWrapper>\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n        />\r\n        {showExpandableSection && (\r\n          <DetailsSection\r\n            farm={farm}\r\n            removed={removed}\r\n            bscScanAddress={getBscScanLink(ContractAddress, 'address')}\r\n            infoAddress={`https://pancakeswap.finance/info/pool/${lpAddress}`}\r\n            totalValueFormatted={totalValueFormatted}\r\n            totalLpValueFormatted = {totlaLpTokenValueFormatted}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n          />\r\n        )}\r\n      </ExpandingWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsWithUserData, useLpTokenPrice, usePriceCakeBusd} from 'state/farms/hooks'\r\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\r\nimport { DeserializedFarm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\r\nimport { ViewMode } from 'state/user/actions'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema } from './components/types'\r\n/*\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\n*/\r\n\r\nconst PageContainer = styled.div`\r\n  background: url('/images/background.png');\r\n  background-size: cover;\r\n`;\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const lpPrice = useLpTokenPrice(\"PET-BNB LP\")\r\n  \r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const { observerRef, isIntersecting } = useIntersectionObserver()\r\n  const chosenFarmsLength = useRef(0)\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsWithUserData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 6 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 6 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n  \r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\r\n          return farm\r\n        }\r\n        // const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(lpPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET], new BigNumber(farm.tokenPerBlock))\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive, lpPrice],\r\n  )\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n\r\n  console.log ('stakedOnly: ', isActive);\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    if (isIntersecting) {\r\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n        }\r\n        return farmsCurrentlyVisible\r\n      })\r\n    }\r\n  }, [isIntersecting])\r\n/*\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n*/\r\n\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm, index) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              index={index}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm, index) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              index={index}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm, index) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              index={index}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <PageContainer>\r\n      <PageHeader>\r\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\r\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\r\n            <Heading as=\"h1\" scale=\"xxl\" color=\"white\" mb=\"24px\">\r\n              {t('Farms')}\r\n            </Heading>\r\n            <Heading scale=\"lg\" color=\"white\">\r\n              {t('Stake LP to earn more PET Rewards Tokens.')}\r\n            </Heading>\r\n            {/* <Heading scale=\"md\" color=\"text\">\r\n              {t('High APR, low risk.')}\r\n            </Heading> */}\r\n          </Flex>\r\n          <Flex flex=\"1\" height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\r\n            {/* <HelpButton />\r\n            <BountyCard /> */}\r\n          </Flex>\r\n          <Flex flex=\"1\" justifyContent=\"right\">\r\n            <img src=\"/images/dove.png\" alt=\"\" width=\"160px\" height=\"148px\"/>\r\n          </Flex>\r\n        </Flex>\r\n      </PageHeader>\r\n      <Page>\r\n        { /*\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle\r\n                id=\"staked-only-farms\"\r\n                checked={stakedOnly}\r\n                onChange={() => setStakedOnly(!stakedOnly)}\r\n                scale=\"sm\"\r\n              />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onOptionChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        */\r\n        }\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={observerRef} />\r\n      </Page>\r\n    </PageContainer>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_YEAR } from 'config'\r\nimport lpAprs from 'config/constants/lpAprs.json'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getPoolApr = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  rate: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const bnRate = new BigNumber(rate)\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR).times(bnRate)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @param farmAddress Farm Address\r\n * @returns Farm Apr\r\n */\r\nexport const getFarmApr = (\r\n  poolWeight: BigNumber,\r\n  cakePriceUsd: BigNumber,\r\n  poolLiquidityUsd: BigNumber,\r\n  farmAddress: string,\r\n  tokenPerBlock: BigNumber\r\n): { cakeRewardsApr: number; lpRewardsApr: number } => {\r\n  const TokenPerYear = tokenPerBlock.times(BLOCKS_PER_YEAR)\r\n  const yearlyCakeRewardAllocation = poolWeight ? poolWeight.times(TokenPerYear) : new BigNumber(NaN)\r\n  const cakeRewardsApr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n  let cakeRewardsAprAsNumber = null\r\n  if (!cakeRewardsApr.isNaN() && cakeRewardsApr.isFinite()) {\r\n    cakeRewardsAprAsNumber = cakeRewardsApr.toNumber()\r\n  }\r\n  const lpRewardsApr = lpAprs[farmAddress?.toLocaleLowerCase()] ?? 0\r\n  return { cakeRewardsApr: cakeRewardsAprAsNumber, lpRewardsApr }\r\n}\r\n\r\nexport default null\r\n"],"sourceRoot":""}