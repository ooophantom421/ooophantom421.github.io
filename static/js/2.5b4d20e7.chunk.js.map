{"version":3,"sources":["views/Nft/market/components/ProfileCell.tsx","views/Nft/market/components/ProfileNftModal.tsx","views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/BuySellModals/shared/ApproveAndConfirmStage.tsx","views/Nft/market/components/BuySellModals/shared/TransactionConfirmed.tsx","views/Nft/market/components/BuySellModals/shared/ConfirmStage.tsx","hooks/useApproveConfirmTransaction.ts","components/ApproveConfirmButtons.tsx","views/Nft/market/components/BuySellModals/shared/styles.tsx","views/Nft/market/components/BuySellModals/SellModal/types.ts","views/Nft/market/components/BuySellModals/SellModal/SellStage.tsx","views/Nft/market/components/BuySellModals/SellModal/styles.tsx","views/Nft/market/components/BuySellModals/SellModal/SetPriceStage.tsx","views/Nft/market/components/BuySellModals/SellModal/EditStage.tsx","views/Nft/market/components/BuySellModals/SellModal/RemoveStage.tsx","views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx","views/Nft/market/components/BuySellModals/SellModal/index.tsx","components/ProfileAvatarWithTeam.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx","views/Nft/market/Profile/components/EditProfileModal/reducer.ts","views/Nft/market/Profile/hooks/useGetProfileCosts.ts","views/Nft/market/Profile/components/EditProfileModal/StartView.tsx","views/Nft/market/Profile/components/EditProfileModal/PauseProfileView.tsx","views/Nft/market/Profile/components/EditProfileModal/ChangeProfilePicView.tsx","views/Nft/market/Profile/components/EditProfileModal/ApproveCakeView.tsx","views/Nft/market/Profile/components/EditProfileModal/index.tsx"],"names":["Avatar","styled","img","theme","mediaQueries","md","StyledFlex","Flex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","nft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","width","height","mr","ProfileAvatarFetchStatus","FETCHED","image","thumbnail","src","to","nftsBaseUrl","display","lineHeight","truncateHash","StyledModal","Modal","TextWrapper","colors","dropdown","ProfileNftModal","onDismiss","useModal","onEditProfileModal","t","useTranslation","useTheme","itemPageUrlId","collectionAddress","pancakeBunniesAddress","attributes","value","tokenId","title","headerBackground","gradients","cardHeader","flexDirection","maxWidth","p","flex","gridTemplateColumns","alignItems","bold","name","fontSize","color","textAlign","collectionName","justifyContent","px","mb","small","id","as","Link","external","variant","href","getBscScanLinkForNft","py","onClick","PageButtons","div","Arrow","primary","ApproveAndConfirmStage","isApproved","isApproving","isConfirming","handleApprove","handleConfirm","success","mt","size","disabled","TransactionConfirmed","txHash","chainId","useActiveWeb3React","getBscScanLink","pb","ConfirmStage","initialState","approvalState","confirmState","reducer","state","actions","type","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","noop","onApproveSuccess","account","useWeb3React","useReducer","dispatch","handlePreApprove","useRef","toastError","useToast","useEffect","current","then","result","isConfirmed","hasApproveFailed","hasConfirmFailed","a","tx","wait","receipt","status","params","ButtonArrangement","StyledApproveConfirmButtonRow","Button","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","endIcon","undefined","isLoading","RoundedImage","Image","radii","Divider","cardBorder","HorizontalDivider","StepIndicator","secondary","textDisabled","SellingStage","SellStage","nftToSell","lowestPrice","continueToNextStage","continueToTransferStage","hasProfile","useProfile","toLowerCase","EditProfileModal","toLocaleString","minimumFractionDigits","maximumFractionDigits","stagesWithBackButton","SET_PRICE","ADJUST_PRICE","APPROVE_AND_CONFIRM_SELL","CONFIRM_ADJUST_PRICE","REMOVE_FROM_MARKET","CONFIRM_REMOVE_FROM_MARKET","TRANSFER","CONFIRM_TRANSFER","stage","includes","textSubtle","GreyedOutContainer","Box","RightAlignedInput","Input","BnbAmountCell","bnbAmount","bnbBusdPrice","useBNBBusdPrice","usdAmount","multiplyPriceByAmount","FeeAmountCell","creatorFee","tradingFee","totalFee","feeAmount","SetPriceStage","currentPrice","price","setPrice","inputRef","adjustedPriceIsTheSame","parseFloat","priceIsValid","Number","isNaN","useGetCollection","creatorFeeAsNumber","tradingFeeAsNumber","bnbPrice","priceAsFloat","priceInUsd","priceIsOutOfRange","useTooltip","percentage","placement","tooltip","tooltipVisible","targetRef","focus","textTransform","scale","inputMode","ref","isWarning","onChange","e","target","minPrice","maxPrice","alignSelf","EditStage","continueToAdjustPriceStage","continueToRemoveFromMarketStage","marketData","currentAskPrice","RemoveStage","TransferStage","transferAddress","setTransferAddress","isInvalidTransferAddress","transferAddressEqualsConnectedAddress","pt","placeholder","length","modalTitles","SELL","EDIT","TX_CONFIRMED","getToastText","SellModal","useState","setStage","confirmedTxHash","setConfirmedTxHash","callWithGasPrice","useCallWithGasPrice","toastSuccess","collectionContract","useErc721CollectionContract","nftMarketContract","useNftMarketContract","useAppDispatch","isAddress","useGetLowestPriceFromNft","dispatchSuccessAction","updateUserNft","location","NftLocation","WALLET","removeUserNft","FORSALE","isApprovedForAll","address","approvedForContract","Toast","transactionHash","methodName","askPrice","parseUnits","showBackButton","onBack","TeamAvatar","card","background","sm","AvatarWrapper","bg","AvatarInactive","NoProfileAvatarIcon","ProfileAvatarWithTeam","profile","isActive","team","images","alt","useFetchUserNfts","isProfileInitialized","isInitialized","isProfileLoading","userNftsInitializationState","useUserNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UserNftInitializationState","UNINITIALIZED","hasAccountSwitched","isEmpty","fetchUserNfts","Label","label","isDisabled","Body","Children","StyledBackgroundImage","SelectionCard","isChecked","children","props","isSuccess","checked","style","Views","action","currentView","view","previousView","useEditProfile","START","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious","useGetProfileCosts","setIsLoading","numberCakeToReactivate","ethers","BigNumber","from","numberCakeToRegister","numberCakeToUpdate","costs","setCosts","calls","map","method","getPancakeProfileAddress","multicallv2","profileABI","fetchCosts","DangerOutline","failure","StartPage","cakeContract","useCake","useGetCakeBalance","cakeBalance","balance","fetchStatus","isProfileCostsLoading","needsApproval","setNeedsApproval","minimumCakeRequired","hasMinimumCakeRequired","FetchStatus","SUCCESS","gte","allowance","response","lt","checkApprovalStatus","minimum","formatBigNumber","PauseProfilePage","isAcknowledged","setIsAcknowledged","setIsConfirming","pancakeProfileContract","useProfileContract","handleDeactivateProfile","fetchProfile","cost","htmlFor","cursor","marginBottom","ml","ChangeProfilePicPage","selectedNft","setSelectedNft","nfts","profileContract","library","nftsInWallet","filter","contract","getErc721Contract","getSigner","maxHeight","overflowY","walletNft","ApproveCakePage","setIsApproving","approve","mul","viewTitle","isStartView","handleBack","hideCloseButton","StartView","PauseProfileView","ChangeProfilePicView","ApproveCakeView"],"mappings":"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","file":"static/js/2.5b4d20e7.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport { ProfileAvatarFetchStatus } from 'state/types'\r\nimport { Link } from 'react-router-dom'\r\nimport { nftsBaseUrl } from '../constants'\r\n\r\nconst Avatar = styled.img`\r\n  margin-right: 4px;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-right: 12px;\r\n  }\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  align-items: center;\r\n  transition: opacity 200ms ease-in;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\r\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\r\n  const profileName = username || '-'\r\n\r\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n  if (avatarFetchStatus === ProfileAvatarFetchStatus.FETCHED) {\r\n    if (profileNft?.image?.thumbnail) {\r\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\r\n    } else {\r\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\r\n      <StyledFlex>\r\n        {sellerProfilePicComponent}\r\n        <Box display=\"inline\">\r\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\r\n          {usernameFetchStatus !== ProfileAvatarFetchStatus.FETCHED ? (\r\n            <Skeleton />\r\n          ) : (\r\n            <Text lineHeight=\"1.25\">{profileName}</Text>\r\n          )}\r\n        </Box>\r\n      </StyledFlex>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default ProfileCell\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, useModal, Link, Grid, LinkExternal } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { HorizontalDivider, RoundedImage } from './BuySellModals/shared/styles'\r\nimport EditProfileModal from '../Profile/components/EditProfileModal'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../constants'\r\n\r\nexport const StyledModal = styled(Modal)`\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst TextWrapper = styled(Flex)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n`\r\n\r\ninterface ProfileNftModalProps extends InjectedModalProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst ProfileNftModal: React.FC<ProfileNftModalProps> = ({ nft, onDismiss }) => {\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  const itemPageUrlId = nft.collectionAddress === pancakeBunniesAddress ? nft.attributes[0].value : nft.tokenId\r\n\r\n  return (\r\n    <StyledModal title={t('Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex p=\"16px\">\r\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n            <Text bold>{nft.name}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            {/* TODO: Add lowestPrice when available */}\r\n          </Grid>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" px=\"16px\" mb=\"16px\">\r\n          <Flex flex=\"2\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Token ID: %id%', { id: nft.tokenId })}\r\n            </Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\" flex=\"3\">\r\n            <Button\r\n              as={Link}\r\n              p=\"0px\"\r\n              height=\"16px\"\r\n              external\r\n              variant=\"text\"\r\n              href={`${nftsBaseUrl}/collections/${nft.collectionAddress}/${itemPageUrlId}`}\r\n            >\r\n              {t('View Item')}\r\n            </Button>\r\n            <HorizontalDivider />\r\n            <LinkExternal p=\"0px\" height=\"16px\" href={getBscScanLinkForNft(nft.collectionAddress, nft.tokenId)}>\r\n              BscScan\r\n            </LinkExternal>\r\n          </Flex>\r\n        </Flex>\r\n        <TextWrapper p=\"24px 16px\" flexDirection=\"column\">\r\n          <Text mb=\"16px\">{t(\"You're using this NFT as your Pancake Profile picture\")}</Text>\r\n          <Text color=\"textSubtle\" mb=\"16px\" fontSize=\"14px\">\r\n            {t(\r\n              'Removing it will suspend your profile, and you won’t be able to earn points, participate in team activities, or be eligible for new NFT drops.',\r\n            )}\r\n          </Text>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {t('Go to your profile page to continue.')}\r\n          </Text>\r\n        </TextWrapper>\r\n        <Flex flexDirection=\"column\" py=\"16px\" px=\"16px\">\r\n          <Button onClick={onEditProfileModal} width=\"100%\" variant=\"secondary\">\r\n            {t('Remove Profile Pic')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default ProfileNftModal\r\n","import styled from 'styled-components'\r\n\r\nexport const PageButtons = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nexport const Arrow = styled.div`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  padding: 0 20px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { StepIndicator } from './styles'\r\n\r\ninterface ApproveAndConfirmStageProps {\r\n  variant: 'buy' | 'sell'\r\n  isApproved: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  handleApprove: () => void\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown if user wants to pay with WBNB and contract isn't approved yet\r\n// Sell Flow:\r\n// Shown the first time user puts NFT for sale\r\nconst ApproveAndConfirmStage: React.FC<ApproveAndConfirmStageProps> = ({\r\n  variant,\r\n  isApproved,\r\n  isApproving,\r\n  isConfirming,\r\n  handleApprove,\r\n  handleConfirm,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex mb=\"8px\" alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <StepIndicator success={isApproved}>\r\n              <Text fontSize=\"20px\" bold color=\"invertedContrast\">\r\n                1\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" color={isApproved ? 'success' : 'secondary'} bold>\r\n              {isApproved ? t('Enabled') : t('Enable')}\r\n            </Text>\r\n          </Flex>\r\n          {!isApproved && (\r\n            <Text mt=\"8px\" maxWidth=\"275px\" small color=\"textSubtle\">\r\n              {variant === 'buy'\r\n                ? t('Please enable WBNB spending in your wallet')\r\n                : t('Please enable your NFT to be sent to the market')}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isApproving && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      {!isApproved && (\r\n        <Button variant=\"secondary\" disabled={isApproving} onClick={handleApprove}>\r\n          {isApproving ? `${t('Enabling')}...` : t('Enable')}\r\n        </Button>\r\n      )}\r\n      <Flex alignItems=\"center\" mt=\"8px\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\" mt=\"16px\">\r\n            <StepIndicator success={!!0} disabled={!isApproved}>\r\n              <Text fontSize=\"20px\" bold color={!isApproved ? 'textDisabled' : 'invertedContrast'}>\r\n                2\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" bold color={isApproved ? 'secondary' : 'textDisabled'}>\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color={isApproved ? 'textSubtle' : 'textDisabled'}>\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"16px\" disabled={!isApproved || isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveAndConfirmStage\r\n","import React from 'react'\r\nimport { Flex, Text, Button, ArrowUpIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { Divider } from './styles'\r\n\r\ninterface TransactionConfirmedProps {\r\n  txHash: string\r\n  onDismiss: () => void\r\n}\r\n\r\nconst TransactionConfirmed: React.FC<TransactionConfirmedProps> = ({ txHash, onDismiss }) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\" height=\"150px\">\r\n        <ArrowUpIcon width=\"64px\" height=\"64px\" color=\"primary\" />\r\n        <Text bold>{t('Transaction Confirmed')}</Text>\r\n        <LinkExternal href={getBscScanLink(txHash, 'transaction', chainId)}>{t('View on BscScan')}</LinkExternal>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex px=\"16px\" pb=\"16px\" justifyContent=\"center\">\r\n        <Button onClick={onDismiss} variant=\"secondary\" width=\"100%\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransactionConfirmed\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ConfirmStageProps {\r\n  isConfirming: boolean\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown in case user wants to pay with BNB\r\n// or if user wants to pay with WBNB and it is already approved\r\n// Sell Flow:\r\n// Shown if user adjusts the price or removes NFT from the market\r\nconst ConfirmStage: React.FC<ConfirmStageProps> = ({ isConfirming, handleConfirm }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <Text fontSize=\"20px\" bold color=\"secondary\">\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" height=\"72px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"24px\" disabled={isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? `${t('Confirming')}...` : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ConfirmStage\r\n","import { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface OnSuccessProps {\r\n  state: State\r\n  receipt: ethers.providers.TransactionReceipt\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\r\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\r\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    hasApproveFailed: state.approvalState === 'fail',\r\n    hasConfirmFailed: state.confirmState === 'fail',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        toastError(t('Error'), t('Sorry! Transaction is failed!'))\r\n      }\r\n    },\r\n    handleConfirm: async (params = {}) => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm(params)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        toastError(t('Error'), t('Sorry! Transaction is failed!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport enum ButtonArrangement {\r\n  ROW = 'row',\r\n  SEQUENTIAL = 'sequential',\r\n}\r\n\r\ninterface ApproveConfirmButtonsProps {\r\n  isApproveDisabled: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  isConfirmDisabled: boolean\r\n  onApprove: () => void\r\n  onConfirm: () => void\r\n  buttonArrangement?: ButtonArrangement\r\n  confirmLabel?: string\r\n  confirmId?: string\r\n}\r\n\r\nconst StyledApproveConfirmButtonRow = styled.div`\r\n  align-items: center;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 1fr 24px 1fr;\r\n  }\r\n`\r\n\r\nconst Button = styled(UIKitButton)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    min-width: 160px;\r\n  }\r\n`\r\n\r\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\r\n\r\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\r\n\r\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\r\n  isApproveDisabled,\r\n  isApproving,\r\n  isConfirming,\r\n  isConfirmDisabled,\r\n  onApprove,\r\n  onConfirm,\r\n  buttonArrangement = ButtonArrangement.ROW,\r\n  confirmLabel,\r\n  confirmId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const confirmButtonText = confirmLabel ?? t('Confirm')\r\n\r\n  const ApproveConfirmRow = () => {\r\n    return (\r\n      <StyledApproveConfirmButtonRow>\r\n        <Box>\r\n          <Button\r\n            disabled={isApproveDisabled}\r\n            onClick={onApprove}\r\n            endIcon={isApproving ? spinnerIcon : undefined}\r\n            isLoading={isApproving}\r\n          >\r\n            {isApproving ? t('Enabling') : t('Enable')}\r\n          </Button>\r\n        </Box>\r\n        <Flex justifyContent=\"center\">\r\n          <ChevronRight />\r\n          <ChevronBottom />\r\n        </Flex>\r\n        <Box>\r\n          <Button\r\n            id={confirmId}\r\n            onClick={onConfirm}\r\n            disabled={isConfirmDisabled}\r\n            isLoading={isConfirming}\r\n            endIcon={isConfirming ? spinnerIcon : undefined}\r\n          >\r\n            {isConfirming ? t('Confirming') : confirmButtonText}\r\n          </Button>\r\n        </Box>\r\n      </StyledApproveConfirmButtonRow>\r\n    )\r\n  }\r\n\r\n  const ApproveConfirmSequential = () => {\r\n    return (\r\n      <>\r\n        {isApproveDisabled ? (\r\n          <Box>\r\n            <Button\r\n              id={confirmId}\r\n              onClick={onConfirm}\r\n              disabled={isConfirmDisabled}\r\n              isLoading={isConfirming}\r\n              endIcon={isConfirming ? spinnerIcon : undefined}\r\n            >\r\n              {isConfirming ? t('Confirming') : confirmButtonText}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\r\n              {isApproving ? t('Enabling') : t('Enable')}\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\r\n}\r\n\r\nexport default ApproveConfirmButtons\r\n","import styled from 'styled-components'\r\nimport { Flex, Image } from '@pancakeswap/uikit'\r\n\r\nexport const RoundedImage = styled(Image)`\r\n  border-radius: ${({ theme }) => theme.radii.small};\r\n  overflow: hidden;\r\n`\r\n\r\nexport const Divider = styled.div`\r\n  margin: 16px 0;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nexport const HorizontalDivider = styled.div`\r\n  border-right: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nexport const StepIndicator = styled(Flex)<{ success: boolean; disabled?: boolean }>`\r\n  border-radius: 50%;\r\n  background-color: ${({ theme, success, disabled }) => {\r\n    if (disabled) {\r\n      return 'none'\r\n    }\r\n    return success ? theme.colors.success : theme.colors.secondary\r\n  }};\r\n  border: ${({ theme, disabled }) => (disabled ? `1px solid ${theme.colors.textDisabled}` : 'none')};\r\n  height: 32px;\r\n  width: 32px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 8px;\r\n`\r\n","export enum SellingStage {\r\n  // Sell flow\r\n  SELL,\r\n  SET_PRICE,\r\n  APPROVE_AND_CONFIRM_SELL,\r\n  // Adjust price flow\r\n  EDIT,\r\n  ADJUST_PRICE,\r\n  CONFIRM_ADJUST_PRICE,\r\n  // Remove from market flow\r\n  REMOVE_FROM_MARKET,\r\n  CONFIRM_REMOVE_FROM_MARKET,\r\n  // Transfer flow\r\n  TRANSFER,\r\n  CONFIRM_TRANSFER,\r\n  // Common\r\n  TX_CONFIRMED,\r\n}\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, BinanceIcon, LinkExternal, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface SellStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToNextStage: () => void\r\n  continueToTransferStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to put their NFT for sale or transfer to another wallet\r\nconst SellStage: React.FC<SellStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToNextStage,\r\n  continueToTransferStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { hasProfile } = useProfile()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>\r\n                  {lowestPrice.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 3,\r\n                    maximumFractionDigits: 3,\r\n                  })}\r\n                </Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Sell')}\r\n        </Button>\r\n        <Button mb=\"8px\" variant=\"secondary\" onClick={continueToTransferStage}>\r\n          {t('Transfer')}\r\n        </Button>\r\n        {hasProfile && (\r\n          <Button variant=\"secondary\" onClick={onEditProfileModal}>\r\n            {t('Set as Profile Pic')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SellStage\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Box, Flex, Text, BinanceIcon, Input } from '@pancakeswap/uikit'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { SellingStage } from './types'\r\n\r\nexport const stagesWithBackButton = [\r\n  SellingStage.SET_PRICE,\r\n  SellingStage.ADJUST_PRICE,\r\n  SellingStage.APPROVE_AND_CONFIRM_SELL,\r\n  SellingStage.CONFIRM_ADJUST_PRICE,\r\n  SellingStage.REMOVE_FROM_MARKET,\r\n  SellingStage.CONFIRM_REMOVE_FROM_MARKET,\r\n  SellingStage.TRANSFER,\r\n  SellingStage.CONFIRM_TRANSFER,\r\n]\r\n\r\nexport const StyledModal = styled(Modal)<{ stage: SellingStage }>`\r\n  width: 360px;\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n  & h2:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `color: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n  & svg:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `fill: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n`\r\n\r\nexport const GreyedOutContainer = styled(Box)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  padding: 16px;\r\n`\r\n\r\nexport const RightAlignedInput = styled(Input)`\r\n  text-align: right;\r\n`\r\n\r\ninterface BnbAmountCellProps {\r\n  bnbAmount: number\r\n}\r\n\r\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount }) => {\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${bnbAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        {`($${usdAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface FeeAmountCellProps {\r\n  bnbAmount: number\r\n  creatorFee: number\r\n  tradingFee: number\r\n}\r\n\r\nexport const FeeAmountCell: React.FC<FeeAmountCellProps> = ({ bnbAmount, creatorFee, tradingFee }) => {\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  const totalFee = creatorFee + tradingFee\r\n  const totalFeeAsDecimal = totalFee / 100\r\n  const feeAmount = bnbAmount * totalFeeAsDecimal\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${feeAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 6,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        ({totalFee}%)\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Flex, Grid, Box, Text, Button, BinanceIcon, ErrorIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { Divider } from '../shared/styles'\r\nimport { GreyedOutContainer, BnbAmountCell, RightAlignedInput, FeeAmountCell } from './styles'\r\n\r\ninterface SetPriceStageProps {\r\n  nftToSell: NftToken\r\n  variant: 'set' | 'adjust'\r\n  currentPrice?: string\r\n  lowestPrice?: number\r\n  price: string\r\n  setPrice: React.Dispatch<React.SetStateAction<string>>\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst MIN_PRICE = 0.005\r\nconst MAX_PRICE = 10000\r\n\r\n// Stage where user puts price for NFT they're about to put on sale\r\n// Also shown when user wants to adjust the price of already listed NFT\r\nconst SetPriceStage: React.FC<SetPriceStageProps> = ({\r\n  nftToSell,\r\n  variant,\r\n  lowestPrice,\r\n  currentPrice,\r\n  price,\r\n  setPrice,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const inputRef = useRef<HTMLInputElement>()\r\n  const adjustedPriceIsTheSame = variant === 'adjust' && parseFloat(currentPrice) === parseFloat(price)\r\n  const priceIsValid = !price || Number.isNaN(parseFloat(price)) || parseFloat(price) <= 0\r\n\r\n  const { creatorFee, tradingFee } = useGetCollection(nftToSell.collectionAddress)\r\n  const creatorFeeAsNumber = parseFloat(creatorFee)\r\n  const tradingFeeAsNumber = parseFloat(tradingFee)\r\n  const bnbPrice = useBNBBusdPrice()\r\n  const priceAsFloat = parseFloat(price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbPrice, priceAsFloat)\r\n\r\n  const priceIsOutOfRange = priceAsFloat > MAX_PRICE || priceAsFloat < MIN_PRICE\r\n\r\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'When selling NFTs from this collection, a portion of the BNB paid will be diverted before reaching the seller:',\r\n        )}\r\n      </Text>\r\n      {creatorFeeAsNumber > 0 && (\r\n        <Text>{t('%percentage%% royalties to the collection owner', { percentage: creatorFee })}</Text>\r\n      )}\r\n      <Text>{t('%percentage%% trading fee will be used to buy & burn CAKE', { percentage: tradingFee })}</Text>\r\n    </>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (inputRef && inputRef.current) {\r\n      inputRef.current.focus()\r\n    }\r\n  }, [inputRef])\r\n\r\n  const getButtonText = () => {\r\n    if (variant === 'adjust') {\r\n      if (adjustedPriceIsTheSame || priceIsValid) {\r\n        return t('Input New Sale Price')\r\n      }\r\n      return t('Confirm')\r\n    }\r\n    return t('Enable Listing')\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold p=\"16px\">\r\n        {variant === 'set' ? t('Set Price') : t('Adjust Sale Price')}\r\n      </Text>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Set Price')}\r\n        </Text>\r\n        <Flex>\r\n          <Flex flex=\"1\" alignItems=\"center\">\r\n            <BinanceIcon width={24} height={24} mr=\"4px\" />\r\n            <Text bold>WBNB</Text>\r\n          </Flex>\r\n          <Flex flex=\"2\">\r\n            <RightAlignedInput\r\n              scale=\"sm\"\r\n              type=\"number\"\r\n              inputMode=\"decimal\"\r\n              value={price}\r\n              ref={inputRef}\r\n              isWarning={priceIsOutOfRange}\r\n              onChange={(e) => setPrice(e.target.value)}\r\n            />\r\n          </Flex>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" height=\"21px\" justifyContent=\"flex-end\">\r\n          {!Number.isNaN(priceInUsd) && (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`$${priceInUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        {priceIsOutOfRange && (\r\n          <Text fontSize=\"12px\" color=\"failure\">\r\n            {t('Allowed price range is between %minPrice% and %maxPrice% WBNB', {\r\n              minPrice: MIN_PRICE,\r\n              maxPrice: MAX_PRICE,\r\n            })}\r\n          </Text>\r\n        )}\r\n        <Flex mt=\"8px\">\r\n          <Text small color=\"textSubtle\" mr=\"8px\">\r\n            {t('Seller pays %percentage%% platform fee on sale', {\r\n              percentage: creatorFeeAsNumber + tradingFeeAsNumber,\r\n            })}\r\n          </Text>\r\n          <span ref={targetRef}>\r\n            <ErrorIcon />\r\n          </span>\r\n          {tooltipVisible && tooltip}\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Platform fee if sold')}\r\n          </Text>\r\n          <FeeAmountCell bnbAmount={priceAsFloat} creatorFee={creatorFeeAsNumber} tradingFee={tradingFeeAsNumber} />\r\n        </Flex>\r\n        {lowestPrice && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Lowest price on market')}\r\n            </Text>\r\n            <BnbAmountCell bnbAmount={lowestPrice} />\r\n          </Flex>\r\n        )}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Box>\r\n          <Text small color=\"textSubtle\">\r\n            {t('The NFT will be removed from your wallet and put on sale at this price.')}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Sales are in WBNB. You can swap WBNB to BNB 1:1 for free with PancakeSwap.')}\r\n          </Text>\r\n        </Box>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={priceIsValid || adjustedPriceIsTheSame || priceIsOutOfRange}\r\n        >\r\n          {getButtonText()}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SetPriceStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, LinkExternal, BinanceIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface EditStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToAdjustPriceStage: () => void\r\n  continueToRemoveFromMarketStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to edit already listed NFT (i.e. adjust price or remove from sale)\r\nconst EditStage: React.FC<EditStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToAdjustPriceStage,\r\n  continueToRemoveFromMarketStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>{lowestPrice}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n          <Text small color=\"textSubtle\">\r\n            {t('Your price')}\r\n          </Text>\r\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n            <Text small>{nftToSell.marketData.currentAskPrice}</Text>\r\n          </Flex>\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToAdjustPriceStage}>\r\n          {t('Adjust Sale Price')}\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={continueToRemoveFromMarketStage}>\r\n          {t('Remove from Market')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditStage\r\n","import React from 'react'\r\nimport { Flex, Box, Text, Button } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Divider } from '../shared/styles'\r\n\r\ninterface RemoveStageProps {\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst RemoveStage: React.FC<RemoveStageProps> = ({ continueToNextStage }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Box p=\"16px\" maxWidth=\"360px\">\r\n        <Text fontSize=\"24px\" bold>\r\n          {t('Remove from Market')}\r\n        </Text>\r\n        <Text mt=\"24px\" color=\"textSubtle\">\r\n          {t('Removing this NFT from the marketplace will return it to your wallet.')}\r\n        </Text>\r\n        <Text mt=\"16px\" color=\"textSubtle\">\r\n          {t('Continue?')}\r\n        </Text>\r\n      </Box>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RemoveStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { Divider, RoundedImage } from '../shared/styles'\r\nimport { GreyedOutContainer } from './styles'\r\n\r\ninterface TransferStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  transferAddress: string\r\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\r\n  isInvalidTransferAddress: boolean\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst TransferStage: React.FC<TransferStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  transferAddress,\r\n  setTransferAddress,\r\n  isInvalidTransferAddress,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\r\n  const getErrorText = () => {\r\n    if (isInvalidTransferAddress) {\r\n      return t('That’s not a Binance Smart Chain wallet address.')\r\n    }\r\n    if (transferAddressEqualsConnectedAddress) {\r\n      return t('This address is the one that is currently connected')\r\n    }\r\n    return null\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\r\n        {t('Transfer to New Wallet')}\r\n      </Text>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>{lowestPrice}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Flex>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Receiving address')}\r\n        </Text>\r\n        <Input\r\n          scale=\"sm\"\r\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\r\n          placeholder={t('Paste BSC address')}\r\n          value={transferAddress}\r\n          onChange={(e) => setTransferAddress(e.target.value)}\r\n        />\r\n        {isInvalidTransferAddress ||\r\n          (transferAddressEqualsConnectedAddress && (\r\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\r\n              {getErrorText()}\r\n            </Text>\r\n          ))}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Text small color=\"textSubtle\">\r\n          {t('This action will send your NFT to the address you have indicated above. Make sure it’s the correct')}\r\n        </Text>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransferStage\r\n","import React, { useState } from 'react'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { isAddress } from 'utils'\r\nimport { useErc721CollectionContract, useNftMarketContract } from 'hooks/useContract'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeUserNft, updateUserNft } from 'state/nftMarket/reducer'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice'\r\nimport SellStage from './SellStage'\r\nimport SetPriceStage from './SetPriceStage'\r\nimport EditStage from './EditStage'\r\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\r\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\r\nimport { StyledModal, stagesWithBackButton } from './styles'\r\nimport { SellingStage } from './types'\r\nimport ConfirmStage from '../shared/ConfirmStage'\r\nimport RemoveStage from './RemoveStage'\r\nimport TransferStage from './TransferStage'\r\n\r\nexport const modalTitles = (stage: SellingStage, t: ContextApi['t']) => {\r\n  switch (stage) {\r\n    // Sell flow\r\n    case SellingStage.SELL:\r\n      return t('Details')\r\n    case SellingStage.SET_PRICE:\r\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n      return t('Back')\r\n    // Adjust price flow\r\n    case SellingStage.EDIT:\r\n      return t('Details')\r\n    case SellingStage.ADJUST_PRICE:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_ADJUST_PRICE:\r\n      return t('Confirm transaction')\r\n    // Remove from market flow\r\n    case SellingStage.REMOVE_FROM_MARKET:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n      return t('Confirm transaction')\r\n    // Transfer flow\r\n    case SellingStage.TRANSFER:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_TRANSFER:\r\n      return t('Confirm transaction')\r\n    // Common\r\n    case SellingStage.TX_CONFIRMED:\r\n      return t('Transaction Confirmed')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst getToastText = (variant: string, stage: SellingStage, t: ContextApi['t']) => {\r\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n    return t('Your NFT has been returned to your wallet')\r\n  }\r\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n    return t('Your NFT has been transferred to another wallet')\r\n  }\r\n  if (variant === 'sell') {\r\n    return t('Your NFT has been listed for sale!')\r\n  }\r\n  return t('Your NFT listing has been changed.')\r\n}\r\n\r\ninterface SellModalProps extends InjectedModalProps {\r\n  variant: 'sell' | 'edit'\r\n  nftToSell: NftToken\r\n}\r\n\r\nconst SellModal: React.FC<SellModalProps> = ({ variant, nftToSell, onDismiss }) => {\r\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT)\r\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell.marketData.currentAskPrice)\r\n  const [transferAddress, setTransferAddress] = useState('')\r\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { account } = useWeb3React()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { toastSuccess } = useToast()\r\n  const collectionContract = useErc721CollectionContract(nftToSell.collectionAddress)\r\n  const nftMarketContract = useNftMarketContract()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress)\r\n\r\n  const { lowestPrice } = useGetLowestPriceFromNft(nftToSell)\r\n\r\n  const goBack = () => {\r\n    switch (stage) {\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setPrice(nftToSell.marketData.currentAskPrice)\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_ADJUST_PRICE:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        setStage(SellingStage.TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToNextStage = () => {\r\n    switch (stage) {\r\n      case SellingStage.SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL)\r\n        break\r\n      case SellingStage.EDIT:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.CONFIRM_TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToRemoveFromMarketStage = () => {\r\n    setStage(SellingStage.REMOVE_FROM_MARKET)\r\n  }\r\n\r\n  const continueToTransferStage = () => {\r\n    setStage(SellingStage.TRANSFER)\r\n  }\r\n\r\n  const dispatchSuccessAction = () => {\r\n    switch (stage) {\r\n      // Remove from sale\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.WALLET,\r\n          }),\r\n        )\r\n        break\r\n      // Transfer NFT\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        dispatch(\r\n          removeUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n          }),\r\n        )\r\n        break\r\n      default:\r\n        // Modify listing OR list for sale\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.FORSALE,\r\n          }),\r\n        )\r\n        break\r\n    }\r\n  }\r\n\r\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\r\n    onRequiresApproval: async () => {\r\n      try {\r\n        const approvedForContract = await collectionContract.isApprovedForAll(account, nftMarketContract.address)\r\n        return approvedForContract\r\n      } catch (error) {\r\n        return false\r\n      }\r\n    },\r\n    onApprove: () => {\r\n      return callWithGasPrice(collectionContract, 'setApprovalForAll', [nftMarketContract.address, true])\r\n    },\r\n    onApproveSuccess: async ({ receipt }) => {\r\n      toastSuccess(\r\n        t('Contract approved - you can now put your NFT for sale!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n    onConfirm: () => {\r\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId])\r\n      }\r\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n        return callWithGasPrice(collectionContract, 'safeTransferFrom(address,address,uint256)', [\r\n          account,\r\n          transferAddress,\r\n          nftToSell.tokenId,\r\n        ])\r\n      }\r\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder'\r\n      const askPrice = parseUnits(price)\r\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice])\r\n    },\r\n    onSuccess: async ({ receipt }) => {\r\n      toastSuccess(getToastText(variant, stage, t), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      dispatchSuccessAction()\r\n      setConfirmedTxHash(receipt.transactionHash)\r\n      setStage(SellingStage.TX_CONFIRMED)\r\n    },\r\n  })\r\n\r\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving\r\n\r\n  return (\r\n    <StyledModal\r\n      title={modalTitles(stage, t)}\r\n      stage={stage}\r\n      onDismiss={onDismiss}\r\n      onBack={showBackButton ? goBack : null}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stage === SellingStage.SELL && (\r\n        <SellStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          continueToTransferStage={continueToTransferStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.SET_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"set\"\r\n          continueToNextStage={continueToNextStage}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.APPROVE_AND_CONFIRM_SELL && (\r\n        <ApproveAndConfirmStage\r\n          variant=\"sell\"\r\n          isApproved={isApproved}\r\n          isApproving={isApproving}\r\n          isConfirming={isConfirming}\r\n          handleApprove={handleApprove}\r\n          handleConfirm={handleConfirm}\r\n        />\r\n      )}\r\n      {stage === SellingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\r\n      {stage === SellingStage.EDIT && (\r\n        <EditStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToAdjustPriceStage={continueToNextStage}\r\n          continueToRemoveFromMarketStage={continueToRemoveFromMarketStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.ADJUST_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"adjust\"\r\n          continueToNextStage={continueToNextStage}\r\n          currentPrice={nftToSell.marketData.currentAskPrice}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_ADJUST_PRICE && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.REMOVE_FROM_MARKET && <RemoveStage continueToNextStage={continueToNextStage} />}\r\n      {stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.TRANSFER && (\r\n        <TransferStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          transferAddress={transferAddress}\r\n          setTransferAddress={setTransferAddress}\r\n          isInvalidTransferAddress={isInvalidTransferAddress}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_TRANSFER && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default SellModal\r\n","import React from 'react'\r\nimport { NoProfileAvatarIcon } from '@pancakeswap/uikit'\r\nimport { Profile } from 'state/types'\r\nimport styled from 'styled-components'\r\n\r\nexport interface ProfileAvatarProps {\r\n  profile: Profile\r\n}\r\n\r\nconst TeamAvatar = styled.img`\r\n  border: 1px solid ${({ theme }) => theme.card.background};\r\n  border-radius: 50%;\r\n  bottom: 0px;\r\n  position: absolute;\r\n  right: 0px;\r\n  min-width: 20px;\r\n  min-height: 20px;\r\n  width: 37.5%;\r\n  height: 37.5%;\r\n  z-index: 5;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    border-width: 2px;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div<{ bg: string }>`\r\n  background: url('${({ bg }) => bg}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n// TODO: replace with no profile avatar icon\r\nconst AvatarInactive = styled(NoProfileAvatarIcon)`\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nconst ProfileAvatarWithTeam: React.FC<ProfileAvatarProps> = ({ profile }) => {\r\n  return (\r\n    <AvatarWrapper bg={profile.nft?.image.thumbnail}>\r\n      {!profile.isActive && <AvatarInactive />}\r\n      <TeamAvatar src={`/images/teams/${profile.team.images.alt}`} alt={profile.team.name} />\r\n    </AvatarWrapper>\r\n  )\r\n}\r\n\r\nexport default ProfileAvatarWithTeam\r\n","import { useEffect, useMemo } from 'react'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\r\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nconst useFetchUserNfts = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\r\n  const { userNftsInitializationState } = useUserNfts()\r\n  const collections = useGetCollections()\r\n\r\n  const hasProfileNft = profile?.tokenId\r\n  const profileNftTokenId = profile?.tokenId?.toString()\r\n  const profileNftCollectionAddress = profile?.collectionAddress\r\n\r\n  const profileNftWithCollectionAddress = useMemo(() => {\r\n    if (hasProfileNft) {\r\n      return {\r\n        tokenId: profileNftTokenId,\r\n        collectionAddress: profileNftCollectionAddress,\r\n        nftLocation: NftLocation.PROFILE,\r\n      }\r\n    }\r\n    return null\r\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\r\n\r\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\r\n\r\n  // Fetch on first load when profile fetch is resolved\r\n  const shouldFetch =\r\n    account &&\r\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\r\n    isProfileInitialized &&\r\n    !isProfileLoading\r\n\r\n  // Fetch on account / profile change, once profile fetch is resolved\r\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\r\n\r\n  useEffect(() => {\r\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\r\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\r\n    }\r\n  }, [\r\n    dispatch,\r\n    account,\r\n    shouldFetch,\r\n    hasAccountSwitched,\r\n    profileNftTokenId,\r\n    collections,\r\n    profileNftWithCollectionAddress,\r\n  ])\r\n}\r\n\r\nexport default useFetchUserNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Radio } from '@pancakeswap/uikit'\r\n\r\ninterface SelectionCardProps {\r\n  name: string\r\n  value: string | number\r\n  isChecked?: boolean\r\n  onChange: (val: any) => void\r\n  image: string\r\n  disabled?: boolean\r\n}\r\n\r\nconst Label = styled.label<{ isDisabled: boolean }>`\r\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\r\n`\r\n\r\nconst Body = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-grow: 1;\r\n  height: 80px;\r\n  padding: 8px 16px;\r\n`\r\n\r\nconst Children = styled.div`\r\n  margin-left: 16px;\r\n`\r\n\r\nconst StyledBackgroundImage = styled.div<{ src: string }>`\r\n  align-self: stretch;\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: contain;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 80px;\r\n`\r\n\r\nconst SelectionCard: React.FC<SelectionCardProps> = ({\r\n  name,\r\n  value,\r\n  isChecked = false,\r\n  image,\r\n  onChange,\r\n  disabled,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\r\n      <Label isDisabled={disabled}>\r\n        <Body>\r\n          <Radio\r\n            name={name}\r\n            checked={isChecked}\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            disabled={disabled}\r\n            style={{ flex: 'none' }}\r\n          />\r\n          <Children>{children}</Children>\r\n        </Body>\r\n        <StyledBackgroundImage src={image} />\r\n      </Label>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SelectionCard\r\n","import { useReducer } from 'react'\r\n\r\nexport enum Views {\r\n  START = 'start',\r\n  CHANGE = 'change',\r\n  REMOVE = 'remove',\r\n  APPROVE = 'approve',\r\n}\r\n\r\nexport type Actions =\r\n  | {\r\n      type: 'set_view'\r\n      view: Views\r\n    }\r\n  | {\r\n      type: 'go_previous'\r\n    }\r\n\r\nexport interface State {\r\n  currentView: Views\r\n  previousView: Views | null\r\n}\r\n\r\nconst reducer = (state: State, action: Actions): State => {\r\n  switch (action.type) {\r\n    case 'set_view':\r\n      return {\r\n        ...state,\r\n        currentView: action.view,\r\n        previousView: state.currentView,\r\n      }\r\n    case 'go_previous':\r\n      return {\r\n        ...state,\r\n        currentView: state.previousView,\r\n        previousView: state.currentView,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport interface UseEditProfileResponse extends State {\r\n  goToStart: () => void\r\n  goToChange: () => void\r\n  goToApprove: () => void\r\n  goToRemove: () => void\r\n  goPrevious: () => void\r\n}\r\n\r\nconst useEditProfile = (): UseEditProfileResponse => {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    currentView: Views.START,\r\n    previousView: null,\r\n  })\r\n\r\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\r\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\r\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\r\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\r\n  const goPrevious = () => dispatch({ type: 'go_previous' })\r\n\r\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\r\n}\r\n\r\nexport default useEditProfile\r\n","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst useGetProfileCosts = () => {\r\n  const { t } = useTranslation()\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [costs, setCosts] = useState({\r\n    numberCakeToReactivate: ethers.BigNumber.from(0),\r\n    numberCakeToRegister: ethers.BigNumber.from(0),\r\n    numberCakeToUpdate: ethers.BigNumber.from(0),\r\n  })\r\n  const { toastError } = useToast()\r\n\r\n  useEffect(() => {\r\n    const fetchCosts = async () => {\r\n      try {\r\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map((method) => ({\r\n          address: getPancakeProfileAddress(),\r\n          name: method,\r\n        }))\r\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2<\r\n          [[ethers.BigNumber], [ethers.BigNumber], [ethers.BigNumber]]\r\n        >(profileABI, calls)\r\n\r\n        setCosts({\r\n          numberCakeToReactivate,\r\n          numberCakeToRegister,\r\n          numberCakeToUpdate,\r\n        })\r\n        setIsLoading(false)\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'))\r\n      }\r\n    }\r\n\r\n    fetchCosts()\r\n  }, [setCosts, toastError, t])\r\n\r\n  return { costs, isLoading }\r\n}\r\n\r\nexport default useGetProfileCosts\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Flex, Text, InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { useCake } from 'hooks/useContract'\r\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport ProfileAvatarWithTeam from 'components/ProfileAvatarWithTeam'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface StartPageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n  goToRemove: UseEditProfileResponse['goToRemove']\r\n  goToApprove: UseEditProfileResponse['goToApprove']\r\n}\r\n\r\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\r\n  border-color: ${({ theme }) => theme.colors.failure};\r\n  color: ${({ theme }) => theme.colors.failure};\r\n  margin-bottom: 24px;\r\n\r\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\r\n    border-color: ${({ theme }) => theme.colors.failure};\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div`\r\n  height: 64px;\r\n  width: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 128px;\r\n    width: 128px;\r\n  }\r\n`\r\n\r\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const { profile } = useProfile()\r\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\r\n  const {\r\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\r\n    isLoading: isProfileCostsLoading,\r\n  } = useGetProfileCosts()\r\n  const [needsApproval, setNeedsApproval] = useState(null)\r\n  const minimumCakeRequired = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(minimumCakeRequired)\r\n\r\n  /**\r\n   * Check if the wallet has the required CAKE allowance to change their profile pic or reactivate\r\n   * If they don't, we send them to the approval screen first\r\n   */\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      const response = await cakeContract.allowance(account, getPancakeProfileAddress())\r\n      setNeedsApproval(response.lt(minimumCakeRequired))\r\n    }\r\n\r\n    if (account && !isProfileCostsLoading) {\r\n      checkApprovalStatus()\r\n    }\r\n  }, [account, minimumCakeRequired, setNeedsApproval, cakeContract, isProfileCostsLoading])\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n      <AvatarWrapper>\r\n        <ProfileAvatarWithTeam profile={profile} />\r\n      </AvatarWrapper>\r\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\r\n        <Text as=\"p\" color=\"failure\">\r\n          {!isProfileCostsLoading &&\r\n            !hasMinimumCakeRequired &&\r\n            t('%minimum% CAKE required to change profile pic', { minimum: formatBigNumber(minimumCakeRequired) })}\r\n        </Text>\r\n      </Flex>\r\n      {profile.isActive ? (\r\n        <>\r\n          <Button\r\n            width=\"100%\"\r\n            mb=\"8px\"\r\n            onClick={needsApproval === true ? goToApprove : goToChange}\r\n            disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\r\n          >\r\n            {t('Change Profile Pic')}\r\n          </Button>\r\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\r\n            {t('Remove Profile Pic')}\r\n          </DangerOutline>\r\n        </>\r\n      ) : (\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={needsApproval === true ? goToApprove : goToChange}\r\n          disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\r\n        >\r\n          {t('Reactivate Profile')}\r\n        </Button>\r\n      )}\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StartPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useToast from 'hooks/useToast'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ntype PauseProfilePageProps = InjectedModalProps\r\n\r\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\r\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { profile } = useProfile()\r\n  const {\r\n    costs: { numberCakeToReactivate },\r\n  } = useGetProfileCosts()\r\n  const { t } = useTranslation()\r\n  const pancakeProfileContract = useProfileContract()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\r\n\r\n  const handleDeactivateProfile = async () => {\r\n    const tx = await callWithGasPrice(pancakeProfileContract, 'pauseProfile')\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      // Re-fetch profile\r\n      await dispatch(fetchProfile(account))\r\n      toastSuccess(t('Profile Paused!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      onDismiss()\r\n    } else {\r\n      toastError(t('Error'), t('Sorry! Transaction is failed!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n        {t('This will suspend your profile and send your Collectible back to your wallet')}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t(\r\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\r\n        )}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Cost to reactivate in the future: %cost% CAKE', { cost: formatBigNumber(numberCakeToReactivate) })}\r\n      </Text>\r\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\r\n        <Flex alignItems=\"center\">\r\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\r\n          <Text ml=\"8px\">{t('I understand')}</Text>\r\n        </Flex>\r\n      </label>\r\n      <Button\r\n        width=\"100%\"\r\n        isLoading={isConfirming}\r\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        disabled={!isAcknowledged || isConfirming}\r\n        onClick={handleDeactivateProfile}\r\n        mb=\"8px\"\r\n      >\r\n        {t('Confirm')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PauseProfilePage\r\n","import React, { useState } from 'react'\r\nimport { Button, Box, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\r\nimport SelectionCard from 'views/ProfileCreation/SelectionCard'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { NftLocation } from 'state/nftMarket/types'\r\n\r\ntype ChangeProfilePicPageProps = InjectedModalProps\r\n\r\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\r\n  const [selectedNft, setSelectedNft] = useState({\r\n    tokenId: null,\r\n    collectionAddress: null,\r\n  })\r\n  const { t } = useTranslation()\r\n  const { nfts } = useUserNfts()\r\n  const dispatch = useAppDispatch()\r\n  const { profile } = useProfile()\r\n  const profileContract = useProfileContract()\r\n  const { account, library } = useWeb3React()\r\n  const { toastSuccess } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const nftsInWallet = nfts.filter((nft) => nft.location === NftLocation.WALLET)\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onApprove: () => {\r\n        const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\r\n        return callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\r\n      },\r\n      onConfirm: () => {\r\n        if (!profile.isActive) {\r\n          return callWithGasPrice(profileContract, 'reactivateProfile', [\r\n            selectedNft.collectionAddress,\r\n            selectedNft.tokenId,\r\n          ])\r\n        }\r\n\r\n        return callWithGasPrice(profileContract, 'updateProfile', [selectedNft.collectionAddress, selectedNft.tokenId])\r\n      },\r\n      onSuccess: async ({ receipt }) => {\r\n        // Re-fetch profile\r\n        await dispatch(fetchProfile(account))\r\n        toastSuccess(t('Profile Updated!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Choose a new Collectible to use as your profile pic.')}\r\n      </Text>\r\n      <Box maxHeight=\"300px\" overflowY=\"scroll\">\r\n        {nftsInWallet.map((walletNft) => {\r\n          const handleChange = () => {\r\n            setSelectedNft({\r\n              tokenId: walletNft.tokenId,\r\n              collectionAddress: walletNft.collectionAddress,\r\n            })\r\n          }\r\n          return (\r\n            <SelectionCard\r\n              name=\"profilePicture\"\r\n              key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\r\n              value={walletNft.tokenId}\r\n              image={walletNft.image.thumbnail}\r\n              isChecked={walletNft.tokenId === selectedNft.tokenId}\r\n              onChange={handleChange}\r\n              disabled={isApproving || isConfirming || isConfirmed}\r\n            >\r\n              <Text bold>{walletNft.name}</Text>\r\n            </SelectionCard>\r\n          )\r\n        })}\r\n      </Box>\r\n      {nfts.length === 0 && (\r\n        <>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\r\n            {t('Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\r\n          </Text>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\r\n          </Text>\r\n        </>\r\n      )}\r\n      <ApproveConfirmButtons\r\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\r\n        isApproving={isApproving}\r\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\r\n        isConfirming={isConfirming}\r\n        onApprove={handleApprove}\r\n        onConfirm={handleConfirm}\r\n      />\r\n      <Button mt=\"8px\" variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChangeProfilePicPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface ApproveCakePageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n}\r\n\r\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\r\n  const [isApproving, setIsApproving] = useState(false)\r\n  const { profile } = useProfile()\r\n  const { t } = useTranslation()\r\n  const {\r\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\r\n  } = useGetProfileCosts()\r\n  const cakeContract = useCake()\r\n  const { toastError } = useToast()\r\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n\r\n  const handleApprove = async () => {\r\n    const tx = await cakeContract.approve(getPancakeProfileAddress(), cost.mul(2).toString())\r\n    setIsApproving(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      goToChange()\r\n    } else {\r\n      toastError(t('Error'), t('Sorry! Transaction is failed!'))\r\n      setIsApproving(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\r\n        <Text>{formatBigNumber(cost)} CAKE</Text>\r\n      </Flex>\r\n      <Button\r\n        disabled={isApproving}\r\n        isLoading={isApproving}\r\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        width=\"100%\"\r\n        mb=\"8px\"\r\n        onClick={handleApprove}\r\n      >\r\n        {t('Enable')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveCakePage\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport useEditProfile, { Views } from './reducer'\r\nimport StartView from './StartView'\r\nimport PauseProfileView from './PauseProfileView'\r\nimport ChangeProfilePicView from './ChangeProfilePicView'\r\nimport ApproveCakeView from './ApproveCakeView'\r\n\r\ntype EditProfileModalProps = InjectedModalProps\r\n\r\nconst viewTitle = (t: ContextApi['t'], currentView: Views) => {\r\n  switch (currentView) {\r\n    case Views.START:\r\n      return t('Edit Profile')\r\n    case Views.CHANGE:\r\n      return t('Change Profile Pic')\r\n    case Views.REMOVE:\r\n      return t('Remove Profile Pic')\r\n    case Views.APPROVE:\r\n      return t('Enable CAKE')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({ onDismiss }) => {\r\n  const { currentView, goToChange, goToRemove, goToApprove, goPrevious } = useEditProfile()\r\n  const { t } = useTranslation()\r\n\r\n  const isStartView = currentView === Views.START\r\n  const handleBack = isStartView ? null : () => goPrevious()\r\n\r\n  return (\r\n    <Modal title={viewTitle(t, currentView)} onBack={handleBack} onDismiss={onDismiss} hideCloseButton={!isStartView}>\r\n      <div style={{ maxWidth: '400px' }}>\r\n        {currentView === Views.START && (\r\n          <StartView goToApprove={goToApprove} goToChange={goToChange} goToRemove={goToRemove} onDismiss={onDismiss} />\r\n        )}\r\n        {currentView === Views.REMOVE && <PauseProfileView onDismiss={onDismiss} />}\r\n        {currentView === Views.CHANGE && <ChangeProfilePicView onDismiss={onDismiss} />}\r\n        {currentView === Views.APPROVE && <ApproveCakeView goToChange={goToChange} onDismiss={onDismiss} />}\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EditProfileModal\r\n"],"sourceRoot":""}